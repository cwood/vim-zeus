TITLE: lang.isarray
SEEALSO: lang.ishash
DESCRIPTION: Returns whether or not the supplied data is an array.
SAMPLE: sub passMeAnArray( $array ) {
      # Test whether the supplied data is an array
      if( !lang.isArray( $array ) ) {
         return false;
      }
      # ...
   }
PARAMETERS: data

TITLE: string.regexmatch
SEEALSO: string.wildmatch, string.regexsub, string.regexescape
DESCRIPTION: Performs a regular expression match on
the supplied string. If the regular expression 'regex'
contains bracketed sub-expressions, then the variables $1
... $9 will be set to the matching substrings.
Note that the '\' character is an escape character in TrafficScript
strings enclosed with double quotation marks. If you need to put a
literal '\' in a regular expression, you must escape it as '\\'
or enclose the string in single quotation marks.
To match a literal string inside a regular expression use the
string.regexEscape function.
The optional 'flags' parameter contains a string of
single-letter options. The following options are supported:
'i', meaning 'case insensitive' - letters in the pattern
match both upper and lower case letters.
It returns 1 if matched, and 0 otherwise.
SAMPLE: $id = "user=Joe, password=Secret";
   if( string.regexmatch(
      $id, "^user=(.*), password=(.*)$" ) ) {
      log.info( "Got UserID: ".$1.", Password: ".$2 );
   }
$name = "Name( Bob )";
   string.regexmatch( $name, 'Name\( (\S+) \)' );
   log.info( $1 ); # prints Bob
PARAMETERS: string, regex, [flags] )

TITLE: array.join
SEEALSO: string.split
DESCRIPTION: Concatenates all the elements of the supplied array
into a string separated by the separator.
The elements will be separated by a space if no
separator is supplied.
Note that a warning will be printed should the supplied array itself
contain any arrays or hashes.
SAMPLE: # Print a comma-separated list of names
   $names = [ "alice", "bob", "mallory" ];
   log.info( array.join( $names, ", " ) );
PARAMETERS: array, [separator]

TITLE: string.hashSHA1
SEEALSO: string.hexencode, string.hashMD5, string.hashSHA256, string.hashSHA384, string.hashSHA512
DESCRIPTION: Returns the SHA1 hash of the provided
string. The returned string will be 20 bytes long, and may
contain non-printable characters.
SAMPLE: $hash = string.hashSHA1( $data );
PARAMETERS: string

TITLE: sys.getpid
DESCRIPTION: Returns the process id of the current process.
SAMPLE: $mypid = sys.getpid();

TITLE: array.push
SEEALSO: array.shift, array.unshift, array.pop
DESCRIPTION: Adds the supplied value to the end of the supplied
array.
The return value of this function can be used as the argument to another
function to perform multiple operations on the same array.
SAMPLE: # Append 4 to the array
   $numbers = [ 1, 2, 3 ];
   array.push( $numbers, 4 );
PARAMETERS: array, value

TITLE: string.intToHex
SEEALSO: string.hexToInt
DESCRIPTION: Converts an integer into a hexadecimal string.
SAMPLE: # Returns "0000cafe"
   $hex = string.intToHex( 51966 );
PARAMETERS: string

TITLE: sys.hostname
SEEALSO: sys.domainname
DESCRIPTION: Returns the hostname of the host machine. For example, if the machine is
named "server1.example.com", sys.hostname() will return "server1".
SAMPLE: $hostname = sys.hostname();

TITLE: array.resize
SEEALSO: array.create
DESCRIPTION: Resizes the supplied array to the specified size.
If the size of the array is being increased and the
default parameter is specified then the new elements added
to the array will be set to the default parameter.
If the new size is smaller than the original size then the appropriate
number of elements will be removed from the end of the array.
The return value of this function can be used as the argument to another
function to perform multiple operations on the same array.
SAMPLE: # We're only interested in the first
   # 10 lines of body data - but fill in the
   # rest with blank lines if there are fewer
   # than 10 lines.
   $body = array.resize( http.getBodyLines(), 10, "" );
PARAMETERS: array, size, [default]

TITLE: math.exp
SEEALSO: math.ln, math.pow
DESCRIPTION: Calculates e raised to the power of its parameter
and returns the result.
SAMPLE: $r = math.exp( math.ln( 10 ) ); # returns 10
PARAMETERS: power

TITLE: json.serialize
SEEALSO: json.deserialize
DESCRIPTION: Converts the supplied array or hash variable into
JavaScript Object Notation (JSON). This format is
commonly used to exchange data between online
applications.
SAMPLE: # Serialising an array
   $array = [ "element 1", "element 2" ];
   $json_array = json.serialize( $array );
# Serialising a hash
   $hash = [ "key 1" => "value 1",
             "key 2" => [ "array element" ] ];
   $json_object = json.serialize( $hash );
PARAMETERS: object

TITLE: math.pow
SEEALSO: math.ln, math.exp, math.sqrt
DESCRIPTION: Raises its first parameter to the power of its
second parameter and returns the result.
SAMPLE: $r = math.pow( 2, 3 ); # returns 8
PARAMETERS: num, power

TITLE: lang.warn
SEEALSO: lang.assert
DESCRIPTION: Prints a warning to the log with the line number that
this function call appears on.
If strict error checking is enabled then the rule will
abort.
SAMPLE: $decoded = string.decrypt( $password, "passphrase" );
   if( !$decoded ) {
      lang.warn( "Failed to decrypt string" );
   } else {
      # String decrypt succeeded...
   }
PARAMETERS: message

TITLE: string.extractHost
SEEALSO: string.extractPort
DESCRIPTION: Returns the host part of the supplied address if it is a valid IP or
hostname. Otherwise the empty string is returned.
SAMPLE: sub lookup_proxy( $path ) {
      # Code to map a path to a node
   }
   # Send certain requests to an external server
   $forward = lookup_proxy( http.getPath() );
   if( $forward
       && $host = string.extractHost( $forward ) ) {
      if( !$port = string.extractPort( $forward ) ) {
         $port = 80;
      }
      pool.use( "External", $host, $port );
   }
PARAMETERS: string

TITLE: string.validIPAddress
SEEALSO: string.ipmaskmatch
DESCRIPTION: Returns 4 if the string provided is an IPv4
address, 6 if it is an IPv6 address and 0 if it is not a valid IP
address.
SAMPLE: $ipversion = string.validIPAddress( $x );
   if( 4 == $ipversion ) {
      # do something specific to IPv4
   } else if( 6 == $ipversion ) {
      # do something specific to IPv6
   } else {
      # error: not a valid IP address
   }
PARAMETERS: string

TITLE: math.cos
SEEALSO: math.sin, math.tan
DESCRIPTION: Interprets its parameter as an angle in radians
and returns its cosine.
SAMPLE: $cos = math.cos( 6.28314 ); # returns 1 (approx.)
PARAMETERS: angle

TITLE: string.IreplaceAll
REPLACEDBY: string.replaceAllI
DESCRIPTION: Returns a new string, copied from the original string, with
all occurrences of the search string in the supplied string
replaced by the replacement string. This function is case-insensitive.
SAMPLE: # Rewrite incoming URL
   $url = string.IreplaceAll($url, "/in", "/out");
PARAMETERS: string, search, replacement

TITLE: string.hash
DESCRIPTION: Returns a number representing a hash of the provided string. When using
string.hash(), negative numbers can be returned for the hash value. The
returned value should not be relied on to be consistent across
different releases of the software.
SAMPLE: $hash = string.hash( http.getRawURL() );
   connection.setPersistenceKey( $hash % 1000 );
PARAMETERS: string

TITLE: math.atan
SEEALSO: math.tan
DESCRIPTION: Calculates the arc tangent of x and returns an
angle in radians in the range -pi/2 to pi/2.
SAMPLE: $atan = math.atan( 0 ); # returns 0 (approx.)
PARAMETERS: angle

TITLE: hash.contains
SEEALSO: hash.keys
DESCRIPTION: Returns whether the supplied hash contains a particular key.
SAMPLE: # See if bob is in the hash of users
   #  and if so, whether his password matches
   if( hash.contains( $users, "bob" ) ) {
      if( $users["bob"] == $password ) {
         # Access granted
      } else {
         # Access denied
      }
   } else {
       # User does not exist
   }
PARAMETERS: hash, key

TITLE: math.tan
SEEALSO: math.sin, math.cos
DESCRIPTION: Interprets its parameter as an angle in radians
and returns its tangent.
SAMPLE: $tan = math.tan( 6.28314 ); # returns 0 (approx.)
PARAMETERS: angle

TITLE: lang.toInt
SEEALSO: lang.toDouble, lang.toString
DESCRIPTION: Returns the integer value of its parameter,
using the TrafficScript type-casting rules.
SAMPLE: $r = lang.toInt( "10xxx" ); # returns 10
   $r = lang.toInt( 3.14157 ); # returns 3
   $r = lang.toInt( 10 );      # returns 10
   $r = lang.toInt( "!!!" );   # returns 0
PARAMETERS: value

TITLE: lang.toDouble
SEEALSO: lang.toInt, lang.toString
DESCRIPTION: Returns the double (floating point) value of
its parameter, using the TrafficScript type-casting rules.
SAMPLE: $r = lang.toDouble( "3.14157" ); # returns 3.14157
   $r = lang.toDouble( 10 );        # returns 10
   $r = lang.toDouble( 3.14175 );   # returns 3.14175
   $r = lang.toDouble( "!!!" );     # returns 0.0
PARAMETERS: value

TITLE: string.append
DESCRIPTION: Returns the result of concatenating all of its inputs together as
strings.
SAMPLE: # Returns "The answer is 42"
   $s = string.append( "The ", "answer ", "is " , 42 );
PARAMETERS: str1, str2, ...

TITLE: sys.gmtime.format
SEEALSO: sys.time, sys.time.seconds, sys.time.minutes, sys.time.hour, sys.time.weekday, sys.time.monthday, sys.time.month, sys.time.year, sys.time.yearday, sys.localtime.format, string.gmtime.parse
DESCRIPTION: Converts the time into a string format.
This function converts using GM time - see sys.localtime.format()
to convert using localtime.
FormatMeaningFormatMeaning
%aMon Tue Wed ...%AMonday Tuesday ...
%bJan Feb Mar ...%BJanuary February ...
%dDay of month "01"-"31"%D%m/%d/%y
%eDay of month " 1"-"31"%HHour of day "00-23"
%hEquivalent to %b%IHour of day "01" - "12"
%jJulian day of the year "001" to "366"%mMonth of year "01" - "12"
%MMinute "00" - "59"%nNewline character
%pAM/PM%rTime in %I:%M:%S [AM|PM]
%R%H:%M%SSeconds, output as a number between "00" and "61"
%tTab character%T%H:%M:%S
%uDay of week (1 = Monday, 7 = Sunday)%wDay of week (0 = Sunday, 6 = Saturday)
%yYear (without century) "00" to "99"%YYear "0000"  to "9999"
%ZTime zone ("GMT")%%"%"
If supplied, the optional 'unixtime' parameter specifies the number of
seconds since midnight 1/1/1970, and the function returns a formatted
string representing that time.  If the 'unixtime' value is not provided,
the current time will be returned.
SAMPLE: # Return a time suitable for an HTTP header
   # e.g. Mon, 14 Aug 2006 12:39:01 GMT
   $str = sys.gmtime.format( "%a, %d %b %Y %T GMT" );
PARAMETERS: format, unixtime

TITLE: string.hashMD5
SEEALSO: string.hexencode, string.hashSHA1, string.hashSHA256, string.hashSHA384, string.hashSHA512
DESCRIPTION: Returns the MD5 hash of the provided string. The returned string will be
16 bytes long, and may contain non-printable characters.
SAMPLE: $hash = string.hashMD5( $data );
PARAMETERS: string

TITLE: lang.tochar
SEEALSO: lang.chr
DESCRIPTION: This function is an alias for lang.chr.
SAMPLE: # Pick a random letter from A - Z
   $char = lang.tochar( math.random( 26 ) + 65 );
PARAMETERS: number

TITLE: string.normalizeIPAddress
SEEALSO: string.validIPAddress
DESCRIPTION: Returns a unique string representation
of an IP address: all leading zeros are removed, and for IPv6
addresses the first occurrence of blocks consisting entirely of
zeros is replaced by "::".  This normal form can be used to compare
IP addresses without ambiguity and is also the form used by
TrafficScript functions returning IP addresses.  If the string is
not a valid IP address, the empty string is returned.
SAMPLE: $remote_ip = request.getremoteip();
   $client = string.normalizeipaddress(
               "2001:0:0157::0:006a" );
   # $client is now "2001::157:0:0:0:0:6a"
   if( $remote_ip == $client ){
      # do something specific for this client
   }
PARAMETERS: string

TITLE: string.encrypt
SEEALSO: string.decrypt
DESCRIPTION: Encrypts a string using the provided pass phrase.  The returned string is
encrypted using the AES block cipher, using an expanded form of the
passphrase as the cipher key. A MAC is also added to ensure the integrity
of the string.
This is open to replay attacks, and as such, should not be used to
encrypt sensitive data, such as credit card details.
SAMPLE: # Encrypt the 'kart' cookie
   $cookie = http.getresponsecookie( "kart" );
   if( $cookie != "" ) {
      $cookie = string.encrypt( $cookie, $passphrase );
      http.setresponsecookie( "kart", $cookie );
   }
PARAMETERS: string, passphrase

TITLE: string.contains
SEEALSO: string.containsI, string.find, string.findr, string.startsWith, string.endsWith
DESCRIPTION: Searches for the provided string (the needle) in the given source
(the haystack).
It returns 1 if the 'needle' was found, or 0 otherwise.
SAMPLE: if( string.contains( $cookie, "chocolate" ) ) {
      # The cookie contains chocolate ...
   }
PARAMETERS: haystack, needle

TITLE: string.gmtime.parse
SEEALSO: sys.gmtime.format
DESCRIPTION: Parses the supplied string as a time stamp and
returns the time in seconds since the epoch (1st Jan 1970). Dates before
the epoch or after 2038 will produce unexpected results.
Note: Timezone information contained inside the time string is
ignored. The time is always assumed to be in GMT.
SAMPLE: # Parse a string into unix time format
   $str = "Tue, 21 Oct 2008 13:44:26 GMT";
   $time = string.gmtime.parse( $str );
PARAMETERS: str

TITLE: string.randomBytes
SEEALSO: math.random
DESCRIPTION: Returns a string of the supplied length filled with random bytes.
The random number generator used by this function generates output 
that is suitable for use in cryptographic operations.
SAMPLE: # Get a string 16 bytes long filled with random data
   $str = string.randomBytes( 16 );
PARAMETERS: length

TITLE: math.log
SEEALSO: math.ln, math.pow
DESCRIPTION: Returns the base10 logarithm of its parameter.
SAMPLE: $log = math.log( 100 ); # returns 2
PARAMETERS: value

TITLE: string.base64encode
SEEALSO: string.base64decode, string.hexencode, string.escape
DESCRIPTION: Returns the base64-encoded version of
the provided string. This converts each group of three
characters into a 4-character string containing just
[A-Za-z0-9+/], and '=' for padding.
Base64 encoding is used for MIME-encoded messages, and in
the HTTP Basic Authorization header.
SAMPLE: # Encodes a username and password for HTTP
   # BASIC authentication
   $enc = string.base64encode( "user:passwd" );
   $h = "Basic ".$enc;
   http.setHeader( "Authorization", $h );
PARAMETERS: string

TITLE: array.sort
SEEALSO: array.sortNumerical
DESCRIPTION: Sorts the supplied array alphanumerically. If the optional
reverse parameter is true, then the array will be
sorted in reverse.
The return value of this function can be used as the argument to another
function to perform multiple operations on the same array.
SAMPLE: # Sort the keys of a hash before iterating over them
   foreach( $key in array.sort( hash.keys( $hash ) ) ) {
      log.info( $key . " maps to " . $hash[$keys] );
   }
# Sort these numbers alphanumerically
   $sorted = array.sort( [ 1, 2, 3, 4, 10, 11 ] );
# The result will be [ 1, 10, 11, 2, 3, 4 ]
# Reverse sort these numbers alphanumerically
   $rev = array.sort( [ 1, 2, 3, 4, 10, 11 ], true );
# The result will be [ 4, 3, 2, 11, 10, 1 ]
PARAMETERS: array, [reverse]

TITLE: string.decrypt
SEEALSO: string.encrypt
DESCRIPTION: Returns the decrypted version of a string that has previously been
encrypted using string.encrypt(). The passphrase supplied must
match that given to string.encrypt(), otherwise the decoding will
fail.
An empty string is returned if the decrypt or the integrity check
fails.
SAMPLE: # Decrypt the 'kart' cookie
   $cookie = http.getcookie( "kart" );
   if( $cookie != "" ) {
      $cookie = string.decrypt( $cookie, $passphrase );
      if( $cookie == "" ) {
         log.warn( "User modified kart cookie" );
         http.removecookie( "kart" );
      } else {
         http.setcookie( "kart", $cookie );
      }
   }
PARAMETERS: string, passphrase

TITLE: hash.delete
SEEALSO: hash.keys
DESCRIPTION: Deletes the specified key from the hash.
The return value of this function can be used as the argument to another
function to perform multiple operations on the same hash.
SAMPLE: $hash = [ "orange" => "fruit",
             "apple" => "fruit",
             "cabbage" => "vegetable",
             "pear" => "fruit" ];
hash.delete( $hash, "cabbage" );
# keys will be orange, apple and pear
   $keys = hash.keys( $hash );
PARAMETERS: hash, key

TITLE: lang.assert
SEEALSO: lang.warn
DESCRIPTION: If the condition is false, prints a warning to the log
with the current line number and terminates the rule.
If the condition is true then no messages will be printed
and the rule will continue as normal.
SAMPLE: # Make sure that this rule is only run with
   # Virtual Servers that are using SSL Decryption.
   lang.assert( ssl.isSSL(),
                "This rule should only be used \
                 with decrypted SSL connections" );
PARAMETERS: condition, message

TITLE: sys.time.highres
SEEALSO: sys.timeToString, sys.localtime.format, sys.gmtime.format, sys.time
DESCRIPTION: Returns the current system time as the number of
seconds and microseconds since midnight, 1/1/1970. The value
is returned as a double, e.g. 1138417190.823265
SAMPLE: $time = sys.time.highres();

TITLE: lang.ishash
SEEALSO: lang.isarray
DESCRIPTION: Returns whether or not the supplied data is a hash.
SAMPLE: sub passMeAHash( $hash ) {
      # Test whether the supplied data is a hash
      if( !lang.isHash( $hash ) ) {
         return false;
      }
      # ...
   }
PARAMETERS: data

TITLE: string.skip
SEEALSO: string.drop, string.trim
DESCRIPTION: Returns all but the first 'count' characters from the
input string. An empty string will
be returned if 'count' is greater than the length of the
original string.
SAMPLE: # returns "/bin/sh"
   $s = string.skip( "#!/bin/sh", 2 );
PARAMETERS: string, count

TITLE: math.ceil
SEEALSO: math.floor, math.rint, math.fabs
DESCRIPTION: Returns the smallest integer greater than or
equal to its parameter.
SAMPLE: $r = math.ceil( 6.28 ); # returns 7
   $r = math.ceil( "4" ); # returns 4
PARAMETERS: value

TITLE: string.replaceI
SEEALSO: string.replace, string.replaceAllI, string.replaceAll
DESCRIPTION: Returns a new string, copied from the original string, with
the first occurrence of the search string in the supplied string
replaced by the replacement string. This function is case-insensitive.
SAMPLE: # Rewrite incoming URL
   $url = string.replaceI($url, "/secure", "/private");
PARAMETERS: string, search, replacement

TITLE: string.regexescape
SEEALSO: string.escape
DESCRIPTION: Returns a version of its parameter suitable for using inside a regex
match as a string literal.
All characters in the string that aren't a-z, A-Z, 0-9 or '_' are escaped
using a backslash.
SAMPLE: $str = "10.100.230.5";
   $escaped = string.regexescape( $str );
   if( string.regexmatch( $line, $escaped ) ) {
      log.info( "Line matched: " . $str );
   }
PARAMETERS: string

TITLE: string.startsWith
SEEALSO: string.startsWithI, string.endsWith, string.contains
DESCRIPTION: Returns 1 if the provided string starts with the given prefix, and 0
otherwise.
SAMPLE: if( string.startsWith( $url, "http://" ) ) {
      # URL is of the form http://host/uri ...
   }
PARAMETERS: string, prefix

TITLE: string.dottedToBytes
SEEALSO: string.bytesToDotted, string.intToBytes
DESCRIPTION: Converts an IP address to a network order byte string.
SAMPLE: # Prepend the client IP onto $msg
   $ip = request.getRemoteIP();
   $msg = string.dottedToBytes( $ip ).$msg;
PARAMETERS: IP address

TITLE: array.sortNumerical
SEEALSO: array.sort
DESCRIPTION: Sort the supplied array numerically in ascending order. If the
optional reverse parameter is true, then the array will be
sorted in descending order.
The return value of this function can be used as the argument to another
function to perform multiple operations on the same array.
SAMPLE: # Sort an array of numbers
   $numbers = [ 2, 10, "3", "4", 24, "11" ];
   array.sortNumerical( $numbers );
# $numbers is now [ 2, "3", "4", 10, "11", 24 ]
# Reverse sort an array of numbers
   array.sortNumerical( $numbers, true );
# $numbers is now [ 24, "11", 10, "4", "3", 2 ]
PARAMETERS: array, [reverse]

TITLE: string.base64decode
SEEALSO: string.base64encode, string.hexdecode, string.unescape
DESCRIPTION: Decodes a base64-encoded string and
returns the result.
Base64 encoding is used for MIME-encoded messages, and in
the HTTP Basic Authorization header.
SAMPLE: # Decodes a username and password from HTTP
   # BASIC authentication
   $h = http.getHeader( "Authorization" );
   if( string.startsWith( $h, "Basic " ) ) {
      $enc = string.skip( $h, 6 );
      $userpasswd = string.base64decode( $enc );
      log.info( "User used: ".$userpasswd );
   }
PARAMETERS: string

TITLE: sys.time.seconds
SEEALSO: sys.time, sys.time.minutes, sys.time.hour, sys.time.weekday, sys.time.monthday, sys.time.yearday, sys.time.month, sys.time.year, sys.localtime.format
DESCRIPTION: Returns the seconds after the
minute in local time. Normally, it returns a number in the
range of (0-59), but can be up to 61 to allow for leap
seconds.
If optional parameter 'unixtime' is supplied, then this
specifies the time since midnight 1/1/1970 otherwise the
current time will be used.
SAMPLE: $secs = sys.time.seconds();
PARAMETERS: unixtime

TITLE: string.hexToInt
SEEALSO: string.intToHex
DESCRIPTION: Converts a hexadecimal number to an integer. Returns the first valid
hexadecimal value found in the string, or 0. A prefix of "0x" is accepted,
but not required. Negative numbers are also valid.
SAMPLE: # Returns 10.
   $int = string.hexToInt( "0000a" );
PARAMETERS: string

TITLE: string.regexsub
SEEALSO: string.regexmatch
DESCRIPTION: Returns a new string containing the results of a regular expression
match on the supplied string, replacing each matching substring with
the supplied replacement. The replacement string may contain
$1 .. $9 substitutions, which reference bracketed
sub-expressions in the regular expression.
Note that the '\' character is an escape character in TrafficScript
strings enclosed with double quotation marks. If you need to put a
literal '\' in a regular expression, you must escape it as '\\'
or enclose the string in single quotation marks.
To match a literal string inside a regular expression use the
string.regexEscape function.
The optional 'flags' parameter contains a string of
single-letter options. The following options are supported:
'g', meaning 'global replace' - apply the regex pattern
as many times as possible.
'i', meaning 'case insensitive' - letters in the pattern
match both upper and lower case letters.
string.regexsub() returns the string with the replacements.
SAMPLE: # Rewrite incoming URL
   $url = string.regexsub($url, "^/(.*)/secure",
                          "/$1/private");
# Remove cookieless session from URL
   # e.g. "/(sessionid)/app/index" => "/app/index"
   $url = string.regexsub( $url, '/\(\S+\)/', "/" );
PARAMETERS: string, regex, replacement, [flags]

TITLE: array.shift
SEEALSO: array.unshift, array.push, array.pop
DESCRIPTION: Removes the first element of the supplied array
and returns it as the result of the function.
SAMPLE: $array = [ 1, 2, 3, 4 ];
   # Empty an array from the front while printing
   # its contents
   while( array.length( $array ) > 0 ) {
      log.info( array.shift( $array ) );
   }
PARAMETERS: array

TITLE: json.deserialize
SEEALSO: json.serialize
DESCRIPTION: Converts the supplied string in JavaScript Object
Notation (JSON) into a TrafficScript array or hash
variable.
If the supplied string is not in the correct format
then a warning will be printed and the result will
be empty.
SAMPLE: # Deserialising a JSON array
   $json_array = '[ "element 1", "element 2" ]';
   $array = json.deserialize( $json_array );
# Deserialising a JSON hash
   $json_object = '{ "key 1":"value 1", \
                     "key 2":[ "array element" ] }';
   $hash = json.deserialize( $json_object );
PARAMETERS: json_string

TITLE: math.ln
SEEALSO: math.log, math.exp
DESCRIPTION: Returns the natural logarithm of its parameter.
SAMPLE: $ln = math.ln( 2.71828 ); # returns 1 (approximately)
PARAMETERS: value

TITLE: string.bytesToDotted
SEEALSO: string.dottedToBytes, string.bytesToInt
DESCRIPTION: Converts a network ordered byte string into an IP address.
SAMPLE: # The first 4 bytes are the IP address
   $ipstr = string.substring( $msg, 0, 3 );
   log.info( "IP is ".string.bytesToDotted( $ipstr ) );
PARAMETERS: string

TITLE: lang.min
SEEALSO: lang.max
DESCRIPTION: Returns the minimum value of the two parameters
provided. If both parameters are strings, it uses a string
comparison; otherwise, the parameters are promoted to
integers or doubles and compared.  min() may be used as a
shorthand for lang.min().
SAMPLE: $r = lang.min( 9, 10 ); # returns 9
   $s = lang.min( "9", "10" ); # returns "10"
   $r = lang.min( 2, "4.8" ); # returns 2
PARAMETERS: param1, param2

TITLE: string.reverse
DESCRIPTION: Returns the characters of a string in reverse order.
SAMPLE: $c = string.reverse( "esrever" ); # Returns "reverse"
PARAMETERS: string

TITLE: string.urlencode
SEEALSO: string.unescape, string.htmlencode
DESCRIPTION: Returns the URL-encoded version of the supplied string to make it safe for
including in URLs. It converts anything other than A-Z a-z 0-9 . - _
to percent+hex form. It encodes reserved characters (RFC 3986) and % as well.
string.urlencodeexceptreserved() should be used instead to exclude those.
SAMPLE: #$url will be 
   # %2Fcheck%20price%3Famount%3D12%26currency%3D%24
   $url = string.urlencode(
                "/check price?amount=12&currency=$");
PARAMETERS: string

TITLE: math.asin
SEEALSO: math.sin
DESCRIPTION: Calculates the arc sine of x and returns an
angle in radians in the range -pi/2 to pi/2.
SAMPLE: $asin = math.asin( 0 ); # returns 0 (approx.)
PARAMETERS: x

TITLE: lang.max
SEEALSO: lang.min
DESCRIPTION: Returns the maximum value of the two parameters
provided. If both parameters are strings, it uses a string
comparison; otherwise, the parameters are promoted to
integers or doubles and compared.  max() may be used as a shorthand
for lang.max().
SAMPLE: $r = lang.max( 9, 10 ); # returns 10
   $s = lang.max( "9", "10" ); # returns "9"
   $r = lang.max( 2, "4.8" ); # returns 4.8
PARAMETERS: param1, param2

TITLE: sys.time
SEEALSO: sys.timeToString, sys.localtime.format, sys.gmtime.format, sys.time.highres
DESCRIPTION: Returns the current system time as the number of
seconds since midnight, 1/1/1970.
SAMPLE: $unixtime = sys.time();

TITLE: string.cmp
SEEALSO: string.icmp
DESCRIPTION: Compares its two parameters as strings in a
case-sensitive manner. It returns a negative value if str1
is less than str2; zero if they are equal, and a positive
value if str1 is greater than str2.
SAMPLE: if( string.cmp( $a, "HTTP/1.0" ) == 0 ) {
      # $a is "HTTP/1.0"
   }
if( string.cmp( $a, $b ) < 0 ) {
      # $a is less than $b
   }
PARAMETERS: str1, str2

TITLE: string.hexdecode
SEEALSO: string.hexencode, string.base64decode, string.unescape
DESCRIPTION: Returns the hex-decoded version of the provided string. This interprets
each character pair as a 2-digit hex value, replacing it with the
corresponding 8-bit character. It does not verify that the original
string was correctly encoded.
SAMPLE: # returns "hello"
   $s = string.hexdecode("68656C6C6F");
PARAMETERS: encoded string

TITLE: string.substring
DESCRIPTION: Returns the substring starting at
character position 'base' and ending at position 'end'.
Note that character positions start at 0, and the end
position is inclusive.
SAMPLE: # Set $s to "is is a"
   $s = string.substring( "This is a string", 2, 8 );
PARAMETERS: string, base, end

TITLE: array.reverse
SEEALSO: array.sort
DESCRIPTION: Reverses the elements of the supplied array.
The return value of this function can be used as the argument to another
function to perform multiple operations on the same array.
SAMPLE: $array = [ 1, 2, 3, [ 4, 5 ] ];
# array will be [ [ 4, 5 ], 3, 2, 1 ]
   array.reverse( $array );
PARAMETERS: array

TITLE: string.length
SEEALSO: string.len
DESCRIPTION: This function is an alias for string.len.
SAMPLE: $len = string.length( "Hello world!" ); # returns 12
PARAMETERS: string

TITLE: string.drop
SEEALSO: string.skip, string.trim
DESCRIPTION: Returns all but the last 'count' characters from the end of the provided
string. An empty string will be returned if 'count' is greater than the
length of the original string.
SAMPLE: # returns "www.example"
   $s = string.drop( "www.example.com", 4 );
PARAMETERS: string, count

TITLE: math.floor
SEEALSO: math.ceil, math.rint, math.fabs
DESCRIPTION: Returns the largest integer not greater than its parameter.
SAMPLE: $r = math.floor( 4.001 ); # returns 4
   $r = math.floor( 17 ); # returns 17
PARAMETERS: value

TITLE: string.hashSHA384
SEEALSO: string.hexencode, string.hashMD5, string.hashSHA1, string.hashSHA256, string.hashSHA512
DESCRIPTION: Returns the SHA-384 hash of the provided
string. The returned string will be 48 bytes long, and may
contain non-printable characters.
SAMPLE: $hash = string.hashSHA384( $data );
PARAMETERS: string

TITLE: math.acos
SEEALSO: math.cos
DESCRIPTION: Calculates the arc cosine of x and returns an angle in radians in the
range 0 to pi.
SAMPLE: $acos = math.acos( 0 ); # returns pi/2 (approx.)
PARAMETERS: x

TITLE: array.append
SEEALSO: array.push
DESCRIPTION: Appends each element of array2 to the end of array1.
Note that this behaviour is different to that of
array.push(), which would add one new element to the end
of array1 containing array2.
The return value of this function can be used as the argument to another
function to perform multiple operations on the same array.
SAMPLE: # Append 4, 5 and 6 to the array
   $numbers = [ 1, 2, 3 ];
   array.append( $numbers, [ 4, 5, 6 ] );
# $numbers is now [ 1, 2, 3, 4, 5, 6 ]
PARAMETERS: array1, array2

TITLE: string.wildmatch
SEEALSO: string.regexmatch
DESCRIPTION: Performs a shell-like wild match on the
supplied string. The pattern may contain the wildcard
characters '?' (which matches a single character) and '*'
(which matches any substring).
It returns 1 if matched, and 0 otherwise.
SAMPLE: $url = http.getPath();
   if( string.wildmatch( $url, "*.cgi" ) ) {
      # Is a request for a CGI script ...
   }
PARAMETERS: string, pattern

TITLE: hash.keys
SEEALSO: hash.values
DESCRIPTION: Returns an array containing the keys that map to values
in the supplied hash data structure.
SAMPLE: # Get the set of IPs that have connected to the site
   $ips = data.get( "connected_ips" );
   $ips[request.getRemoteIP()] = 1;
   data.set( "connected_ips", $ips );
   $connected_set = hash.keys( $ips );
   log.info( array.length( $connected_set ) .
             " unique IPs have connected to the site" );
PARAMETERS: hash

TITLE: array.pop
SEEALSO: array.unshift, array.push, array.shift
DESCRIPTION: Removes the last element of the supplied array
and returns it as the result of the function.
SAMPLE: $stack = [];
   array.push( $stack, 3 );
   array.push( $stack, 2 );
   array.push( $stack, 1 );
   # $stack is now [ 3, 2, 1 ];
# Prints 1 2 3
   while( array.length( $stack ) > 0 ) {
      log.info( array.pop( $stack ) );
   }
PARAMETERS: array

TITLE: string.replaceBytes
SEEALSO: string.insertBytes
DESCRIPTION: Returns a new string, copied from the original string, with
the appropriate bytes replaced by the replacement string at
the supplied offset. The new string is the same length as
the original string.
If offset = length( string ), or length(
replacement ) == 0, string.replaceBytes returns a copy of
the original string.
SAMPLE: # $r = "hi lo"
   $r = string.replaceBytes( "hello", "i ", 1 );
# $r = "helwo"
   $r = string.replaceBytes( "hello", "world", 3 );
PARAMETERS: string, replacement, offset

TITLE: sys.time.monthday
SEEALSO: sys.time, sys.time.seconds, sys.time.minutes, sys.time.hour, sys.time.weekday, sys.time.yearday, sys.time.month, sys.time.year, sys.localtime.format
DESCRIPTION: Returns the day of the month in local time (1-31).
If optional parameter 'unixtime' is supplied, then this
specifies the time since midnight 1/1/1970 otherwise the
current time will be used.
SAMPLE: $dayofmonth = sys.time.monthday();
PARAMETERS: unixtime

TITLE: string.bytesToInt
SEEALSO: string.intToBytes, string.bytesToDotted, string.BERToInt
DESCRIPTION: Converts a byte string in network order
to an integer. The byte string should be either 1, 2 or 4
bytes long.
SAMPLE: # $msg starts with a 2-bytes length
   $lenstr = string.substring( $msg, 0, 1 );
   $len = string.bytesToInt( $lenstr );
   $msg = string.substring( $msg, 2, 2+$len-1 );
PARAMETERS: string

TITLE: array.splice
SEEALSO: array.filter
DESCRIPTION: Replace elements in the supplied array.
Any elements between offset and length will be removed
from the array and any extra values specified after
the length parameter will be inserted into the array
at that location.
The return value of this function can be used as the argument to another
function to perform multiple operations on the same array.
SAMPLE: $numbers = [ 0, 1, 2, 3, 4, 5 ];
# Starting from element 2, remove one element
   # and insert "a" and "b" into the array
   array.splice( $numbers, 2, 1, "a", "b" );
# $numbers is now [ 0, 1, "a", "b", 3, 4, 5 ]
# Starting at element 0, remove 3 elements
   array.splice( $numbers, 0, 3 );
# $numbers is now [ "b", 3, 4, 5 ]
PARAMETERS: array, offset, length, [values]

TITLE: string.replace
SEEALSO: string.replaceI, string.replaceAll, string.replaceAllI
DESCRIPTION: Returns a new string, copied from the original string, with
the first occurrence of the search string in the supplied string
replaced by the replacement string. This function is case-sensitive.
SAMPLE: # Rewrite incoming URL
   $url = string.replace($url, "/secure", "/private");
PARAMETERS: string, search, replacement

TITLE: math.sin
SEEALSO: math.cos, math.tan
DESCRIPTION: Interprets its parameter as an angle in radians and returns its sine.
SAMPLE: $sin = math.sin( 6.28314 ); # returns 0 (approx.)
PARAMETERS: angle

TITLE: string.find
SEEALSO: string.findI, string.findr, string.contains
DESCRIPTION: Reports whether the provided search string
(the needle) is contained inside the given string (the
haystack). An optional parameter can specify the start position
for the search.
It returns the location of the first instance of the search
string; note that character positions start at 0.
If it could not find the search string, it returns -1.
SAMPLE: $r = string.find( "This is it!", "is" ); # Returns 2
PARAMETERS: haystack, needle, [start]

TITLE: array.create
SEEALSO: array.resize, array.copy
DESCRIPTION: Creates a new array of the specified size and optionally
fills the array with the default data.
SAMPLE: # Create an array of length 20 with all the elements
   # set to zero.
   $zeroarray = array.create( 20, 0 );
PARAMETERS: size, [default]

TITLE: string.urlencodeexceptreserved
SEEALSO: string.unescape, string.htmlencode, string.urlencode
DESCRIPTION: Returns the URL-encoded version of the supplied string to make it safe for
including in URLs. It converts characters except
- unreserved characters A-Z a-z 0-9 . - _
- reserved characters /  ?  #  [  ]  @  !  $  &  '  (  )
- %
according to RFC 3986
to percent+hex form.
SAMPLE: # $url will be 
   # "/check%20price?amount=12&currency=$" 
   # where space ' ' gets encoded to %20 
   # and leaving /, ?, = and $ as they were. 
   $url = string.urlencodeexceptreserved(
              "/check price?amount=12&currency=$");
PARAMETERS: string

TITLE: sys.time.month
SEEALSO: sys.time, sys.time.seconds, sys.time.minutes, sys.time.hour, sys.time.weekday, sys.time.monthday, sys.time.yearday, sys.time.year, sys.localtime.format
DESCRIPTION: Returns the month of the year in local time (1-12).
If optional parameter 'unixtime' is supplied, then this
specifies the time since midnight 1/1/1970 otherwise the
current time will be used.
SAMPLE: # Find out what the month is tomorrow.
   $month = sys.time.month( sys.time() + 86400);

TITLE: string.lowercase
SEEALSO: string.uppercase
DESCRIPTION: Returns a new string containing all characters in the
provided string converted to lowercase. The provided
string is not modified.
SAMPLE: $s = string.lowercase("AbCdEfG"); # Returns "abcdefg"
PARAMETERS: string

TITLE: string.htmlencode
SEEALSO: string.htmldecode, string.urlencode
DESCRIPTION: Returns the encoded version of the supplied string to make it safe for
including in HTML. It converts '&lt;' to &amp;lt;, '&gt;' to &amp;gt;, '&quot;' to
&amp;quot; and '&amp;' to &amp;amp;. Control characters are hex-encoded.
SAMPLE: $html = string.htmlencode( $parameter );
PARAMETERS: string

TITLE: string.intToBytes
SEEALSO: string.bytesToInt, string.bytesToDotted, string.intToBER
DESCRIPTION: Converts an integer to a network order
byte string of the specified width. Only widths of 1, 2 and
4 are permitted, and the width defaults to 4 if it is not
supplied.
SAMPLE: # Prepend $msg with its length, as a 4-byte int
   string.insertBytes( $msg,
      string.intToBytes( string.len( $msg ) ),
      0 );
PARAMETERS: number, [width]

TITLE: sys.time.year
SEEALSO: sys.time, sys.time.seconds, sys.time.minutes, sys.time.hour, sys.time.weekday, sys.time.monthday, sys.time.yearday, sys.time.month, sys.localtime.format
DESCRIPTION: Returns the year in local time (1970-2038).
If optional parameter 'unixtime' is supplied, then this
specifies the time since midnight 1/1/1970 otherwise the
current time will be used.
SAMPLE: $year = sys.time.year();
PARAMETERS: unixtime

TITLE: hash.empty
SEEALSO: hash.keys
DESCRIPTION: Removes all the values from the hash.
The return value of this function can be used as the argument to another
function to perform multiple operations on the same hash.
SAMPLE: # Empty the contents of a hypothetical set object
   sub set.empty( $set ) {
      # You cannot do '$set = [];' here because that
      # would be reassigning the input variable
      hash.empty( $set );
   }
set.empty( $my_set );
PARAMETERS: hash

TITLE: array.unshift
SEEALSO: array.shift, array.push, array.pop
DESCRIPTION: Adds the supplied value to the front of the supplied
array.
The return value of this function can be used as the argument to another
function to perform multiple operations on the same array.
SAMPLE: # Prepend 1 to the array
   $numbers = [ 2, 3, 4 ];
   array.unshift( $numbers, 1 );
PARAMETERS: array, value

TITLE: sys.time.weekday
SEEALSO: sys.time, sys.time.seconds, sys.time.minutes, sys.time.hour, sys.time.monthday, sys.time.yearday, sys.time.month, sys.time.year, sys.localtime.format
DESCRIPTION: Returns the day of the week in
local time (1-7). Sunday has the value 1; Saturday has the
value 7.
If optional parameter 'unixtime' is supplied, then this
specifies the time since midnight 1/1/1970 otherwise the
current time will be used.
SAMPLE: $dayofweek = sys.time.weekday();
PARAMETERS: unixtime

TITLE: array.length
DESCRIPTION: Returns the length of the supplied array
SAMPLE: # See how many HTTP headers there are
   $headers = http.listHeaderNames();
   log.info( "There are "
             . array.length( $headers )
             . " headers in this request" );
PARAMETERS: array

TITLE: string.replaceAll
SEEALSO: string.replaceAllI, string.replace, string.replaceI
DESCRIPTION: Returns a new string, copied from the original string, with
all occurrences of the search string in the supplied string
replaced by the replacement string. This function is case-sensitive.
SAMPLE: # Rewrite incoming URL
   $url = string.replaceAll($url, "/in", "/out");
PARAMETERS: string, search, replacement

TITLE: string.replaceAllI
SEEALSO: string.replaceAll, string.replaceI, string.replace
DESCRIPTION: Returns a new string, copied from the original string, with
all occurrences of the search string in the supplied string
replaced by the replacement string. This function is case-insensitive.
SAMPLE: # Rewrite incoming URL
   $url = string.replaceAllI($url, "/in", "/out");
PARAMETERS: string, search, replacement

TITLE: hash.count
DESCRIPTION: Returns the number of items in the hash.
SAMPLE: # See how many HTTP headers there are
   $headers = http.getHeaders();
   log.info( "There are "
             . hash.count( $headers )
             . " headers in this request" );
PARAMETERS: hash

TITLE: lang.dump
DESCRIPTION: Converts the supplied variable into a human-readable string.
This function is useful for printing the contents of
arrays and hashes when debugging TrafficScript rules.
SAMPLE: # Print the headers of the current HTTP request
   log.info( lang.dump( http.getHeaders() ) );
PARAMETERS: variable

TITLE: sys.timeToString
SEEALSO: sys.time
DESCRIPTION: Takes the time in seconds since midnight,
1/1/1970 and if the optional unixtime parameter is provided,
returns a formatted string representing that time. If the unixtime
parameter is not given, it returns the current time as a formatted
string.
SAMPLE: # Returns "[01/Feb/2004:12:24:51 +2000]"
   $tm = sys.timeToString( sys.time() );
PARAMETERS: unixtime

TITLE: string.ipmaskmatch
SEEALSO: string.validIPAddress
DESCRIPTION: Returns 1 if the provided IP address is
contained in the CIDR IP Subnet, and 0 otherwise.
It interprets its first parameter as a string containing an
IP address, and its second parameter as an CIDR IP subnet.
CIDR IP subnets can be of the form "10.0.1.0/24",
"10.0.1.0/255.255.255.0", "10.0.1." or "10.0.1.1". 
For IPv6, the standard notation of "2001:200:0:8002::/64" is
supported.
SAMPLE: if( string.ipmaskmatch( $ip, "10.0.0.0/8" ) ) {
      # IP is in the 10.*.*.* subnet ...
   }
PARAMETERS: IP Address, CIDR IP Subnet

TITLE: string.uppercase
SEEALSO: string.lowercase
DESCRIPTION: Returns a new string containing all characters in the
provided string converted to uppercase. The provided
string is not modified.
SAMPLE: $s = string.uppercase("aBcDeFg"); # Returns "ABCDEFG"
PARAMETERS: string

TITLE: string.escape
SEEALSO: string.unescape, string.hexencode, string.regexescape, string.urlencode
DESCRIPTION: Returns a percent-encoded version of its parameter.
Control characters and spaces (character value &lt;= 32) and
'%' characters are each replaced by a '%' symbol, followed
by their 2-digit hex value.
SAMPLE: # returns "Hello%20World!%0D%0A"
   $s = string.escape( "Hello World!\r\n" );
PARAMETERS: string

TITLE: string.trim
SEEALSO: string.skip, string.drop
DESCRIPTION: Returns the result of removing leading and
trailing white space (and control characters) from its input
SAMPLE: $s = string.trim( " 1234 " ); # returns "1234"
PARAMETERS: string

TITLE: sys.getnetworkinterfaces
DESCRIPTION: Returns a list of network interfaces on the system, with
a hash of the following for each one:
Bcast, pppdest, IfName, netmask, MacAddr, IP, up 
The following options can be supplied in a hash in order to
alter the output:
"include_lo" => [0|1]   This option controls whether the list
returned should include loopback addresses.  (Default: 1)
"up" => [0|1]   If 1, only return interfaces marked as UP.
If 0, ignore the UP status. (Default: 0)
SAMPLE: $info = sys.getnetworkinterfaces( ["include_lo" => 0,
                                    "up" => 1 ] );
  if($info)
  {
     foreach( $ipinfo in $info )  {
        $ip = $ipinfo["IP"];
        $name = $ipinfo["IfName"];
        $mac =  $ipinfo["MacAddr"];
        log.info("---------------------"
               . "\n interface = " . $name
               . "\n IP = " . $ip
               . "\n MAC = " . $mac
              );
     }
  }else {
     log.info("No network interfaces returned");
  }
PARAMETERS: hash_of_options

TITLE: string.hashSHA256
SEEALSO: string.hexencode, string.hashMD5, string.hashSHA1, string.hashSHA384, string.hashSHA512
DESCRIPTION: Returns the SHA-256 hash of the provided
string. The returned string will be 32 bytes long, and may
contain non-printable characters.
SAMPLE: $hash = string.hashSHA256( $data );
PARAMETERS: string

TITLE: lang.ord
SEEALSO: lang.toString, lang.chr
DESCRIPTION: Converts an ascii character to an integer. ord() may be used as a
shorthand alias for lang.ord().
SAMPLE: # Get the integer value of a character.
   $val = lang.ord( "A" );
PARAMETERS: string

TITLE: math.random
SEEALSO: string.randomBytes
DESCRIPTION: Returns a pseudorandom integer greater than or
equal to zero, and less than its parameter.
This function uses a quick pseudo-random number 
generator meaning that the output of this function
is not suitable for cryptographic purposes.
SAMPLE: # returns a value in the range 0 to 99
   $rand = math.random( 100 );
PARAMETERS: range

TITLE: string.intToBER
SEEALSO: string.BERToInt, string.intToBytes
DESCRIPTION: Converts an integer into a BER compressed
integer (which is a variable-length binary string encoding).
SAMPLE: # $r = "\201\110"
   $r = string.intToBER( 200 );
PARAMETERS: number

TITLE: sys.domainname
SEEALSO: sys.hostname
DESCRIPTION: Returns the domain name of the host machine. For example, if the machine
is named "server1.example.com", sys.domainname() will return
"example.com".
SAMPLE: $domainname = sys.domainname();

TITLE: string.findr
SEEALSO: string.find, string.contains
DESCRIPTION: Searches backwards from the end of a string, determining
whether the provided search string (the needle) is contained
inside the given string (the haystack). An optional parameter
can specify the start position for the search, measured from
the end of the string (so setting it to 1 skips the last
character in the string).
It returns the location of the last instance of the search
string; note that character positions start at 0.
If it could not find the search string, it returns -1.
SAMPLE: # Returns 8 (the 'i' in it)
   $r = string.findr( "This is it!", "i" );
# Returns 5 (the 'i' in is)
   $r = string.findr( "This is it!", "i", 3 );
PARAMETERS: haystack, needle, [distanceFromEndToStart]

TITLE: string.endsWithI
SEEALSO: string.endsWith, string.startsWithI, string.containsI
DESCRIPTION: Returns 1 if the provided string ends with the given suffix, and 0
otherwise. It is case-insensitive.
SAMPLE: if( string.endsWithI( $path, "victory") ) {
      # The path ends with victory
   }
PARAMETERS: string, suffix

TITLE: string.containsI
SEEALSO: string.contains, string.findI, string.startsWithI, string.endsWithI
DESCRIPTION: Searches for the provided string (the needle) in the given source
(the haystack). It is case-insensitive.
It returns 1 if the 'needle' was found, or 0 otherwise.
SAMPLE: if( string.containsI( $path, "danger" ) ) {
      # The path contains danger ...
   }
PARAMETERS: haystack, needle

TITLE: string.sprintf
SEEALSO: string.append
DESCRIPTION: Behaves like the C library sprintf() function.
Only %s, %c, %d and %f are supported. The function returns the
generated string.
SAMPLE: $text = string.sprintf(
      "Apples: %3d Oranges: %3d\n",
      $apples, $oranges );
PARAMETERS: format string, arguments

TITLE: math.sqrt
SEEALSO: math.pow
DESCRIPTION: Returns the square root of its parameter.
SAMPLE: $root = math.sqrt( 2 ); # returns 1.414 (approx.)
if( lang.toString( math.sqrt( $num ) ) == "nan" ) {
      # $num is negative or NaN ...
   }
PARAMETERS: num

TITLE: array.contains
SEEALSO: array.filter
DESCRIPTION: Returns whether or not the supplied array contains the
specified value as an element. Note that it will not match
elements inside sub-arrays.
SAMPLE: $array = [ "one", "two", [ "three", "four" ] ];
# true
   array.contains( $array, "one" );
# false
   array.contains( $array, "three" );
PARAMETERS: array, value

TITLE: lang.toHash
SEEALSO: lang.toDouble, lang.toString, lang.toInt, lang.toArray
DESCRIPTION: Returns an hash of the supplied key value pairs.
SAMPLE: $hash = lang.toHash( "ten", 10, "eleven", 11 );
PARAMETERS: values

TITLE: lang.toString
SEEALSO: lang.toInt, lang.toDouble, lang.chr, lang.ord
DESCRIPTION: Returns the string value of its parameter,
using the TrafficScript type-casting rules.
SAMPLE: $s = lang.toString( 10 ); # returns "10"
   $s = lang.toString( 3.14157 ); # returns "3.14157"
   $s = lang.toString( "10" ); # returns "10"
PARAMETERS: value

TITLE: string.icmp
SEEALSO: string.cmp
DESCRIPTION: Compares its two parameters as strings in a
case-insensitive manner. It returns a negative value if str1
is less than str2; zero if they are equal, and a positive
value if str1 is greater than str2.
SAMPLE: if( string.icmp( $a, "Content-Length" ) == 0 ) {
      # $a is "Content-Length"
   }
PARAMETERS: str1, str2

TITLE: string.unescape
SEEALSO: string.escape, string.hexdecode
DESCRIPTION: Returns the escape-decoded version of its parameter.
%-encoded characters are replaced with their decoded versions.
%u-encoded characters are replaced with their UTF-8
representation. If there are illegal digits which cannot safely be
converted, the variable $1 is set to 0 and the result contains '_'
in place of the '%'.  Such malicious %-escaped URLs are a common
way of attacking unassuming servers or applications, and by
handling them in this way, the attack is thwarted, but some
information about a suspicious request is retained.
SAMPLE: # returns "\r\n100%"
   $s = string.unescape("%0D%0A100%25");
   # returns "something_BGelse"
   $s = string.unescape("something%BGelse");
   # returns "file.ida"
   $s = string.unescape("file.%u0069%u0064%u0061");
PARAMETERS: escaped string

TITLE: array.filter
DESCRIPTION: Removes elements from the supplied array that do not match
the pattern.
The optional 'flags' parameter contains a string of
single-letter options. The following options are supported:
'i', meaning 'case insensitive' - letters in the pattern
match both upper and lower case letters.
'!', meaning negate - elements of the array that
match the regular expression are removed.
The return value of this function can be used as the argument to another
function to perform multiple operations on the same array.
SAMPLE: # Get the extension headers for this request
   $headers = http.listHeaderNames();
   $extensions = array.filter( $headers, "^X-", "i" );
PARAMETERS: array, pattern, [flags]

TITLE: lang.toArray
SEEALSO: lang.toDouble, lang.toString, lang.toInt
DESCRIPTION: Returns an array of the supplied values.
SAMPLE: $arr = lang.toArray( "10", "hello" );
PARAMETERS: values

TITLE: lang.chr
SEEALSO: lang.ord
DESCRIPTION: Converts a number to the corresponding ASCII character.
chr() may be used as an alias for lang.chr().
SAMPLE: # Pick a random letter from A - Z
   $char = lang.chr( math.random( 26 ) + 65 );
PARAMETERS: number

TITLE: string.hexencode
SEEALSO: string.hexdecode, string.base64encode, string.escape
DESCRIPTION: Returns the hex-encoded version of the provided string . This converts
each character into a two-character hex representation, doubling the
length of the string.
SAMPLE: # Returns "68656C6C6F"
   $s = string.hexencode( "hello" );
PARAMETERS: string

TITLE: string.hashSHA512
SEEALSO: string.hexencode, string.hashMD5, string.hashSHA1, string.hashSHA256, string.hashSHA384
DESCRIPTION: Returns the SHA-512 hash of the provided
string. The returned string will be 64 bytes long, and may
contain non-printable characters.
SAMPLE: $hash = string.hashSHA512( $data );
PARAMETERS: string

TITLE: hash.values
SEEALSO: hash.keys
DESCRIPTION: Returns an array containing the values that have
been mapped to in the hash.
SAMPLE: # Add up the values of a hash
   $values = hash.values( $hash );
   $total = 0;
   foreach( $val in $values ) {
      $total += $val;
   }
   log.info( "The total is " . $total );
PARAMETERS: hash

TITLE: sys.time.minutes
SEEALSO: sys.time, sys.time.seconds, sys.time.hour, sys.time.weekday, sys.time.monthday, sys.time.yearday, sys.time.month, sys.time.year, sys.localtime.format
DESCRIPTION: Returns the minutes after the hour in local time (0-59).
If optional parameter 'unixtime' is supplied, then this
specifies the time since midnight 1/1/1970 otherwise the
current time will be used.
SAMPLE: $mins = sys.time.minutes();
PARAMETERS: unixtime

TITLE: math.fabs
SEEALSO: math.floor, math.ceil, math.rint
DESCRIPTION: Interprets its parameter as a floating point number and returns its
absolute value.
SAMPLE: $r = math.fabs( -6.28 ); # returns 6.28
PARAMETERS: value

TITLE: string.startsWithI
SEEALSO: string.startsWith, string.endsWithI, string.containsI
DESCRIPTION: Returns 1 if the provided string starts
with the given prefix, and 0 otherwise. It is case-insensitive.
SAMPLE: if( string.startsWithI( $path, "/tea" ) ) {
      # The path starts with tea ...
   }
PARAMETERS: string, prefix

TITLE: sys.time.hour
SEEALSO: sys.time, sys.time.seconds, sys.time.minutes, sys.time.weekday, sys.time.monthday, sys.time.yearday, sys.time.month, sys.time.year, sys.localtime.format
DESCRIPTION: Returns the hour of the day in local time (0-23).
If optional parameter 'unixtime' is supplied, then this
specifies the time since midnight 1/1/1970 otherwise the
current time will be used.
SAMPLE: $hour = sys.time.hour();
PARAMETERS: unixtime

TITLE: string.endsWith
SEEALSO: string.endsWithI, string.startsWith, string.contains
DESCRIPTION: Returns 1 if the provided string ends with the given suffix, and 0
otherwise.
SAMPLE: if( string.endsWith( $url, ".cgi") ) {
      # Request is for a CGI script ...
   }
PARAMETERS: string, suffix

TITLE: string.right
SEEALSO: string.drop
DESCRIPTION: Returns the last 'count' characters of the
provided string. An empty string will be returned if 'count'
is less than or equal to zero.
SAMPLE: # returns "sh"
   $s = string.right( "#!/bin/sh", 2 );
PARAMETERS: string, count

TITLE: string.extractPort
SEEALSO: string.extractHost
DESCRIPTION: Returns the port part of the supplied address if both the host and port
of the supplied address are valid.  Otherwise the empty string is
returned.
SAMPLE: # Get the SIP request's next destination
   $next = sip.getRequestHeader( "Route" );
   string.regexmatch( $next, "^<sip:(.*?)>" );
   $next = $1;
   # Get the port number of the destination
   if( $port = string.extractPort( $next ) ) {
      if( $port < 1024 ) {
         # Don't forward the message
         sip.sendResponse( "403", "Forbidden" );
      }
   }
PARAMETERS: string

TITLE: string.htmldecode
SEEALSO: string.htmlencode
DESCRIPTION: Returned the HTML-decoded version of a string, converting symbols
such as &amp;lt; and &amp;quot;
SAMPLE: $body = string.htmldecode( http.getBody( 0 ) );
PARAMETERS: encodedstring

TITLE: sys.time.yearday
SEEALSO: sys.time, sys.time.seconds, sys.time.minutes, sys.time.hour, sys.time.weekday, sys.time.monthday, sys.time.month, sys.time.year, sys.localtime.format
DESCRIPTION: Returns the day of the year in local time (1-366).
If optional parameter 'unixtime' is supplied, then this
specifies the time since midnight 1/1/1970 otherwise the
current time will be used.
SAMPLE: $dayofyear = sys.time.yearday();
PARAMETERS: unixtime

TITLE: math.rint
SEEALSO: math.floor, math.ceil, math.fabs
DESCRIPTION: Rounds its parameter by returning the integer closest to its value.
SAMPLE: $r = math.rint( 4.25 ); # returns 4
   $r = math.rint( 4.75 ); # returns 5
PARAMETERS: value

TITLE: string.insertBytes
SEEALSO: string.replaceBytes
DESCRIPTION: Returns a new string with the supplied string inserted into
the original string at the offset specified. If offset &lt;
0, or offset &gt; length( string ), the original string is
returned unchanged. If offset == 0 the insertion string
is prepended; if offset == length( string ) the insertion
string is appended.
SAMPLE: # $r = "he was Othello"
   $r = string.insertbytes( "hello", " was Othe", 2 );
# $r = "hello world"
   $r = string.insertbytes( "hello", " world", 5 );
# $r = "I say hello"
   $r = string.insertbytes( "hello", "I say ", 0 );
PARAMETERS: string, insertion, offset

TITLE: string.findI
SEEALSO: string.find, string.containsI
DESCRIPTION: Reports whether the provided search string
(the needle) is contained inside the given string (the
haystack). An optional parameter can specify the start position
for the search. It is case-insensitive.
It returns the location of the first instance of the search
string; note that character positions start at 0.
If it could not find the search string, it returns -1.
SAMPLE: # Returns 0
   $r = string.findI( "The way of the warrior", "the" );
PARAMETERS: haystack, needle, [start]

TITLE: sys.localtime.format
SEEALSO: sys.time, sys.time.seconds, sys.time.minutes, sys.time.hour, sys.time.weekday, sys.time.monthday, sys.time.month, sys.time.year, sys.time.yearday, sys.gmtime.format
DESCRIPTION: Converts the time into a string format.
This function converts using localtime - see sys.gmtime.format()
to convert using GMT.
FormatMeaningFormatMeaning
%aMon Tue Wed ...%AMonday Tuesday ...
%bJan Feb Mar ...%BJanuary February ...
%dDay of month "01"-"31"%D%m/%d/%y
%eDay of month " 1"-"31"%HHour of day "00-23"
%hEquivalent to %b%IHour of day "01" - "12"
%jJulian day of the year "001" to "366"%mMonth of year "01" - "12"
%MMinute "00" - "59"%nNewline character
%pAM/PM%rTime in %I:%M:%S [AM|PM]
%R%H:%M%SSeconds, output as a number between "00" and "61"
%tTab character%T%H:%M:%S
%uDay of week (1 = Monday, 7 = Sunday)%wDay of week (0 = Sunday, 6 = Saturday)
%yYear (without century) "00" to "99"%YYear "0000"  to "9999"
%ZTime zone (from $TZ)%%"%"
If supplied, the optional 'unixtime' parameter specifies the number of
seconds since midnight 1/1/1970, and the function returns a formatted
string representing that time.  If the 'unixtime' value is not provided,
the current time will be returned.
SAMPLE: # Return a formatted string
   # e.g. Mon, 14 Aug 2006 12:39:01 EST
   $str = sys.localtime.format( "%a, %d %b %Y %T EST" );
PARAMETERS: format, unixtime

TITLE: string.BERToInt
SEEALSO: string.intToBER, string.bytesToInt
DESCRIPTION: Converts a BER compressed integer into an integer.
SAMPLE: # $r = 200
   $r = string.BERToInt( "\201\110" );
PARAMETERS: string

TITLE: string.split
SEEALSO: array.join
DESCRIPTION: Returns an array containing the substrings of the supplied
string that are delimited by the separator.
The separator defaults to a space character, so applying this
method to a string without supplying the separator character
will return an array containing all the individual words
in the string. Using the empty string as the separator will
return an array with each character as a separate element.
SAMPLE: $words = string.split( http.getResponseBody() );
   log.info( "There were " . array.length( $words )
             . " words in the response" );
PARAMETERS: string, [separator]

TITLE: string.Ireplace
REPLACEDBY: string.replaceI
DESCRIPTION: Returns a new string, copied from the original string, with
the first occurrence of the search string in the supplied string
replaced by the replacement string. This function is case-insensitive.
SAMPLE: # Rewrite incoming URL
   $url = string.ireplace($url, "/secure", "/private");
PARAMETERS: string, search, replacement

TITLE: string.len
DESCRIPTION: Interprets its parameter as a string and
returns its length (in bytes).
SAMPLE: $len = string.len( "Hello world!" ); # returns 12
PARAMETERS: string

TITLE: sys.getenv
DESCRIPTION: Returns the named environment variable, or the
empty string if the environment variable does not exists.
SAMPLE: $zeushome = sys.getenv( "ZEUSHOME" );
PARAMETERS: variable

TITLE: string.count
SEEALSO: string.find, string.contains
DESCRIPTION: Searches from the start of a string, counting the
number of times that the provided search string (the needle) is
found inside the given string (the haystack). An optional parameter
can specify the start position for the search.
It returns the number of times that the string is found.
SAMPLE: # Returns 2
   $r = string.count( "This is it!", "is" );
# Returns 1, no overlaps allowed
   $s = string.count( "ooo", "oo" );
PARAMETERS: haystack, needle, [start]

TITLE: string.left
SEEALSO: string.skip
DESCRIPTION: Returns the first 'count' characters of the
provided string. An empty string will be returned if 'count'
is less than or equal to zero.
SAMPLE: # returns "#!"
   $s = string.left( "#!/bin/sh", 2 );
PARAMETERS: string, count

TITLE: array.copy
SEEALSO: array.create
DESCRIPTION: Returns a copy of the supplied array.
This is semantically equivalent to `$arraycopy = $array`,
however it will warn if the variable passed to it is not
an array.
SAMPLE: # Loop around a sorted version of an array without
   # permanently sorting it
   $arr = [ "London", "Berlin", "Lisbon", "Paris" ];
   foreach( $val in array.sort( array.copy( $arr ) )) {
      log.info( $val );
   }
# $arr will be unsorted here
PARAMETERS: array

TITLE: geo.getDistanceMiles
DESCRIPTION: Returns the distance in miles between two points on the earth's surface
(identified by latitude and longitude), or -1 on error.
SAMPLE: # Get the miles between two lat-long points
   $d = geo.getDistanceMiles( "52.2338", "0.1529",
                              "37.4062", "-121.9765" );
PARAMETERS: lat1, lon1, lat2, lon2

TITLE: response.getLine
SEEALSO: response.get, request.getLine
DESCRIPTION: Returns a line of response data provided by
the server. The line is terminated by the supplied regular
expression, or by '\n'. If 'offset' is provided,
response.getLine() returns the data from that offset to
the terminating expression.
When response.getLine() returns, the variable $1 is updated
to point to the start of the next line in the datastream.
You can iterate through the lines of response data by using $1
as the iterator variable.
SAMPLE: # Process the lines in the response until an empty
    # line is found
    $line = response.getLine( "\n" );
    while( $line != "\n" ) {
       # process $line...
       $line = response.getLine( "\n", $1 );
    }
PARAMETERS: [regex], [offset]

TITLE: request.getLogEnabled
REPLACEDBY: requestlog.markedForInclusion
SEEALSO: request.setLogEnabled
DESCRIPTION: Returns 1 if logging is enabled for this request, and 0 otherwise.
SAMPLE: if( request.getLogEnabled() ) {
     http.addResponseHeader( "X-Logged", "Yes" );
  }

TITLE: data.getMemoryUsage
SEEALSO: data.set, data.reset, data.getMemoryFree
DESCRIPTION: Returns an estimate of the amount of
memory, in bytes, used by entries that have been stored by
data.set().
This can be used to verify if a rule is storing excessive
amounts of data, starving the host machine of memory.
SAMPLE: $bytes = data.getMemoryUsage();

TITLE: connection.setIdempotent
REPLACEDBY: request.setIdempotent
SEEALSO: http.setIdempotent
DESCRIPTION: Marks a request as resendable or non-resendable.
An idempotent request has no detrimental side
effects, so it can safely be attempted multiple times. A
non-idempotent request has a side effect - for example, it
may update a database, or initiate a purchase.
By default, all non-HTTP requests are marked as idempotent.
If a back-end node fails to generate a correct response when
a request is initially forwarded to it, your traffic manager
will attempt to resend the request to another node.
connection.setIdempotent() can override this behaviour. If
'resend' is zero, this indicates that the request should
only be attempted against one back-end node.
If 'resend' has a non-zero value, this indicates that if a
request is made to a back-end node and a correct response is
not received, your traffic manager should retry the request
against another back-end node.
Note that a request cannot be resent once it has begun
streaming data between the client and the node.
Additionally, UDP connections cannot be marked as resendable
(the UDP client application should handle failed UDP
responses).
SAMPLE: # Mark this request as resendable
   connection.setIdempotent( 1 );
PARAMETERS: resend

TITLE: resource.getLines
DESCRIPTION: Returns the contents of a named file stored
in the ZEUSHOME/zxtm/conf/extra/ directory as an array. If the
file doesn't exist, then an empty array is returned. Note that
subdirectories of conf/extra are not supported.
Resources are pre-loaded into memory, so this call does not cause the
file to be reloaded.
SAMPLE: # Read the contents of the 'info' file and add
   # process them line-by-line
   $info = resource.getLines( "info" );
   foreach( $line in $info ) {
      # ...
   }
PARAMETERS: filename

TITLE: connection.getNode
SEEALSO: connection.getPool, connection.getVirtualServer, request.avoidNode
DESCRIPTION: Returns the name of the back-end node
that this request is connected to. If a back-end node
has not been chosen, which is normally the case in request
rules, it returns the empty string.
SAMPLE: # Which node is used for this connection
   $nodename = connection.getNode();

TITLE: rule.getState
DESCRIPTION: Returns the state of the currently executing rule, either "REQUEST",
"RESPONSE", "COMPLETION" or "GLBRESPONSE".
SAMPLE: $rulestate = rule.getstate();

TITLE: sys.isFIPS
DESCRIPTION: Returns 1 if the traffic manager is operating in FIPS Mode,
otherwise it returns 0.
SAMPLE: if( sys.isFIPS() ) {
      # FIPS Mode is in operation
   }

TITLE: xml.xslt.transform
DESCRIPTION: Performs an XSLT transformation on a
XML document. It returns the transformed document, or -1 on
failure.
The XML processing functionality must be enabled by the
software license.
SAMPLE: # Perform XSLT transformation on supplied POST XML
   # data, and return the HTML result to the client.
   $response = xml.xslt.transform( http.getbody( 0 ),
      resource.get( "people.xsl" ));
   http.sendResponse( "200 OK", "text/html",
      $response, "" );
PARAMETERS: document, stylesheet

TITLE: response.getDSCP
SEEALSO: response.setDSCP, request.getDSCP, request.setDSCP
DESCRIPTION: Returns the Differentiated Service Code Point (DSCP) field from the IP header
of traffic being sent to the client. The return value is a either the DSCP
value, or -1 if it could be not obtained from the socket. The return value
is a 6-bit value.
SAMPLE: if ( response.getDSCP() == 46 ) {
     log.info( "Processing Expedited traffic" );
     connection.setServiceLevelClass( "gold" );
   }

TITLE: response.getLocalPort
SEEALSO: response.getLocalIP, response.getRemotePort, response.getRemoteIP, request.getLocalPort, request.getLocalIP, request.getRemotePort, request.getRemoteIP
DESCRIPTION: Returns the local port of the connection to the
node in use, i.e. the port number on the local machine that
the traffic manager connected from. It returns 0 if there is
no current connection to a node.
SAMPLE: $port = response.getLocalPort();

TITLE: request.getLength
SEEALSO: request.get, response.getLength
DESCRIPTION: Returns the number of bytes of data already
received from the client. This can be combined with
request.get() to reliably read data from a connection
without stalling if no data is available.
SAMPLE: $data = request.get( request.getLength() );

TITLE: connection.setPersistenceNode
SEEALSO: connection.setPersistence
DESCRIPTION: Sets the back-end node to be used by a NamedNode Persistence class.
A Session Persistence class that uses NamedNode Persistence will then
ensure that this node will be used for the request. The node must be
valid and exist in the Pool being used. If no port number is given, or
if the port number is not valid, then if there is a node with a matching
name, it will be used. For example, if the node 'web:80' is specified,
but there is only a 'web:443', then that node will be used instead.
This is to help share session persistence between different services on
the same machine.
This function has no effect if a different type of session persistence
class is ultimately used.
SAMPLE: # Use the node 'web:80' for this request
   connection.setPersistenceNode( "web:80" );
PARAMETERS: value

TITLE: connection.getBandwidthClass
REPLACEDBY: response.getBandwidthClass
SEEALSO: response.getBandwidthClass, request.getBandwidthClass
DESCRIPTION: Returns the current bandwidth class for the connection to the client, or
an empty string if no class is set.
SAMPLE: $class = connection.getBandwidthClass();

TITLE: rule.getName
DESCRIPTION: Returns the name of the currently executing rule.
SAMPLE: $rulename = rule.getname();

TITLE: request.setBandwidthClass
SEEALSO: request.getBandwidthClass, response.setBandwidthClass, response.getBandwidthClass
DESCRIPTION: Sets the bandwidth class
for the current connection to the backend node. Providing an empty
class name removes the bandwidth class from the
connection. It returns zero if an error occurs
(for example, if the bandwidth class does not exist),
and 1 otherwise.
SAMPLE: request.setBandwidthClass( "gold customers" );
PARAMETERS: name

TITLE: geo.getIPDistanceMiles
DESCRIPTION: Returns the distance in miles between the locations of two IPv4
addresses. It will return -1 unless both locations can be found.
SAMPLE: # Get the distance between two IPs in miles
   $d = geo.getIPDistanceMiles( "1.2.3.4", "5.6.7.8" );
PARAMETERS: ip1, ip2

TITLE: slm.isOK
SEEALSO: slm.conforming, slm.threshold
DESCRIPTION: Returns whether a particular Service Level Monitoring class
is meeting its objectives. If no class name is provided,
it will use the SLM class currently associated with this connection;
if no SLM class is associated with the connection, it returns 1.  This
function is a convenience shorthand for 'slm.conforming() >
slm.threshold()'.
SAMPLE: # If the search nodes are under-utilised, use this
  # spare capacity to process web page requests too
  if( slm.isOK( "search-nodes" )) {
    pool.use( "search+web nodes");
  } else {
    pool.use( "web nodes" );
  }
PARAMETERS: [ class_name ]

TITLE: counter64.increment
SEEALSO: counter.increment
DESCRIPTION: Increments the numbered 64 bit counter. These counters are
readable via SNMP, and can be graphed on the Current Activity page on
the Administration Server.
64 bit counters exist in a separate name- and storage space from
the 32 bit counters, i.e. they don't overlap in any way.
By default, the counter is incremented by one, but you can also supply
an amount to increment the counter by. If a negative amount is supplied
the counter is decremented, but please keep in mind that a decrement is
indiscernible from a wrap-around. Also please note that the supplied
increment amount is limited to signed 32 bit range even though the counter
is 64 bit.
SAMPLE: # Increment the first 64 bit user counter by 100
  counter64.increment( 1, 100 );
  # Increment the first 64 bit user counter by 1
  counter64.increment( 1 );
PARAMETERS: counter, [amount]

TITLE: geo.getDistanceKM
DESCRIPTION: Returns the distance in kilometres between two points on the earth's
surface (identified by latitude and longitude), or -1 on error.
SAMPLE: # Get the distance between two lat-long points in km
   $d = geo.getDistanceKM( "52.2338", "0.1529",
                           "37.4062", "-121.9765" );
PARAMETERS: lat1, lon1, lat2, lon2

TITLE: connection.getCompletionReasonInfo
SEEALSO: connection.getCompletionReasonCode
DESCRIPTION: Obtain more detailed information about the reason a particular connection
completed. The information is returned in a hash, with the following keys:
Hash keyDetails
codeThe completion reason code (see connection.getCompletionReasonCode).
messageA detailed message describing the reason code.
iserrorContains 1 if the transaction ended due to an error.
isservererrorContains 1 if the transaction ended due to a server error.
isclienterrorContains 1 if the transaction ended due to a client error.
istimeoutContains 1 if the transaction ended because it exceeding any timeout duration.
isprocessingtimeoutContains 1 if the transaction ended because it exceeded rule or optimization processing timeouts.
SAMPLE: $info = connection.getCompletionReasonInfo();
   if( $info['iserror'] ) {
      log.info( "Transaction error detected. Code: " .
         $info['code'] . " Message: " .
         $info['message']
      );
   }

TITLE: pool.checknode
DESCRIPTION: Query the pool to determine the status of a node.
Will return one of : "NOTINPOOL","NOSUCHPOOL","NOSUCHHOST","DEAD"
"ACTIVE","DISABLED","DRAINING"
SAMPLE: $status = pool.checknode("FTP Server","app1",21);
if($status != "ACTIVE") {
   log.warn("FTP Server app1 unavailable ".$status);
}
PARAMETERS: Pool, Host, Port

TITLE: connection.setServiceLevelClass
SEEALSO: connection.getServiceLevelClass
DESCRIPTION: Sets the service level class
for the current connection. It returns zero if an error occurs
(for example, if the service level class does not exist),
and 1 otherwise
SAMPLE: connection.setServiceLevelClass( "gold" );
PARAMETERS: level

TITLE: request.setMaxTimedOutConnectionAttempts
SEEALSO: request.setMaxConnectionAttempts
DESCRIPTION: Overrides the pool's maximum number of timed-out connection attempts
for this request.
If the connection to the node fails due to max_reply_time being exceeded,
connections to other nodes will be attempted
until the maximum number of attempts is exceeded or the connection
is successful.
A value of 0 means unlimited attempts.
SAMPLE: if( http.getMethod() == "POST" ) {
      request.setMaxTimedOutConnectionAttempts( 2 );
   }
PARAMETERS: int

TITLE: response.close
SEEALSO: connection.close, connection.discard, pool.use, pool.select
DESCRIPTION: Immediately closes the connection to the
back-end node. Any response data that has already
been read from the server will be forwarded to the client,
but no more response data will be read.
Your traffic manager will reconnect to a back-end node when it next needs
to forward request data to it; the back-end node is
specified by either calling pool.use() or pool.select() in a request rule, or
by the default pool.
SAMPLE: if( $neednewnode ) {
      response.close();
      pool.use( "servers" );
   }

TITLE: request.setRemoteIP
SEEALSO: request.getRemoteIP
DESCRIPTION: Sets the remote IP address of the client. This function
should be used with care, as it will alter what is logged in request logs
and the address seen by a back-end node in 'transparent' mode.
0 is returned if the IP address is invalid, and 1 otherwise.
SAMPLE: # Set the remote IP address, such as "10.1.4.21"
   request.setRemoteIP( "10.1.4.21" );
   request.setRemoteIP( "2001:200::3085" );
PARAMETERS: ipAddr

TITLE: xml.validate.xsd
SEEALSO: xml.validate.dtd
DESCRIPTION: Validates an XML document against an XML schema.
It returns 1 if the document validated correctly, and 0 if it did
not. It returns -1 if there was an error parsing the XML document
or the schema.
If the schema against which the document is being validated needs to
import another schema file, it will search for it inside Catalog >
Extra Files > Miscellaneous Files.
The XML processing functionality must be enabled
by the software license.
SAMPLE: # Validate the HTTP body against the schema stored in
   # the resource 'myschema'
   $theDoc = http.getBody( 0 );
   $theSchema = resource.get( "myschema" );
   if( xml.validate.xsd( $theDoc, $theSchema ) != 1 ) {
      # validation failed ...
   }
PARAMETERS: document, schema

TITLE: request.getLocalIP
SEEALSO: request.getLocalPort, request.getDestIP, request.getRemoteIP, request.getRemotePort, response.getLocalIP, response.getLocalPort, response.getRemoteIP, response.getRemotePort
DESCRIPTION: Returns the IP address that the client connected to,
i.e. the address local to this machine.
SAMPLE: # Get the local IP address, such as "10.1.4.21" or
   # "2001:200::8002:203:47ff:fea5:3085"
   $ip = request.getLocalIP();

TITLE: request.getBandwidthClass
SEEALSO: request.setBandwidthClass, response.setBandwidthClass, response.getBandwidthClass
DESCRIPTION: Returns the current bandwidth class for the connection to the backend
node, or an empty string if no class is set.
SAMPLE: $class = request.getBandwidthClass();

TITLE: data.remove
SEEALSO: data.set, data.get, data.reset
DESCRIPTION: Removes the value that was previously associated with
the given key using data.set().
data.remove() returns 1 if the item did exist, or 0 if it was not found.
SAMPLE: data.set( "cache-$url", $obj );
# In another rule or connection...
   data.remove( "cache-$url" );
PARAMETERS: key

TITLE: net.dns.resolveIP
SEEALSO: net.dns.resolveHost, net.dns.resolveHost6
DESCRIPTION: Resolves an IP address to a hostname,
using the DNS name servers configured on the local system.
Returns a hostname, or the IP address if the address
cannot be resolved. An empty string is returned if the
parameter is not a valid IP address.
SAMPLE: $rip = request.getRemoteIP();
   $rhost = net.dns.resolveIP( $rip );
   log.info( "Request from ".$rhost );
PARAMETERS: IP address

TITLE: response.getToS
REPLACEDBY: response.getDSCP
SEEALSO: request.getToS, response.setToS
DESCRIPTION: NOTE: RFC 2474 has superceded IP ToS values with the DSCP field.
Returns the Type of Service (ToS) of traffic going to the client. The
return value is either "LOWDELAY", "THROUGHPUT", "RELIABILITY" or "NONE".
SAMPLE: if( response.getToS() == "LOWDELAY" ) {
      connection.sleep( 1000 );
   }

TITLE: request.setIdempotent
SEEALSO: http.setIdempotent
DESCRIPTION: Marks a request as resendable or non-resendable.
An idempotent request has no detrimental side
effects, so it can safely be attempted multiple times. A
non-idempotent request has a side effect - for example, it
may update a database, or initiate a purchase.
By default, all non-HTTP requests are marked as idempotent.
If a back-end node fails to generate a correct response when
a request is initially forwarded to it, an attempt will be made
to resend the request to another node.  An exception to this
is requests received through a virtual server using one of the
generic-type protocols. In order to be idempotent by 
default, an end-point to the request must first be defined 
(using functions such as request.endsWith() or request.endsAt()).
Only then can failures be measured and alternative nodes tried.
request.setIdempotent() can override this behaviour. If
'resend' is zero, this indicates that the request should
only be attempted against one back-end node.
If 'resend' has a non-zero value, this indicates that if a
request is made to a back-end node and a correct response is
not received, the request should be retried against another
back-end node.
Note that a request cannot be resent once it has begun
streaming data between the client and the node.
Additionally, UDP connections cannot be marked as resendable
(the UDP client application should handle failed UDP
responses).
SAMPLE: # Mark this request as resendable
   request.setIdempotent( 1 );
PARAMETERS: resend

TITLE: response.set
SEEALSO: request.sendResponse, response.append, response.get, request.set
DESCRIPTION: Sets the server response to the provided string.
This is a low-level routine that should be used with care.
For protocols with their own higher-level protocol managers
(e.g. HTTP), you must use the higher level routines to alter the
input data (e.g. http.setResponseHeader() and http.setResponseBody()).
SAMPLE: $data = response.get();
   $data = string.regexsub( $data,
      "From: ", "To: ", "g" );
   response.set( $data );
PARAMETERS: response data

TITLE: rate.getbacklog
SEEALSO: rate.use
DESCRIPTION: Returns the number of connections that are currently
waiting to be released by the supplied rate class.
SAMPLE: $backlog = rate.getbacklog( "gold-user",
                            request.getRemoteIP() );
if( $backlog > 10 ){
   # Tell the customer to come back later
   http.sendResponse( "503 Service Unavailable",
                      "text/html", "Go away",
                      "Retry-After: 10" );
}
PARAMETERS: class_name, [ context ]

TITLE: response.setDSCP
SEEALSO: response.getDSCP, request.setDSCP, request.getDSCP
DESCRIPTION: Sets the Differentiated Service Code Point (DSCP) field in the IP packet
header of traffic being sent to the client. A 6-bit value must be provided.
If successful, this function returns true, otherwise it returns false.
DSCP fields can be used by network equipment to change how they route
network traffic.
SAMPLE: if ( http.getHeader( "X-Set-DSCP-Priority" != "" )) {
      response.setDSCP( 0x2c );
   }
PARAMETERS: 6-bit DSCP field

TITLE: pool.select
SEEALSO: pool.use
DESCRIPTION: Selects a pool to load-balance this connection with. By default, the pool
name should be a literal string (i.e. not dynamically generated and not
containing any variables), however, if you enable the
"trafficscript!variable_pool_use" global setting
variables can be used too. Please refer to the Troubleshooting section of 
the Stingray TrafficScript Overview and Reference Manual for more information
about this setting. Unlike pool.use(), your traffic manager will continue 
to process further request rules after this function.
If the pool named does not exist, your traffic manager will log a warning
message.
Optionally, a specific machine can be specified that will be used to
forward the request on to. This machine does not have to be in the pool
selected, or in fact in any pool. In this mode, the selected pool is
used only for its configuration settings (e.g. timeout values, SSL
encryption options, etc.)
SAMPLE: # Use the pool named 'Content Pool'
   pool.select( "Content Pool" );
# Send this request to www.riverbed.com:80,
   # using config from pool 'Riverbed'
   pool.select( "Riverbed", "www.riverbed.com", 80 );
PARAMETERS: Pool, [ Host, Port ]

TITLE: recentconns.markedForInclusion
SEEALSO: recentconns.include, recentconns.exclude, requestlog.markedForInclusion
DESCRIPTION: Returns whether or not this connection will be added to the Recent
Connections page upon completion.
Connections will be included on the Recent Connections page only if
recent_conn!enabled is set to Yes for this virtual server and the
connection has been marked for inclusion either by default, or by
the recentconns.include() function.
SAMPLE: # If this rule will be added to the recent
  # connections page, add some additional info
  if( recentconns.markedForInclusion() ) {
     # Add the user's name to the log
     $user = connection.data.get( "user" );
     http.addResponseHeader( "X-Username", $user );
  }

TITLE: request.setMaxReplyTime
SEEALSO: request.setVirtualServerTimeout
DESCRIPTION: Overrides the pool's max reply time for this request,
also overriding the virtual server timeout if necessary.
A node must start its reply within this time or it will
be timed out.
SAMPLE: if( http.getMethod() == "POST" ) {
      # Allow more time to send data to server.
      request.setMaxReplyTime( 60 );
   }
PARAMETERS: seconds

TITLE: recentconns.exclude
SEEALSO: recentconns.include, requestlog.exclude
DESCRIPTION: Specifies that this connection should not be saved in the Recent Connections
buffer upon completion. This function can be used when the virtual server
has recent_conns!save_all set to Yes to filter out unwanted connections
from the Recent Connections page.
Note that recent_conns!enabled must be set to Yes on the virtual
server for any connections to be saved.
SAMPLE: # Don't bother saving connections that completed
  # within 1 second and returned a 200.
  if( http.getResponseCode() == 200
     && stats.getTransactionDuration() < 1000 ) {
     recentconns.exclude();
  }

TITLE: pool.use
SEEALSO: pool.select
DESCRIPTION: Selects a pool to load-balance this connection
with, and stops processing any more rules. It must only be used
in request rules.
By default the pool name should be a literal string, however, if you
enable the "trafficscript!variable_pool_use" global setting,
variables can be used too. Please refer to the Troubleshooting section
of the Stingray TrafficScript Overview and Reference Manual for more information
about this setting.
If the pool named does not exist, your traffic manager will log a warning
message and use the default pool configured for the virtual
server.
Optionally, a specific machine can be specified that will be used to
forward the request on to. This machine does not have to be in the pool
selected, or in fact in any pool. In this mode, the selected pool is
used only for its configuration settings (e.g. timeout values, SSL
encryption options, etc.)
SAMPLE: # Use the pool named 'Content Pool'
   pool.use( "Content Pool" );
# Send this request to www.riverbed.com:80,
   # using config from pool 'Stingray'
   pool.use( "Stingray", "www.riverbed.com", 80 );
PARAMETERS: Pool, [ Host, Port ]

TITLE: connection.checkLimits
DESCRIPTION: This function checks to see if the connection will be queued due to
backend connection limits.
The function returns 1 if the connection is within configured maximum limits 
for the named pool ( See max_connections_pernode setting in Pool &gt;
Connection Management ).
The function returns 0 if the connection will exceed the configured maximum limits and will be queued.
If the named pool does not exist, your traffic manager will log a warning
message and a value of -1 will be returned.
SAMPLE: # A connection is queued if it exceeds 
   # max_connections_pernode. 
   # Send a failure response to the client.
   if( !connection.checkLimits( "pool" ) ) {
      http.sendResponse( "500 Failure",
                    "text/plain", 
                    "Reached maximum connections",
                    "" );
      connection.discard();
   }
PARAMETERS: [poolname]

TITLE: connection.getMemoryUsage
DESCRIPTION: Returns an estimate of the
amount of memory currently in use for this connection, in
bytes. Memory is primarily used for buffering data, and the
memory usage can be tuned using the various buffer size
settings.
SAMPLE: # How much memory are we using?
   $memoryusage = connection.getMemoryUsage();

TITLE: connection.getLine
REPLACEDBY: request.getLine
SEEALSO: connection.getData
DESCRIPTION: Returns a line of input data provided
by the client. The line separator is '\n', and this is
stripped off before returning the line. connection.getline()
takes a single byte-count argument which indicates where
to start scanning for a line; a value of '0' begins at the
start, so returns the first line.
When connection.getline() returns, the variable $1 is
updated to point to the start of the next line in the
datastream.
You can iterate through the lines of input data by using $1
as the iterator variable.
SAMPLE: # Process the lines in the request until an empty
    # line is found
    $line = connection.getLine( 0 );
    while( $line ) {
       # process $line...
       $line = connection.getLine( $1 );
    }
PARAMETERS: offset

TITLE: rate.use
DESCRIPTION: Immediately queues a connection using the named rate class.
The connection and the current TrafficScript rule is stalled until
the rate class releases it, according to the rate limits defined in
the class. When the connection is released, the rate.use() function
returns and the TrafficScript rule continues to execute.
If rate.use() is called with the optional 'context' value, it uses a new
rate class which inherits all of the rate settings from the named rate
class.  All connections called with the same 'context' value use the
same new rate class.  This allows you to shape connections based on
arbitary data, such as a user name or source IP address, shaping
connections from different users or source IPs independently.
If the connection has passed through the class successfully then the
value 1 is returned. If the connection times out while it is queued,
then the TrafficScript rule is abandoned.  If the connection could not be
queued because an invalid rate class name was provided, rate.use() returns
0.
SAMPLE: rate.use( "protect_database" );
rate.use( "limit_user",
           http.getCookie( "SessionID" ) );
PARAMETERS: class_name, [ context ]

TITLE: request.setMaxTransactionDuration
SEEALSO: request.getMaxTransactionDuration, request.setVirtualServerTimeout, request.setMaxReplyTime
DESCRIPTION: Overrides the virtual server's maximum duration for this transaction.
A value of 0 means unlimited duration.
SAMPLE: $ct_len = http.getHeader( "Content-Length" );
   if( $ct_len > 1024 ) {
      # give client 10s per kB of uploaded body data
      $d = 10 * $ct_len / 1024;
      request.setMaxTransactionDuration( $d );
   } else {
      # use virtual server default
   }
PARAMETERS: int

TITLE: response.getLength
SEEALSO: response.get, request.getLength
DESCRIPTION: Returns the amount of data already received from the server. This can be
combined with response.get() to reliably read data from a connection
without stalling if no data is available.
SAMPLE: $data = response.get( response.getLength() );

TITLE: connection.setData
REPLACEDBY: request.set
DESCRIPTION: Replaces the input data read from the client with the provided string.
This is a low-level routine that should be used with care.
For protocols with their own higher-level protocol managers
(e.g. HTTP), use the higher level routines to alter the
input data (e.g. http.setHeader() and http.setBody()).
SAMPLE: $data = connection.getData(connection.getDataLen());
   $data = string.regexsub( $data, "From", "To", "g" );
   connection.setData( $data );
PARAMETERS: request data

TITLE: recentconns.include
SEEALSO: recentconns.exclude, requestlog.include
DESCRIPTION: Mark this connection for inclusion in the Recent Connections buffer. Details
about this connection can then be viewed on the Activity > Connections page.
Note that recent_conns!enabled must be set to Yes on the virtual
server for any connections to be saved.
Returns true if the connection will be added to the Recent Connections
buffer, or false otherwise.
SAMPLE: # Show server errors on the recent connections page
  if( http.getResponseCode() >= 500 ){
     recentconns.include();
  }

TITLE: request.getLine
SEEALSO: request.get, response.getLine
DESCRIPTION: Returns a line of request data provided by
the client. The line is terminated by the supplied regular
expression, or by '\n'. If 'offset' is provided,
request.getLine() returns the data from that offset to
the terminating expression.  The terminating expression is
included in the returned string.
When request.getline() returns, the variable $1 is updated
to point to the start of the next line in the datastream.
You can iterate through the lines of request data by using $1
as the iterator variable.
To prevent excessive data usage, if the line ending is not found
within trafficscript!memory_warning bytes (configurable on the
Global Settings page), then that many bytes will be returned.
SAMPLE: # Process the lines in the request until an empty
    # line is found
    $line = request.getLine( "\n" );
    while( $line != "\n" ) {
       # process $line...
       $line = request.getLine( "\n", $1 );
    }
PARAMETERS: [regex], [offset]

TITLE: request.endsWith
SEEALSO: request.endsAt
DESCRIPTION: Marks the end of the current request.  Any more data read
in from the network is not handled until the next request has
started to be handled.
This function is useful to synchronise requests and responses.  An example
of its use would be for a line-oriented protocol such as POP3, where
you wish to process each command.
It returns the entire request.
This function allows you to program layer-7 intelligence to correctly parse
and manage generic TCP protocols.
SAMPLE: # this is the end of the current request
   $req = request.endsWith( "\n" );
PARAMETERS: regex

TITLE: xml.validate.dtd
SEEALSO: xml.validate.xsd
DESCRIPTION: Validates an XML document against a DTD. It
returns 1 if the document validated correctly, and 0 if it
did not. It returns -1 if there was an error parsing the XML
document or the DTD.
The XML processing functionality must be enabled by the
software license.
SAMPLE: # Validate the HTTP body against the DTD stored in
   # the resource 'mydtd'
   $theDoc = http.getBody( 0 );
   $theDTD = resource.get( "mydtd" );
   if( xml.validate.dtd( $theDoc, $theDTD ) != 1 ) {
      # validation failed ...
   }
PARAMETERS: document, DTD

TITLE: data.getMemoryFree
SEEALSO: data.set, data.reset, data.getMemoryUsage
DESCRIPTION: Returns the amount of free space, in bytes, available for storing
information with data.set().
If memory space is low, then data.reset() can be used to clear some or
all of the entries from the storage. Alternatively, the upper limit on
memory can be configured using trafficscript!data_size on the Global
Settings page.
SAMPLE: # If running low on storage, clear some temporary
   # data that other rules have stored.
   $bytes = data.getMemoryFree();
   if( $bytes < 1024 ) {
      data.reset( "temp-" );
   }

TITLE: geo.getIPDistanceKM
DESCRIPTION: Returns the distance in kilometres between the locations of two IPv4
addresses. It will return -1 unless both locations can be found.
SAMPLE: # Get the distance between two IPs in kilometres
   $d = geo.getIPDistanceKM( "11.12.13.14",
                             "25.26.27.28" );
PARAMETERS: ip1, ip2

TITLE: connection.data.set
SEEALSO: connection.data.get, data.set
DESCRIPTION: Stores a value for this connection, associating it with the provided
key. The value can be retrieved later when processing the same
connection, using connection.data.get().  Once the connection finishes,
the value cannot be retrieved.
SAMPLE: # Track the state of this connection so that we
   # can process the response correctly
   $req = request.get( 5 );
   if( string.startsWith( $req, "LOGIN" ) ) {
      connection.data.set( "state", "login" );
   } else {
      connection.data.set( "state", "" );
   }
# ...
   # in the response, ...
   $state = connection.data.get( "state" );
PARAMETERS: key, value

TITLE: request.sendResponse
SEEALSO: connection.discard, http.sendResponse, response.set, response.append, connection.close
DESCRIPTION: Writes the provided data directly back to the client.
Any data that has been read is discarded, and nothing is
forwarded to the back-end node.  Unlike its counterpart 
http.sendRequest(), this function does not terminate rule 
processing immediately.  Instead, it stores the provided 
string for sending back to the client when rule 
processing has finished.
If you are managing HTTP traffic the http.sendResponse() function
should be used instead.
SAMPLE: # Send a response
   request.sendResponse( "530 Login incorrect\r\n" );
PARAMETERS: Data

TITLE: log.info
SEEALSO: log.warn, log.error, event.emit
DESCRIPTION: Writes an informational message to the traffic manager's event log file. This log
can be viewed through the UI.
SAMPLE: log.info( "Everything is OK" );
PARAMETERS: message

TITLE: resource.getMTime
SEEALSO: resource.exists, resource.get, resource.getMD5, sys.timeToString, sys.time
DESCRIPTION: Returns the time that the named
file in ZEUSHOME/zxtm/conf/extra/ was last modified, in
seconds since the epoch (i.e. UNIX time). If the file doesn't
exist, 0 is returned.
SAMPLE: # Find out the time the file was last modified
   $mtime = resource.getMTime( "myfile" );
PARAMETERS: filename

TITLE: request.getToS
REPLACEDBY: request.getDSCP
SEEALSO: response.getToS, request.setToS
DESCRIPTION: NOTE: RFC 2474 has superceded IP ToS values with the DSCP field.
Returns the Type of Service (ToS) of traffic going to the server. The
return value is either "LOWDELAY", "THROUGHPUT", "RELIABILITY" or "NONE".
SAMPLE: if( request.getToS() != "LOWDELAY" ) {
      connection.sleep( 1000 );
   }

TITLE: connection.setPersistence
SEEALSO: connection.getPersistence, connection.setPersistenceKey
DESCRIPTION: Sets the Session Persistence class that
will be used for the connection. This is used to override the
default Session Persistence class that will be used once a Pool is
selected.
If no parameter is given then the current Session Persistence class will be
removed and the Pool's default session
persistence class will be used for this connection.
SAMPLE: connection.setPersistence( "sales" );
PARAMETERS: name

TITLE: pool.activenodes
SEEALSO: pool.listactivenodes, pool.failednodes
DESCRIPTION: Returns the number of nodes that are alive in the named pool.
This will not include any nodes that have been marked as 'draining'.
SAMPLE: # Throw a warning if the number of live nodes
   # drops to below 3
if( pool.activeNodes( "database" ) < 3 ) {
      log.warn( "Database nodes are low" );
   }
# If there are less than two nodes, use a different
   # pool.
   # Better to use priority nodes in a pool for this
   # though.
if( pool.activeNodes( "database" ) < 2 ) {
      pool.use( "database-offsite" );
   } else {
      pool.use( "database" );
   }
PARAMETERS: Pool

TITLE: pool.listdisablednodes
SEEALSO: pool.listactivenodes, pool.listdrainingnodes, pool.listfailednodes, pool.listallnodes
DESCRIPTION: Lists the IP addresses of the nodes that are disabled
in the named pool.
SAMPLE: # Log every disabled node.
   $nodes = pool.listDisabledNodes("thepool");
   foreach ( $node in $nodes ) {
      log.warn( $node." is disabled" );   
   }
PARAMETERS: Pool

TITLE: connection.data.get
SEEALSO: connection.data.set, data.get
DESCRIPTION: Returns the value that was previously stored with
the given key using connection.data.set() in the current connection,
or returns the empty string if no data was stored.
SAMPLE: # Track the state of this connection so that we
   # can process the response correctly
   $req = request.get( 5 );
   if( string.startsWith( $req, "LOGIN" ) ) {
      connection.data.set( "state", "login" );
   } else {
      connection.data.set( "state", "" );
   }
# ...
   # in the response, ...
   $state = connection.data.get( "state" );
PARAMETERS: key

TITLE: data.get
SEEALSO: data.set, data.remove, data.getMemoryUsage
DESCRIPTION: Returns the value that was previously stored with
the given key using data.set(), or returns the empty string if no data was
stored.
Values stored in this way are persistent; a value stored in
one rule can later be retrieved by a different rule handling
a different connection. Thus, a rule can maintain persistent
state across connections.
SAMPLE: data.set( "count", 7 );
# In another rule or connection...
   $value = data.get( "count" ); # Returns 7
PARAMETERS: key

TITLE: request.skip
SEEALSO: request.getLength, request.getLine, request.set, request.get
DESCRIPTION: Removes the specified number of bytes from the start of
the request provided by the client. This can be used in combination with
request.get() and request.getLine() to stream data from a client, or to
alter a request before passing it on to a server.
Successive calls to this function will remove further data.
SAMPLE: # Skip the first 1K of data
   request.skip( 1024 );
# Now skip another 1K
   request.skip( 1024 );
PARAMETERS: count

TITLE: response.flush
SEEALSO: response.get, response.getLine
DESCRIPTION: Transfers the first count bytes of the response
back to the client.  These bytes are removed from the underlying
response buffer.  If count is not specified, all current response
data is flushed.
This function is useful in generic client- and server-first protocols,
to synchronise responses with the next request.  This may be necessary
if your traffic manager is likely to respond directly to some requests,
and the back-end node responds to others.
SAMPLE: # keep flushing response data until we get
   # an empty line...
$res = response.getLine();
while( $res != "\n" ) {
      response.flush( string.len( $res ) );
      $res = response.getLine();
   }
# the remainder of the response buffer will be
   # flushed when all response rules complete
PARAMETERS: count

TITLE: pool.failednodes
SEEALSO: pool.activenodes, pool.listfailednodes
DESCRIPTION: Returns the number of nodes that have failed in the named pool.
SAMPLE: # Emit a warning if the number of failed nodes
   # exceeds the number of active nodes.
if( pool.failedNodes( "database" ) > 
       pool.activeNodes( "database" ) ) {
     event.emit( "warning", "Too many failed nodes" );
   }
PARAMETERS: Pool

TITLE: response.getRemotePort
SEEALSO: response.getRemoteIP, response.getLocalPort, response.getLocalIP, request.getRemotePort, request.getRemoteIP, request.getLocalPort, request.getLocalIP
DESCRIPTION: Returns the network port number on which the traffic manager
connected to a node. (e.g. port 80 is normal for a web server).
If there is no current connection, it will return 0.
SAMPLE: $port = response.getRemotePort();

TITLE: request.setMaxConnectionAttempts
SEEALSO: request.setMaxReplyTime, request.setMaxTimedOutConnectionAttempts
DESCRIPTION: Overrides the pool's maximum number of connection attempts for this request.
Connections to different nodes will be attempted until the maximum number
of attempts is exceeded or the connection is successful.
A value of 0 means unlimited attempts.
SAMPLE: if( http.getMethod() == "POST" ) {
      # This is the same as request.setIdempotent( 0 )
      request.setMaxConnectionAttempts( 1 );
   }
PARAMETERS: int

TITLE: response.setToS
REPLACEDBY: response.setDSCP
SEEALSO: request.setToS, response.getToS
DESCRIPTION: NOTE: RFC 2474 has superceded IP ToS values with the DSCP field.
Sets the Type of Service (ToS) flags of traffic going to the client.
Valid options are "LOWDELAY", "THROUGHPUT", "RELIABILITY" or "NONE".  ToS
flags may be used by network equipment to change how they route network
traffic.
SAMPLE: response.setToS("LOWDELAY");
PARAMETERS: Type of Service

TITLE: request.isResendable
SEEALSO: request.retry, request.getRetries, request.setIdempotent
DESCRIPTION: Test if it is possible to resend this request to a different node.  It is
only possible to resend a request if the entire request has been buffered
up in the traffic manager, for example, by explicitly reading it in a
request rule.
If the request was streamed through to the client, for example,
as a large HTTP POST, it will not have been buffered and therefore
cannot be resent.
Note that request.isResendable detects if it is possible to resend
a request; request.setIdempotent can be used to tell the traffic manager
not to automatically resend a request if it fails.
SAMPLE: if( request.isResendable() ) {
      log.info( "Retrying request" );
      request.retry();
   }

TITLE: rate.use.noQueue
SEEALSO: rate.use
DESCRIPTION: Checks if this connection will exceed the rate
limits of the named rate class.
If connection is within rate limits, a value of 1 is 
returned and the connection is added to rate usage data. 
If usage has exceeded rate limits, a value of 0 is returned.
If the rate class does not exist, a value of -1 will be returned.  
Optionally a context value can be used to check rate limits based on 
a context, for example, rate limits for a specific client IP address.
See rate.use for more details on context.
Unlike rate.use(), this will not queue connections if the rate limit
is exceeded.
Note that calling rate.use() after rate.use.noQueue() will mean that
the connection is counted twice, halving the allowed rate.
SAMPLE: $use = rate.use.noQueue( "protect_database" );
# usage is over rate limits.
if( $use == 0 ){
   http.sendResponse( "503 Service Unavailable",
                      "text/html", "Go away",
                      "Retry-After: 10" );
   connection.discard();
} else if( $use > 0 ){ # usage is within rate limits
   log.info( "No queueing" );
} else { # Rate class does not exist
   log.info( "Rate class doesn't exist" );
}
PARAMETERS: class_name, [ context ]

TITLE: request.setVirtualServerTimeout
SEEALSO: request.setMaxReplyTime
DESCRIPTION: Overrides the virtual server's timeout for this request.
The connection to the client will be closed after this period of time,
regardless of what state it is in.
SAMPLE: $path = http.GetPath();
   if( string.startsWith( $path, "/downloads" ) ) {
      request.setVirtualServerTimeout( 60 );
   }
PARAMETERS: seconds

TITLE: pool.listfailednodes
SEEALSO: pool.listactivenodes, pool.listdrainingnodes, pool.listdisablednodes, pool.listallnodes
DESCRIPTION: Lists the IP addresses of the nodes that are marked as failed
in the named pool.
SAMPLE: # Log every failed node.
   $nodes = pool.listFailedNodes("thepool");
   foreach ( $node in $nodes ) {
      log.warn( $node." has failed" );   
   }
PARAMETERS: Pool

TITLE: resource.get
DESCRIPTION: Returns the contents of a named file stored
in the ZEUSHOME/zxtm/conf/extra/ directory. If the
file doesn't exist, then an empty string is returned. Note that
subdirectories of conf/extra are not supported.
Resources are pre-loaded into memory, so this call does not cause the
file to be reloaded.
SAMPLE: # Read the contents of the 'info' file and add them
   # as a new header.
   http.addheader( "X-Info", resource.get( "info" ));
PARAMETERS: filename

TITLE: sys.getRestApiPort
DESCRIPTION: Returns the TCP port number used by the REST API, such as 9070.
SAMPLE: # get the REST API port
 $restport = sys.getRestApiPort();
# use that to get the root node from the REST API
 $body = http.request.get(
               "http://localhost:".$restport."/");
# in this case an 'error: authentication required'
 # type response
 # will be returned

TITLE: request.getLocalPort
SEEALSO: request.getLocalIP, request.getRemotePort, request.getDestPort, request.getRemoteIP, response.getLocalPort, response.getLocalIP, response.getRemotePort, response.getRemoteIP
DESCRIPTION: Returns the network port number that the client connected to. (e.g. port
80 is normal for a web server)
SAMPLE: # Get the local port, such as 80
   $port = request.getLocalPort();

TITLE: request.setDSCP
SEEALSO: request.getDSCP, response.getDSCP, response.setDSCP
DESCRIPTION: Sets the Differentiated Service Code Point (DSCP) field in the IP packet
header of traffic being sent to the server. A 6-bit value must be provided.
If successful, this function returns true, otherwise it returns false.
DSCP fields can be used by network equipment to change how they route
network traffic.
SAMPLE: if ( http.getHeader( "X-Set-DSCP-Priority" != "" )) {
      request.setDSCP( 0x2c );
   }
PARAMETERS: 6-bit DSCP field

TITLE: request.retry
SEEALSO: request.isResendable, request.getRetries, pool.select
DESCRIPTION: Retry the request (using the currently selected pool).
Load-balancing and session persistence decisions
are recalculated, and the request is resubmitted - possibly to the same
node as previously, although request.avoidNode() can prevent this.
If request.retry() is called, any request rules are not run again.  When
a new response is collected after request.retry(), the response rules are
run again.
The response rule can modify the request in before resubmitting it.
It is only generally possible to resend a request if the entire request
was read before the request rules completed.  Otherwise, request data will
have been streamed to the server and not cached.  Use
request.isResendable() to test for this.
request.getRetries() returns the number of times this request has
already been tried.
On success, request.retry() does not return, but the response rules will
be run again on the new response.  On failure, request.retry() returns 0.
request.retry() will do nothing if used in a request rule.
SAMPLE: $code = http.getResponseCode();
if( $code == 404 || 
   ( $code >= 500 && $code != 503 ) ) {
   # Not retrying 503s here, because they get retried
   # automatically before response rules are run
   if( request.getRetries() < 3 ) {
      # Avoid the current node when we retry,
      # if possible
      request.avoidNode( connection.getNode() );
      request.retry();
   }
}

TITLE: geo.getLocationLonLat
SEEALSO: geo.getLocation
DESCRIPTION: Returns a hash containing the longitude and latitude of the location to
which this request was sent.
Note that traffic managers can be assigned to locations only when Stingray
Multi-Site Cluster Management is enabled and locations can be assigned a latitude and
longitude only when using the Global Load Balancing feature.
SAMPLE: # How for away from the traffic manager did this
   # request originate from?
   $loc = geo.getLocationLonLat();
   $ip = request.getRemoteIP();
   $reqlon = geo.getLongitude( $ip );
   $reqlat = geo.getLatitude( $ip );
   $reqloc = geo.getCountry( $ip );
   log.info( "Request was sent from " .
             $reqloc . ", " .
             geo.getDistanceMiles( $loc["latitude"],
                                   $loc["longitude"],
                                   $reqlat, $reqlon ) .
             " miles away from here" );

TITLE: pool.disablednodes
SEEALSO: pool.activenodes, pool.listdisablednodes
DESCRIPTION: Returns the number of nodes that are have been marked as disabled in
the named pool.
SAMPLE: # Log the number of disabled nodes
   $nodes = pool.disabledNodes("mypool");
   log.info($nodes." nodes are disabled");
PARAMETERS: Pool

TITLE: request.getMaxTransactionDuration
SEEALSO: request.setMaxTransactionDuration, request.setVirtualServerTimeout, request.setMaxReplyTime
DESCRIPTION: Returns the current value of the allowed maximum duration for this
transaction.  If the duration has been set by a previous call to
setMaxTransactionDuration, that value will be returned, otherwise
the relevant virtual server's max_transaction_duration config key.
A value of 0 means unlimited duration.
SAMPLE: $max_duration = request.getMaxTransactionDuration();
   if( $max_duration == 0 || $max_duration > 60 ) {
      # enforce absolute maximum for all requests:
      request.setMaxTransactionDuration( 60 );
   }

TITLE: request.getRemoteIP
SEEALSO: request.getRemotePort, request.getLocalIP, request.setRemoteIP, request.getLocalPort, response.getRemoteIP, response.getRemotePort, response.getLocalIP, response.getLocalPort
DESCRIPTION: Returns the remote IP address of the client.
SAMPLE: # Get the remote IP address, such as "10.1.4.21"
   # or "2001:200::8002:203:47ff:fea5:3085"
   $ip = request.getRemoteIP();

TITLE: request.getDestIP
SEEALSO: request.getDestPort, request.getRemoteIP, request.getRemotePort
DESCRIPTION: Returns the original IP address that the client
attempted to connect to. This will be the same as request.getLocalIP()
unless the connection was redirected via firewall rules
(e.g. using iptables on Linux)
SAMPLE: # Get the local IP address, such as "10.1.4.21" or
   # "2001:200::8002:203:47ff:fea5:3085"
   $ip = request.getDestIP();

TITLE: response.getLocalIP
SEEALSO: response.getLocalPort, response.getRemoteIP, response.getRemotePort, request.getLocalIP, request.getLocalPort, request.getRemoteIP, request.getRemotePort
DESCRIPTION: Returns the local IP address of the
connection to the node in use, i.e. an IP address on the local
machine that your traffic manager connected from. It returns the empty
string if no connection exists.
SAMPLE: # Find the IP address we connected from, such as
   # "10.1.4.21" or "2001:200::8002:203:30:40:3085"
   $ip = response.getLocalIP();

TITLE: request.getDSCP
SEEALSO: request.setDSCP, response.getDSCP, response.setDSCP
DESCRIPTION: Returns the Differentiated Service Code Point (DSCP) field from the IP header
of traffic being sent to the server. The return value is a either the DSCP
value, or -1 if it could be not obtained from the socket. The return value
is a 6-bit value.
SAMPLE: if ( request.getDSCP() == 46 ) {
     log.info( "Processing Expedited traffic" );
     connection.setServiceLevelClass( "gold" );
   }

TITLE: connection.sleep
DESCRIPTION: Pauses processing of the current
connection for the specified number of milliseconds. This
can be used to rate-limit particular clients; for example,
those asking for particular files, or from particular
locations, or using particular user-agents.
SAMPLE: # Pause this connection for 2 seconds
   connection.sleep( 2000 );
PARAMETERS: milliseconds

TITLE: geo.getCountryCode
DESCRIPTION: Returns the two-character country code of the supplied IPv4 address, or the empty string.
SAMPLE: # Get this IP's country code, such as US
   $countryCode = geo.getCountryCode( "216.250.81.96" );
PARAMETERS: ip

TITLE: geo.getRegion
DESCRIPTION: Returns the region (e.g. US state) of the supplied IPv4 address, or the
empty string if the location is unknown or doesn't have a region.
SAMPLE: # Get this IP's region, such as California
   $state = geo.getRegion( "216.250.81.96" );
PARAMETERS: ip

TITLE: event.emit
SEEALSO: log.info, log.warn, log.error
DESCRIPTION: Triggers a Custom Event identified by the 'custom event name'.
Actions can be associated with the Custom Event by
configuring an Event Type to contain a Custom Event with the
specified 'custom event name', and then associating that Event Type
with an Action.
The 'custom event name' cannot contain '/' or control codes.
In addition to custom actions, a log message will be produced
containing the eventid and the message.
SAMPLE: # Emit a debug statement.
  event.emit( "debug1", "Some debug information" );
PARAMETERS: custom event name, message

TITLE: pool.listallnodes
SEEALSO: pool.listactivenodes, pool.listdrainingnodes, pool.listfailednodes, pool.listdisablednodes
DESCRIPTION: Lists the IP addresses of all the nodes including disabled nodes.
SAMPLE: # Log every node we know about using port 1234
   $nodes = array.filter( pool.listAllNodes("thepool"),
                          ":1234$" );
   foreach ( $node in $nodes ) {
      log.info( "Found ".$node );   
   }
PARAMETERS: Pool

TITLE: geo.getLatitude
DESCRIPTION: Returns the decimal latitude of the supplied IPv4 address, or the empty
string if the location is unknown. This may be accurate to city, region
or only country level: to find out, check whether geo.getCity() and
geo.getRegion() return empty strings.
SAMPLE: # Get this IP's decimal latitude (positive = north),
   # such as 37.3961
   $lat = geo.getLatitude( "216.250.81.96" );
PARAMETERS: ip

TITLE: xml.xpath.matchNodeCount
SEEALSO: xml.xpath.matchNodeSet
DESCRIPTION: Applies an XPath query to the supplied XML document.
It returns the number of entries in the result node set.
The function will return -1 if there was an error parsing the XML
document, XML namespace or XPath query.
Namespaces can be used in the XPath query by defining them
in the nspacemap parameter.
This parameter is specified as a space-separated list of
identifiers mapped to namespaces. For example, specifying
'xmlns:myns=http://www.example.com/mynamespace' allows you
to use the identifier 'myns' in the XPath query to find
elements in the 'http://www.example.com/mynamespace' namespace
within the XML document.
The XML processing functionality must be enabled by the
software license.
SAMPLE: # A sample XML document
   $theDoc =
   '<?xml version="1.0" encoding="UTF-8"?>
    <mybook xmlns="http://www.example.com/book"
      xmlns:recent="http://www.example.com/newitems">
    <item>Item 1</item>
       <recent:item>Item 2</recent:item>
       <item>Item 3</item>
       <recent:item>Item 4</recent:item>
    </mybook>
   ';
# How many items are in the 'newitems' namespace
   # under the 'mybook' element of the 'book' namespace?
   # Note: namespace identifiers in the XPath query
   # do not have to be the same as those used in the XML
   # document itself.
   $items = xml.xpath.matchNodeCount(
      $theDoc,
      "xmlns:book=http://www.example.com/book ".
      "xmlns:new=http://www.example.com/newitems",
      "//book:mybook/new:item"
   );
# $items = 2
PARAMETERS: doc, nspacemap, query

TITLE: geo.getLongitude
DESCRIPTION: Returns the decimal longitude of the supplied IPv4 address, or the empty
string if the location is unknown. This may be accurate to city, region
or only country level: to find out, check whether geo.getCity() and
geo.getRegion() return empty strings.
SAMPLE: # Get this IP's decimal longitude (positive = east),
   # such as -121.962
   $long = geo.getLongitude( "216.250.81.96" );
PARAMETERS: ip

TITLE: request.set
SEEALSO: request.get, response.set
DESCRIPTION: Replaces the input data read from the client with the provided string.
This is a low-level routine that should be used with care.
For protocols with their own higher-level protocol managers
(e.g. HTTP), use the higher level routines to alter the
input data (e.g. http.setHeader() and http.setBody()).
SAMPLE: $data = request.get();
   $data = string.regexsub( $data, "From", "To", "g" );
   request.set( $data );
PARAMETERS: request data

TITLE: connection.getServiceLevelClass
SEEALSO: connection.setServiceLevelClass
DESCRIPTION: Returns the current service level class for the connection, or
an empty string if no class is set.
SAMPLE: $class = connection.getServiceLevelClass();

TITLE: data.reset
SEEALSO: data.set, data.remove, data.getMemoryUsage, data.getMemoryFree
DESCRIPTION: Removes some or all of the mappings created by data.set().
With no arguments, it removes all keys. With a single argument, it
removes all keys that begin with the supplied string.
NOTE: Should you intend to delete a specific individual key,
data.remove() is more suited to this task. It offers greater
performance and also ensures there is no risk of
accidentally deleting other keys that start with the same string.
SAMPLE: # Free some memory if we've used too much
   if( data.getMemoryUsage() > 102400 ) {
      data.reset( "mappings-" );
   }
PARAMETERS: [prefix]

TITLE: connection.setPersistenceKey
SEEALSO: connection.setPersistence
DESCRIPTION: Sets the value of the Session Persistence
key that is used by a Universal Session Persistence type class.
Setting the value to the empty string will remove any persistence key
from the connection.
A Session Persistence class that uses Universal Session Persistence
attempts to ensure that every connection that provides the same key is
directed to the same back-end node.
This function has no effect if a different type of session persistence
class is ultimately used.
SAMPLE: $value = http.getHeader( "User-Agent" ) .
            request.getRemoteIP();
   connection.setPersistenceKey( $value );
   connection.setPersistence( "my persistence class" );
PARAMETERS: value

TITLE: connection.getLocalPort
REPLACEDBY: request.getLocalPort
SEEALSO: connection.getLocalIP, connection.getRemoteIP, connection.getRemotePort
DESCRIPTION: Returns the network port number that the client connected to. (e.g. port
80 is normal for a web server)
SAMPLE: # Which port did the client connect to?
   $port = connection.getLocalPort();

TITLE: xml.validate
REPLACEDBY: xml.validate.dtd
DESCRIPTION: Validates an XML document against a DTD. It
returns 1 if the document validated correctly, and 0 if it
did not. It returns -1 if there was an error parsing the XML
document or the DTD.
The XML processing functionality must be enabled by the
software license.
SAMPLE: # Validate the HTTP body against the DTD stored in
   # the resource 'mydtd'
   $theDoc = http.getBody( 0 );
   $theDTD = resource.get( "mydtd" );
   if( xml.validate( $theDoc, $theDTD ) != 1 ) {
      # validation failed ...
   }
PARAMETERS: document, DTD

TITLE: resource.exists
SEEALSO: resource.get, resource.getMD5
DESCRIPTION: Checks whether or not the named file
exists in ZEUSHOME/zxtm/conf/extra/. If it exists 1
is returned, 0 otherwise.
SAMPLE: # Test if the file exists
   if( resource.exists( "myfile" ) ) {
      # ... process resource
   }
PARAMETERS: filename

TITLE: connection.getDataLen
REPLACEDBY: request.getLength
SEEALSO: connection.getData
DESCRIPTION: Returns the number of bytes of data already received from the
client. This can be combined with connection.getData() to reliably read
data from a connection without stalling if no data is available.
SAMPLE: $data = connection.getData( connection.getDataLen() );

TITLE: requestlog.exclude
SEEALSO: requestlog.include, recentconns.exclude
DESCRIPTION: Specifies that this connection should not be written to the request log
upon completion. This function can be used when the virtual server
has log!save_all set to Yes to filter out unwanted connections
from the request log.
Note that log!enabled or syslog!enabled must be set to Yes on the virtual
server for any connections to be logged.
SAMPLE: # Don't log requests from local IP addresses.
  $ip = request.getRemoteIP();
  if( string.ipmaskmatch( $ip, "10.0.0.0/8" ) ) {
     requestlog.exclude();
  }

TITLE: request.avoidNode
SEEALSO: request.retry, request.getRetries, connection.getNode
DESCRIPTION: Indicates that the named node should be avoided if at all possible.
When picking a node to use for a request, the traffic manager will not
use any nodes that have been named by request.avoidNode() unless session
persistence mandates it, or unless there are no other nodes available.
SAMPLE: # if we get a 503 Too Busy response, retry
   if( http.getResponseCode() == 503 ) {
      if( request.getRetries() < 3 ) {
         request.avoidNode( connection.getNode() );
         request.retry();
      }
   }
PARAMETERS: node

TITLE: data.set
SEEALSO: data.get, data.remove, data.getMemoryUsage
DESCRIPTION: Stores a value, associating it with
the provided key. The value can be retrieved later using
data.get(), even from a different rule or connection.
The value will be stored as a string, implicit conversion of
floating point numbers to strings can cause some precision
loss. You can convert a floating point number into a string with no
precision loss using 'string.sprintf( "%f", $val )'.
Arrays and hashes are serialised before storing and will be deserialised
into their original form when retrieved with data.get().
To prevent memory problems, there is an upper limit on the amount of data
that can be stored in the TrafficScript data storage. This means that the
data.set() may fail. The upper limit can be configured using
trafficscript!data_size on the Global Settings page.
data.set() returns true if the entry was stored, or false if there
was no room.
SAMPLE: # Associate $value with $key for future retrieval
   data.set( $key, $value );
# Run this code only once:
   if( !data.get( "runonce" ) ) {
      # Do initialization
      # ...
      data.set( "runonce", 1 );
   }
PARAMETERS: key, value

TITLE: request.getRemotePort
SEEALSO: request.getRemoteIP, request.getLocalPort, request.getLocalIP, response.getRemotePort, response.getRemoteIP, response.getLocalPort, response.getLocalIP
DESCRIPTION: Returns the remote network port of the client's connection.
SAMPLE: # Get the remote port, such as 20427
   $port = request.getRemotePort();

TITLE: request.setLogEnabled
REPLACEDBY: requestlog.include
SEEALSO: request.getLogEnabled
DESCRIPTION: Enables or disables logging for
the current request. Note that if logging for the current virtual
server is disabled, then this function cannot currently enable it.
Returns 1 if logging is now enabled, and 0 if it is now disabled.
SAMPLE: # Only log errors from the web server
  if( http.getResponseCode() < 400 ) {
     request.setLogEnabled( 0 );
  }
PARAMETERS: enabled

TITLE: java.run
DESCRIPTION: Runs a named Java Extension. The Java Extension class name
must be given, and extra options can also be supplied to the
Extensions.  (These are supplied as the 'args' attribute in the
Java Extension API).
SAMPLE: java.run(
   "com.riverbed.UserVerify", $user, $password
);
PARAMETERS: Java Extension class name, [options]

TITLE: pool.listactivenodes
SEEALSO: pool.listdrainingnodes, pool.listfailednodes, pool.listdisablednodes, pool.listallnodes
DESCRIPTION: Lists the IP addresses of the nodes that are alive
in the named pool. This will not include any nodes that have been
marked as 'draining'.
SAMPLE: # Post some data to every active node.
   $nodes = pool.listActiveNodes("thepool");
   foreach ( $node in $nodes ) {
      http.request.post("http://".$node."/someurl",
                        "1234");
   }
PARAMETERS: Pool

TITLE: response.setBandwidthClass
SEEALSO: response.getBandwidthClass, request.getBandwidthClass, request.setBandwidthClass
DESCRIPTION: Sets the bandwidth class
for the current connection to the client. Providing an empty
class name removes the bandwidth class from the
connection. It returns zero if an error occurs
(for example, if the bandwidth class does not exist),
and 1 otherwise.
SAMPLE: response.setBandwidthClass( "gold customers" );
PARAMETERS: name

TITLE: connection.getLocalIP
REPLACEDBY: request.getLocalIP
SEEALSO: connection.getLocalPort, connection.getRemoteIP, connection.getRemotePort
DESCRIPTION: Returns the IP address that the client connected to, i.e. the address
local to this machine.
SAMPLE: # Which IP did the client connect to?
   $ip = connection.getLocalIP();

TITLE: slm.threshold
SEEALSO: slm.conforming, slm.isOK
DESCRIPTION: returns the value of the serious_threshold setting in the given 
SLM class.  If no class name is provided, it will use the SLM 
class currently associated with this connection; if no SLM class 
is associated with the connection, it returns 0.
SAMPLE: # If we are within 10% of our threshold, divert a
 # portion of traffic elsewhere.  If we are less than
 # 25% below of our threshold, take evasive action to
 # get our site's end user experience under control!
if( slm.conforming() < slm.threshold()*0.75 ) {
    # evasive action!
    log.warn(
      "Site performance requires evasive action" );
    if( $level == "bronze" ) {
       # send away low priority traffic
       http.sendResponse( "302", "text/html", "",
         "Location: /toobusy.html" );
    } else if( $level == "silver" ) {
       # slow down processing of medium traffic
       connection.sleep( 500 );
    } else if( $level == "gold" ) {
       # use reserved bandwidth QoS
       response.setBandwidthClass(
         "premium reserved bandwidth" );
   }
 } else if( slm.conforming() < slm.threshold()*1.1 ) {
    # getting slow to the danger level; start
    # proactive traffic management
    if( $customer != "gold" ) {
      pool.use( "non-priority-nodes" );
   }
 }
PARAMETERS: [ class_name ]

TITLE: connection.getPool
SEEALSO: connection.getNode, connection.getVirtualServer
DESCRIPTION: Returns the name of the pool that this
request is connected to. If a pool has not been chosen, it
returns the empty string.
SAMPLE: # Where are we connected to?
   $poolname = connection.getPool();

TITLE: request.get
SEEALSO: request.getLength, request.getLine, request.endsWith, request.set, response.get
DESCRIPTION: Returns the first 'count' bytes of data
provided by the client in the current request. If no count
parameter is provided, all data read so far is returned, which
may be none unless request.get() has previously been called
with a positive count. If you cannot determine how much data
to read, use request.getLine or request.endsWith instead.
Warning: you can stall a connection by asking it to read
more data than the remote client will provide. Combine this
with request.getLength() or request.getLine() to reliably
read data from a connection. For HTTP, you are required to use
the HTTP specific functions like http.getBody() to read the request.
SAMPLE: # Get a length
   $buf = request.get( 4 );
   $l = string.bytesToInt( $buf );
   # Now we know how much more data to ask for
   $data = request.get( 4 + $l );
PARAMETERS: [count]

TITLE: resource.getMD5
SEEALSO: resource.exists, resource.get
DESCRIPTION: Returns the MD5 of the current contents of
the file in ZEUSHOME/zxtm/conf/extra/. If the file
doesn't exist, an empty string is returned.
File MD5s are cached to speed up this call.
SAMPLE: # Get the MD5 of the file
   $md5 = resource.getMD5( "myfile" );
PARAMETERS: filename

TITLE: counter.increment
SEEALSO: counter64.increment
DESCRIPTION: Increments the numbered counter. These counters are
readable via SNMP, and can be graphed on the Current Activity page on
the Administration Server.
By default, the counter is incremented by one, but you can also supply
an amount to increment the counter by. If a negative amount is supplied
the counter is decremented, but please keep in mind that a decrement is
indiscernible from a wrap-around.
SAMPLE: # Increment the first user counter by 100
  counter.increment( 1, 100 );
  # Increment the first user counter by 1
  counter.increment( 1 );
PARAMETERS: counter, [amount]

TITLE: response.getBandwidthClass
SEEALSO: response.setBandwidthClass, request.setBandwidthClass, request.getBandwidthClass
DESCRIPTION: Returns the current bandwidth class for the connection to the client, or
an empty string if no class is set.
SAMPLE: $class = response.getBandwidthClass();

TITLE: connection.close
SEEALSO: connection.discard, http.sendResponse
DESCRIPTION: Writes the provided data
directly back to the client. After the data has been sent,
the connection is closed.
The optional second argument specifies whether data should
continue to be read in from the client after sending this
response, and wait for it to close the connection. If set to
0, the connection will close immediately. If non-zero,
the traffic manager will wait and read any remaining data from
the connection before closing it.
The default behaviour is to wait, because some client
software will not read a response until it has sent its
entire request.
SAMPLE: # Send an instant response and close the connection
   connection.close( "500 Go away\r\n" );
PARAMETERS: Data, [Read]

TITLE: xml.xpath.matchNodeSet
SEEALSO: xml.xpath.matchNodeCount
DESCRIPTION: Applies an XPath query to the supplied XML document.
It returns a string representation of the result node set.
The function will return an empty string if there was an
error parsing the XML document, XML namespace or XPath query.
Namespaces can be used in the XPath query by defining them
in the nspacemap parameter.
This parameter is specified as a space-separated list of
identifiers mapped to namespaces. For example, specifying
'xmlns:myns=http://www.example.com/mynamespace' allows you
to use the identifier 'myns' in the XPath query to find
elements in the 'http://www.example.com/mynamespace' namespace
within the XML document.
The XML processing functionality must be enabled by the
software license.
SAMPLE: # A sample XML document
   $theDoc =
   '<?xml version="1.0" encoding="UTF-8"?>
    <mybook xmlns="http://www.example.com/book"
      xmlns:recent="http://www.example.com/newitems">
    <item>Item 1</item>
       <recent:item>Item 2</recent:item>
    </mybook>
   ';
# Get the value of the 'item' node in the 'newitems'
   # namespace under the 'mybook' element of the 'book'
   # namespace.
   # Note: namespace identifiers in the XPath query
   # do not have to be the same as those used in the XML
   # document itself.
   $set = xml.xpath.matchNodeSet(
      $theDoc,
      "xmlns:book=http://www.example.com/book ".
      "xmlns:new=http://www.example.com/newitems",
      "//book:mybook/new:item/text()"
   );
# $set = 'Item 2'
PARAMETERS: doc, nspacemap, query

TITLE: request.getDestPort
SEEALSO: request.getDestIP, request.getRemotePort, request.getRemoteIP
DESCRIPTION: Returns the original network port number that the client
attempted to connect to. This will be the same as request.getLocalPort()
unless the connection was redirected via firewall rules
(e.g. using iptables on Linux)
SAMPLE: # Get the port number on the traffic manager,
   # such as 80
   $port = request.getDestPort();

TITLE: pool.listdrainingnodes
SEEALSO: pool.listactivenodes, pool.listdisablednodes, pool.listallnodes, pool.listallnodes
DESCRIPTION: Lists the IP addresses of the nodes that are draining
in the named pool.
SAMPLE: # Search for a node in the draining list
   $nodes = pool.listDrainingNodes("thepool");
   $mynode = connection.getNode();
   if ( array.contains( $nodes, $mynode ) ) {
      log.info( $mynode." is draining" );
   }
PARAMETERS: Pool

TITLE: net.dns.resolveHost6
SEEALSO: net.dns.resolveHost, net.dns.resolveIP
DESCRIPTION: Resolves a hostname into an IPv6
address, using the DNS name servers configured on the local
system. If the lookup fails, an empty string is returned.
SAMPLE: # Do a double-dns lookup for an IPv6 address
   $rip = request.getRemoteIP();
   $rhost = net.dns.resolveIP( $rip );
   $ip = net.dns.resolveHost6( $rhost );
   if( $ip != $rip ) {
      log.warn( "Double lookup failed" );
   }
PARAMETERS: hostname

TITLE: geo.getRegionCode
DESCRIPTION: Returns the two-character region code (e.g. US state abbreviation) of the
supplied IPv4 address, or the empty string. The code for a given region may
differ between software versions.
SAMPLE: # Get this IP's region code, such as CA
   $stateCode = geo.getRegionCode( "64.69.78.223" );
PARAMETERS: ip

TITLE: connection.getPersistence
SEEALSO: connection.setPersistence
DESCRIPTION: In a Response rule this function returns the name of the current Session Persistence 
class used for this connection, or whatever class has been set by a previous
use of connection.setPersistence().
SAMPLE: $class = connection.getPersistence();

TITLE: connection.getVirtualServer
SEEALSO: connection.getNode, connection.getPool
DESCRIPTION: Returns the name of the Virtual Server that the rule is running under.
SAMPLE: # Are we on the secure site?
   if( connection.getVirtualServer() == "secure" ) {
      pool.use( "secure" );
   }

TITLE: request.getRetries
SEEALSO: request.retry, request.isResendable, pool.select
DESCRIPTION: Returns the number of times that this request has
been explicitly retried by request.retry().
SAMPLE: $code = http.getResponseCode();
if( $code == 404 || 
   ( $code >= 500 && $code != 503 ) ) {
   # Not retrying 503s here, because they get retried
   # automatically before response rules are run
   if( request.getRetries() < 3 ) {
      # Avoid the current node when we retry,
      # if possible
      request.avoidNode( connection.getNode() );
      request.retry();
   }
}

TITLE: request.setToS
REPLACEDBY: request.setDSCP
SEEALSO: response.setToS, request.getToS
DESCRIPTION: NOTE: RFC 2474 has superceded IP ToS values with the DSCP field.
Sets the Type of Service (ToS) flags of traffic going to the server.
Valid options are "LOWDELAY", "THROUGHPUT", "RELIABILITY" or "NONE".  ToS
flags may be used by network equipment to change how they route network
traffic.
SAMPLE: request.setToS("LOWDELAY");
PARAMETERS: Type of Service

TITLE: response.get
SEEALSO: response.getLength, response.getLine, response.set, request.get
DESCRIPTION: Returns the first 'count' bytes of data
provided by the server in the current response. If you do
not supply a count parameter, then the entire response will
be read in.
Warning: you can stall a connection by asking it to read
more data than the back-end server will provide. Combine this
with response.getLength() or response.getLine() to reliably
read data from a connection. For HTTP, you must use 
the HTTP specific functions like http.getResponseBody() to read
the response.
SAMPLE: # Get the first 1K of data
   $data = response.get( 1024 );
PARAMETERS: [count]

TITLE: geo.getLocation
SEEALSO: geo.getLocationLonLat
DESCRIPTION: Returns the name of the location in which this traffic manager is based.
Note that traffic managers can be assigned to locations only when 
Stingray Multi-Site Cluster Management is enabled.
SAMPLE: # Run this part of the rule if the request was
   # sent to a traffic manager located in Cambridge
   if( geo.getLocation() == "Cambridge" ) {
      # ...
   }

TITLE: requestlog.markedForInclusion
SEEALSO: requestlog.include, requestlog.exclude, recentconns.markedForInclusion
DESCRIPTION: Returns whether or not this connection will be written either to the
disk-based request log or to the remote syslog upon completion.
Connections will be written to the request log only if
log!enabled or syslog!enabled is set to Yes for this virtual server and the
connection has been marked for inclusion either by default, or by
the requestlog.include() function.
SAMPLE: if( requestlog.markedForInclusion() ) {
     http.addResponseHeader( "X-Logged", "Yes" );
  }

TITLE: requestlog.include
SEEALSO: requestlog.exclude, recentconns.include
DESCRIPTION: Mark this connection to be added to the request log for this virtual server
when it has completed.
Note that log!enabled or syslog!enabled must be set to Yes on the virtual
server for any connections to be logged.
Returns true if the connection will be logged, or false otherwise.
SAMPLE: # Record when the server is particularly slow to
  # respond to a request
  if( stats.getServerResponseTime() > 5000 ){
     requestlog.include();
  }

TITLE: geo.getCountry
DESCRIPTION: Returns the country name of the supplied IPv4 address, or the empty string.
SAMPLE: # Get this IP's country, such as United States
   $country = geo.getCountry( "216.250.81.96" );
PARAMETERS: ip

TITLE: geo.getCity
DESCRIPTION: Returns the city of the supplied IPv4 address, or the empty string.
SAMPLE: # Get this IP's city, such as Santa Clara
   $city = geo.getCity( "216.250.81.96" );
PARAMETERS: ip

TITLE: log.error
SEEALSO: log.info, log.warn, event.emit
DESCRIPTION: Writes an error message to the traffic managers's event log file. This log
can be viewed through the UI.
SAMPLE: log.error( "Insert coffee to continue" );
PARAMETERS: message

TITLE: log.warn
SEEALSO: log.info, log.error, event.emit
DESCRIPTION: Writes a warning message to the traffic manager's event log file. This log
can be viewed through the UI.
SAMPLE: log.warn( "There may be trouble ahead" );
PARAMETERS: message

TITLE: response.getRemoteIP
SEEALSO: response.getRemotePort, response.getLocalIP, response.getLocalPort, request.getRemoteIP, request.getRemotePort, request.getLocalIP, request.getLocalPort
DESCRIPTION: Returns the remote IP address of the node used. If there is no current
connection, it will return an empty string.
SAMPLE: # Get the IP address of the node used, such as
   # "10.1.4.21" or "2001:200::8002:203:a:1:3085"
   $ip = response.getRemoteIP();

TITLE: connection.setBandwidthClass
REPLACEDBY: response.setBandwidthClass
SEEALSO: response.setBandwidthClass, request.setBandwidthClass
DESCRIPTION: Sets the bandwidth class
for the current connection to the client. Providing an empty
class name removes the bandwidth class from the
connection. It returns zero if an error occurs
(for example, if the bandwidth class does not exist),
and 1 otherwise.
SAMPLE: connection.setBandwidthClass( "gold customers" );
PARAMETERS: name

TITLE: pool.drainingnodes
SEEALSO: pool.activenodes, pool.listdrainingnodes
DESCRIPTION: Returns the number of nodes that are draining in the named pool.
SAMPLE: # Log connections to draining nodes
$pool = connection.getPool();
if( pool.drainingNodes( $pool ) ) {
   $node = connection.getNode();
   $ip_port = string.split( $node, ":" );
   if( pool.checknode( $pool, 
                       $ip_port[0],
                       $ip_port[1] ) 
                           == "DRAINING" ) {
      log.info($node." is disabled");
   }
}
PARAMETERS: Pool

TITLE: connection.discard
SEEALSO: connection.close, http.sendResponse
DESCRIPTION: Immediately closes the current connection and stops processing
rules. This is equivalent to the function call 'pool.use( "discard" )'.
SAMPLE: # Drop this connection NOW!
   connection.discard();

TITLE: connection.getRemoteIP
REPLACEDBY: request.getRemoteIP
SEEALSO: connection.getRemotePort, connection.getLocalIP, connection.getLocalPort
DESCRIPTION: Returns the remote IP address of the client.
SAMPLE: # Get the client's IP address, such as "1.2.3.4"
   $ip = connection.getRemoteIP();

TITLE: slm.conforming
SEEALSO: slm.threshold, slm.isOK
DESCRIPTION: Returns the current percentage of requests that
are meeting the Service Level Monitoring objectives.
If no class name is provided, it will use the SLM class currently
associated with this connection; if no SLM class is associated with
this connection, it returns 100.
SAMPLE: # If the Gold customers are starting to get slow,
 # gradually reroute other services...
 $conforming = slm.conforming( "gold requests" );
 if( ( $level == "bronze" && $conforming < 70 ) ||
     ( $level == "silver" && $conforming < 50 )) {
   # tell lower value customers to come back later to
   # reduce load on back-end node to ensure premium
   # customers get good response
   http.sendResponse( "302", "text/html", "",
      "Location: /toobusy.html" );
 }
 if( $conforming < 80 && $level != "gold" ) {
   # slow down rate of responding to non-premium
   # customers
   connection.sleep( 500 );
 }
PARAMETERS: [ class name ]

TITLE: connection.getRemotePort
REPLACEDBY: request.getRemotePort
SEEALSO: connection.getRemoteIP, connection.getLocalIP, connection.getLocalPort
DESCRIPTION: Returns the remote port of the client's connection.
SAMPLE: # Get the remote port number
   $port = connection.getRemotePort();

TITLE: connection.getCompletionReasonCode
SEEALSO: connection.getCompletionReasonInfo
DESCRIPTION: Returns a short string code describing the reason a particular
transaction completed. A list of the existing codes is given below.
Code
Description
COMPLETEThe transaction completed.
DISCARDED_BY_RULEThe transaction was ended by a TrafficScript rule.
CONFIG_CHANGEDThe transaction was purged due to a configuration change.
PARENT_CONNECTION_ENDEDThe transaction was purged as its parent connection ended.
CONNECTION_ERRORThere was a problem with the connection.
CONNECTION_CLOSED_SERVERThe connection was closed by the server.
CONNECTION_CLOSED_CLIENTThe connection was closed by the client.
TIMEOUT_NODE_QUEUENo node was available to handle the connection.
TIMEOUT_PROCESSING_RULEThe connection timed out while processing a TrafficScript rule.
TIMEOUT_PROCESSING_WAXThe connection timed out while Aptimizing a resource.
TIMEOUTThe connection timed out during client/server communication.
TIMEOUT_CONNECT_CLIENTThe connection timed out before receiving any data from the client.
TIMEOUT_CONNECT_SERVERThe connection timed out before receiving any data from the server.
TIMEOUT_MAXDURATIONThe total transaction duration was exceeded.
TIMEOUT_SIP_MAXDURATIONThe total SIP transaction duration was exceeded.
TIMEOUT_SIP_REQUESTTimed out waiting for a SIP response.
TIMEOUT_UDP_INACTIVEUDP connection was inactive for too long.
SESSION_PERSISTENCE_FAILUREFailed to find an appropriate node for session persistence.
NODE_LOSTThe connection's back-end node was lost.
SOCKET_LOSTThe connection's socket was lost.
WRITE_FAILUREFailed writing to connection socket.
BAD_REQUESTBad or malformed request.
BAD_RESPONSEBad or malformed response.
SIP_REQUEST_TOO_LARGEThe SIP request entity was too large.
INTERNAL_ERRORAn unexpected failure occurred.
SAMPLE: $reasonCode = connection.getCompletionReasonCode();
   if ( $reasonCode != "COMPLETE" ) {
      # Erroneous/interrupted transaction.
      recentconns.include();
   }

TITLE: net.dns.resolveHost
SEEALSO: net.dns.resolveIP, net.dns.resolveHost6
DESCRIPTION: Resolves a hostname into an IPv4
address, using the DNS name servers configured on the local
system. If the lookup fails, an empty string is returned.
SAMPLE: # Do a double-dns lookup
   $rip = request.getRemoteIP();
   $rhost = net.dns.resolveIP( $rip );
   $ip = net.dns.resolveHost( $rhost );
   if( $ip != $rip ) {
      log.warn( "Double lookup failed" );
   }
PARAMETERS: hostname

TITLE: connection.getData
REPLACEDBY: request.get
SEEALSO: connection.getDataLen
DESCRIPTION: Returns the first 'count' bytes of data provided by the client.
Warning: you can stall a connection by asking it to read
more data than the remote client will provide. Combine this
with connection.getDataLen() to reliably read data from a
connection.
SAMPLE: # Get the first 1K of data
   $data = connection.getdata( 1024 );
PARAMETERS: count

TITLE: request.endsAt
SEEALSO: request.endsWith
DESCRIPTION: Marks the end of the current request.  Any more data read
in from the network is not handled until the next request has
started to be handled.
This function is useful to synchronise requests and responses.  An example
of its use would be for a line-oriented protocol such as POP3, where
you wish to process each command.
It returns the entire request.
This function allows you to program layer-7 intelligence to correctly parse
and manage generic TCP protocols.
SAMPLE: # get one line from input
   $req = request.getLine();
# this is the end of the current request
   request.endsAt( string.len( $req ) );
# Note: request.endsAt will return the request,
   # but we've already got this in $req
PARAMETERS: offset

TITLE: response.append
SEEALSO: response.set
DESCRIPTION: Appends the provided string to the response data.
This is a low-level routine that should be used with care.
For protocols with their own higher-level protocol managers
(e.g. HTTP), you must use the higher level routines to alter the
input data (e.g. http.setResponseHeader() and http.setResponseBody()).
SAMPLE: response.append(
      "I always have to have the last word." );
PARAMETERS: response data

TITLE: http.kerberos.getPrincipal
SEEALSO: http.kerberos.setPrincipal
DESCRIPTION: Returns the name of the Kerberos principal catalog item that
is currently configured for use by the traffic manager when 
performing Kerberos Protocol Transition. 
If http.kerberos.setPrincipal was called, returns the value 
set by it, otherwise the value from the configuration will be 
returned if present.  The empty string will be returned in
the case of no configured principal name, or failure.
SAMPLE: $principal = http.kerberos.getPrincipal();
if( ! string.len( $principal ) ) {
   # Provide a user friendly error page
   http.redirect( "/error.html" );
}

TITLE: http.kerberos.setClientPrincipalName
SEEALSO: http.kerberos.getClientPrincipalName
DESCRIPTION: Sets the principal name to be used for this client in Kerberos
Protocol Transition.
SAMPLE: java.run( "com.example.GetClientPrincipal" );
$principal = 
   connection.data.get('KerberosClientPrincipal');  
http.kerberos.setClientPrincipalName( $principal );
PARAMETERS: PrincipalName

TITLE: http.kerberos.getDelegatedTicket
SEEALSO: http.kerberos.setClientPrincipalName
DESCRIPTION: Attempts to get a Kerberos ticket delegated to this client using
Protocol Transition, encoded for use in an Authorization header. Uses
the value returned by http.kerberos.getClientPrincipalName to identify
the client principal to be delegated to. If a pool has been set (with
pool.use, or in a response rule), uses the Kerberos Principal
Configuration set for that pool (if any), otherwise uses the one set
for the virtual server.
SAMPLE: $ticket = http.kerberos.getDelegatedTicket(); 
if ($ticket) {
   http.setHeader('Authorization',
                  'Negotiate ' . $ticket);
   request.retry();
}

TITLE: http.kerberos.getClientPrincipalName
SEEALSO: http.kerberos.setClientPrincipalName
DESCRIPTION: Return the principal name to be used for this client in Kerberos
Protocol Transition. If http.kerberos.setClientPrincipalName was
called, returns the value set by it, otherwise if a principal
name can be deduced from any client certificate, returns that.
The empty string will be returned in the case of no principal name, 
or failure.
SAMPLE: $principal = http.kerberos.getClientPrincipalName();
if( ! $principal ) {
   if( ssl.clientCertStatus() != "OK" &&
      ssl.clientSupportsSecureRenegotiation() ) {
      ssl.requestCert();
      $principal = 
         http.kerberos.getClientPrincipalName();
   }
   if( ! $principal ) {
      # Fall back to forms based authentication
      http.redirect( "/login.cgi" );
   }
}

TITLE: http.kerberos.setEnabled
SEEALSO: http.kerberos.isEnabled
DESCRIPTION: Explicitly specify whether Kerberos protocol transition 
should be used on the connection.  The value set will
override any configuration on the virtual server.
SAMPLE: $client = http.kerberos.getClientPrincipalName();
if( string.len( $client ) > 0 ) {
   http.kerberos.setEnabled( true );
}
PARAMETERS: Enabled

TITLE: http.kerberos.setTargetPrincipalName
SEEALSO: http.kerberos.getTargetPrincipalName
DESCRIPTION: Sets the principal name to be used for the target service for Kerberos
Protocol Transition.
SAMPLE: if( http.getResponseCode() == 401 ) {
   $node = connection.getNode();
   if( string.len( $node ) > 0 ) {
      http.kerberos.setTargetPrincipalName( 
            "HTTP/" . $node . "@EXAMPLE.COM" );
      $ticket = http.kerberos.getDelegatedTicket(); 
      if ($ticket) {
         http.setHeader( 'Authorization',
                         'Negotiate ' . $ticket );
         request.retry();
      }
   }
}
PARAMETERS: PrincipalName

TITLE: http.kerberos.setPrincipal
SEEALSO: http.kerberos.getPrincipal
DESCRIPTION: Sets the name of the Kerberos principal catalog item that is 
to be used for performing Kerberos Protocol Transition.
SAMPLE: if( geo.getLocation() == "Cambridge" ) {
   http.kerberos.setPrincipal( "Cambridge Realm" );
}
PARAMETERS: PrincipalCatalogItem

TITLE: http.kerberos.isEnabled
SEEALSO: http.kerberos.setEnabled
DESCRIPTION: Returns true if Kerberos protocol transition is currently 
enabled on the connection, otherwise false.
SAMPLE: $user = "";
$basic = http.getHeader( "Authorization" );
$failed_auth = ! string.startsWith( $basic,
                                   "Basic " );
if( ! $failed_auth ) { 
   string.skip( $basic, 6 );
   $dec = string.base64decode( $basic );
   $up = string.split( $dec, ":" );
   $user = $up[0]; $pass = $up[1];
   $auth = auth.query( "LDAP-Authenticator",
                       $user, $pass );
   $failed_auth = ! $auth['OK'];
}
if( $failed_auth ) {
   http.sendResponse( "401 Unauthenticated",
                      "text/plain",
                      "Authentication Required",
                      "WWW-Authenticate: ".
                      "Basic realm=\"YourRealm\""); 
} else {
   # If Kerberos Protocol Transition is enabled for
   # the connection, ensure the user name is used.
   if( http.kerberos.isEnabled() ) {      
      http.kerberos.setClientPrincipalName( $user );
   }
}

TITLE: http.kerberos.getTargetPrincipalName
SEEALSO: http.kerberos.setTargetPrincipalName
DESCRIPTION: Return the principal name to be used for the target service in Kerberos 
Protocol Transition. If http.kerberos.setTargetPrincipalName was called,
returns the value set by it, otherwise the value from the configuration
will be returned if present. The empty string will be returned in
the case of no configured principal name, or failure.
SAMPLE: $principal = http.kerberos.getTargetPrincipalName();
if( ! $principal ) {
   # Provide a user friendly error page
   http.redirect( "/error.html" );
}

TITLE: auth.query
DESCRIPTION: Queries the named authenticator for information about user
and, if supplied, checks that password matches the
password on record for that user.
Authenticators can be configured from the Catalog &gt; Authenticators
page of the Administration Server.
After looking up the user, this function will return a hash with
the following values set:
OK -
Set to true if the query was successful. Set to false if
the user could not be found, if the supplied password was
incorrect, or if the authenticator encountered a problem.
Error -
Set to an error message if the authenticator encountered a
problem, for example if it was unable to contact the authentication
server.
Authenticators can be configured to provide information about the
supplied user, for example the groups to which they belong.
This information will also be contained in the hash returned
by the auth.query() function.
SAMPLE: # Verify the user's password using an LDAP
   # authenticator called 'ldap'
   $auth = auth.query( "ldap", $user, $pass );
   if( $auth['Error'] ) {
      log.error(
         "Error with authenticator 'ldap': " .
         $auth['Error']
      );
      connection.discard();
   } else if( !$auth['OK'] ) {
      # Unauthorised
      http.sendResponse( "403 Permission Denied",
         "text/html", "Incorrect username or password",
         ""
      );
   }
# Allow through members of the 'admin' group using
   # the 'group' attribute returned by the authenticator
   if( $auth['group'] != "admin" ) {
      http.sendResponse( "403 Permission Denied",
         "text/html",
         "You do not have permission to view this page",
         ""
      );
   }
PARAMETERS: authenticator, user, [password]

TITLE: data.local.get
SEEALSO: data.local.set, data.local.remove, data.local.getMemoryUsage
DESCRIPTION: Returns the value that was previously stored with
the given key using data.local.set(), or returns the empty string if no
data was stored.
Values stored in this way are persistent; a value stored in
one rule can later be retrieved by a different rule handling
a different connection as long as it is handled by the same
child process. Thus, a rule can maintain persistent
state across connections. The value can be different or non-existent
on another child process.
data.local.get() and data.local.set() are useful for caching data
where coherence is not required.
SAMPLE: data.local.set( "count", 7 );
# In another rule or connection handled
   # by the same child process ...
   $value = data.local.get( "count" ); # Returns 7
PARAMETERS: key

TITLE: data.local.reset
SEEALSO: data.local.set, data.local.remove, data.local.getMemoryUsage, data.local.getMemoryFree
DESCRIPTION: Removes some or all of the mappings created by data.local.set().
With no arguments, it removes all keys. With a single argument, it
removes all keys that begin with the supplied string.
NOTE: Should you intend to delete a specific individual key,
data.local.remove() is more suited to this task. It offers greater
performance and also ensures there is no risk of
accidentally deleting other keys that start with the same string.
SAMPLE: # Free some memory if we've used too much
   if( data.local.getMemoryUsage() > 102400 ) {
      data.local.reset( "mappings-" );
   }
PARAMETERS: [prefix]

TITLE: data.local.set
SEEALSO: data.local.get, data.local.remove, data.local.getMemoryUsage
DESCRIPTION: Stores a value, associating it with
the provided key. The value can be retrieved later using
data.local.get(), even from a different rule or connection
processed by the same child process.
The value will be stored as a string, implicit conversion of
floating point numbers to strings can cause some precision
loss. You can convert a floating point number into a string with no
precision loss using 'string.sprintf( "%f", $val )'.
Arrays and hashes are serialised before storing and will be deserialised
into their original form when retrieved with data.local.get().
To prevent memory problems, there is an upper limit on the amount of data
that can be stored in the local TrafficScript data storage. This means that
the data.local.set() may fail. The upper limit can be configured using
trafficscript!data_local_size on the Global Settings page.
data.local.set() returns true if the entry was stored, or false if there
was no room.
SAMPLE: # Associate $value with $key for future retrieval
   data.local.set( $key, $value );
# Run this code only once:
   if( !data.local.get( "runonce" ) ) {
      # Do initialization
      # ...
      data.local.set( "runonce", 1 );
   }
PARAMETERS: key, value

TITLE: data.local.getMemoryFree
SEEALSO: data.local.set, data.local.reset, data.local.getMemoryUsage
DESCRIPTION: Returns the amount of free space, in bytes, available for storing
information with data.local.set().
If memory space is low, then data.local.reset() can be used to clear some or
all of the entries from the storage. Alternatively, the upper limit on
memory can be configured using trafficscript!data_local_size on the Global
Settings page.
SAMPLE: # If running low on storage, clear some temporary
   # data that other rules have stored.
   $bytes = data.local.getMemoryFree();
   if( $bytes < 1024 ) {
      data.local.reset( "temp-" );
   }

TITLE: data.local.getMemoryUsage
SEEALSO: data.local.set, data.local.reset, data.local.getMemoryFree
DESCRIPTION: Returns an estimate of the amount of
memory, in bytes, used by entries that have been stored by
data.local.set().
This can be used to verify if a rule is storing excessive
amounts of data, starving the host machine of memory.
SAMPLE: $bytes = data.local.getMemoryUsage();

TITLE: data.local.remove
SEEALSO: data.local.set, data.local.get, data.local.reset
DESCRIPTION: Removes the value that was previously associated with
the given key using data.local.set().
data.local.remove() returns 1 if the item did exist, or 0 if it was not
found.
SAMPLE: data.local.set( "cache-$url", $obj );
# In another rule or connection...
   data.local.remove( "cache-$url" );
PARAMETERS: key

TITLE: tcp.read
SEEALSO: tcp.connect, tcp.write, tcp.close
DESCRIPTION: Read data from a previously opened TCP connection. The function
waits until data is available on the TCP socket, and will then
return the available data (up to the specified 'maximum').  If an
error occurs an empty string will be returned and $1 will
contain an error message, or 0 if the connection has been closed.
An optional timeout can be specified in milliseconds. If a
no data has been read within this time the function
will return an empty string and $1 will be set to "timeout".
Note that if the Virtual Server connection times out before any data
has been read then the connection will terminated.
SAMPLE: # Read from a TCP socket, ensuring we get 1024 bytes
   $amount = 1024;
   $buf = '';
   while( string.len( $buf ) != $amount ) {
      $data = tcp.read( $sock, $amount - 
                        string.len( $buf ) );
   if( $data == "" ) {
          $buf = '';
          break;
      }
      $buf .= $data;
   }
PARAMETERS: socket, maximum, [timeout]

TITLE: tcp.close
SEEALSO: tcp.connect, tcp.write, tcp.read
DESCRIPTION: Close a previously opened TCP socket. A non-zero return value indicates
a successful close, if 0 is returned then an error occurred and an error
string will be in '$1'.
If a rule fails to close a TCP socket, it will be closed
automatically when the Virtual Server connection finishes.
SAMPLE: $sock = tcp.connect( "10.100.1.5", 7 );
   tcp.close( $sock );
PARAMETERS: sock

TITLE: tcp.write
SEEALSO: tcp.connect, tcp.read, tcp.close
DESCRIPTION: Writes all of the supplied data to a TCP socket. The function will
return the number of bytes written. If an error occurs then -1 will be
returned, and $1 will contain an error message.
An optional timeout can be specified in milliseconds. After this time
the number of bytes written will be returned, and $1 will contain the string
'timeout'.
Note that if the Virtual Server connection times out before the data
has been written then the connection will be terminated.
SAMPLE: $sock = tcp.connect( "10.100.1.5", 7 );
   tcp.write( $sock, "Ping\n" );
PARAMETERS: socket, data, [timeout]

TITLE: tcp.connect
SEEALSO: tcp.write, tcp.read, tcp.close
DESCRIPTION: Create a new TCP socket to the supplied IP address and port. This
function will return a socket handle that can be used by other tcp.*
functions.  The created TCP socket is unique to this connection, and
can't be used by other connections.
An optional timeout can be specified in milliseconds. If a
connection has not been established within this time the function
will return 0 and $1 will be set to "timeout".
Note that if the Virtual Server connection times out before this
socket has been established then the connection will be
terminated.
Returns 0 on error (with an error message in $1).
SAMPLE: $sock = tcp.connect( "::1", 3306 );
   if( ! $sock ) {
      log.error( "Error: " . $1 );
   }
PARAMETERS: ip, port, [timeout]

TITLE: udp.sendTo
SEEALSO: tcp.connect, tcp.write, tcp.read
DESCRIPTION: Send some data via UDP to ip:port.
If successful, returns the number of bytes written.  A return
value of -1 indicates a failure; in this case an error string will be stored
in '$1'.
SAMPLE: $res = udp.sendTo( "10.100.1.5", 82, "ping" );
if( $res == -1 ) {
   log.warn( "Error sending data: " . $1 );
}
PARAMETERS: host, port, data

TITLE: http.setQueryString
SEEALSO: http.getQueryString, http.setRawQueryString, http.getRawQueryString
DESCRIPTION: Replaces the query-string portion of the request URL with the supplied
replacement. Any control characters in the replacement are %-encoded.
SAMPLE: # Rewrite the query string
   http.setQueryString( $newqs );
PARAMETERS: querystring

TITLE: http.doesFormParamExist
SEEALSO: http.getFormParam, http.listFormParamNames, http.getFormParams
DESCRIPTION: Checks whether a form parameter is
present, either in the URL query string, or if not found and the
request is a POST, from the POST body data. It returns 1 if the
parameter is present, and 0 if not.
This is useful when there are form parameters with no value, e.g
a query string like 'foo=bar&amp;stuff&amp;x=y' - the 'stuff' parameter
has no value, but is present.
SAMPLE: # Did the user ask for fries with that?
   if( http.doesFormParamExist( "fries" ) ) {
      # Do something
   }
PARAMETERS: Parameter

TITLE: http.getHeaders
SEEALSO: http.getHeader, http.setHeader, http.addHeader, http.removeHeader, http.headerExists, http.getResponseHeaders, http.getHostHeader
DESCRIPTION: Returns a hash containing all the header names in the request
mapped to their values.
SAMPLE: # Show all the headers in the request
   $headers = http.getHeaders();
foreach( $header in hash.keys( $headers ) ) {
      log.info( $header . "=" . $headers[$header] );
   }

TITLE: http.getRequest
SEEALSO: http.listHeaderNames, http.getHeader, http.getBody
DESCRIPTION: Returns the full HTTP request and headers, but does not include any body
data.
SAMPLE: # Check that the request is not too big
  # for our servers
  $request = http.getRequest();
  if( string.len( $request ) > 2048 ) {
     http.sendResponse( "413 Request too large",
                        "text/plain",
                        "Request too large", "" );
  }

TITLE: http.setIdempotent
SEEALSO: request.setIdempotent
DESCRIPTION: Marks a request as resendable or non-resendable.
An idempotent request has no detrimental side
effects, so it can safely be submitted multiple times. A
simple page retrieval is generally idempotent. A
non-idempotent request has a side effect - for example, it
may update a database, or initiate a purchase. The HTTP/1.1
specification regards all GET, HEAD, PUT, DELETE, OPTIONS
and TRACE requests as idempotent.
Your traffic manager tags these requests as 'resendable'; if
the request is submitted to a back-end node and a correct response
is not received, your traffic manager will resubmit the request to
another back-end node. All other requests, such as POST requests are
not resent if a back-end node fails to generate a correct response.
http.setIdempotent() can override this behaviour. If
'resend' has a non-zero value, this indicates that if the
request is submitted to a back-end node and a correct
response is not received, your traffic manager should resubmit the
request to another back-end node.
If 'resend' is zero, this indicates that the request should
only be attempted against one back-end node.
Note that a request cannot be resent if it has begun
streaming data from the client to the node before it detects
the failure.  To avoid this, you can read the entire request
within the TrafficScript rule, so that it is buffered in
its entirety internally in the TrafficManager.
SAMPLE: # This request can be resent
   if( http.getMethod() == "POST" ) {
      # Force the Stingray Traffic Manager
      # to read the entire HTTP body
      http.getBody();
      # Mark this request as resendable
      http.setIdempotent( 1 );
   }
PARAMETERS: resend

TITLE: http.getResponseBody
SEEALSO: http.setResponseBody, http.getBody
DESCRIPTION: Returns the body of the HTTP response.
If the response has chunked transfer encoding this function will
return the de-chunked body. Similarly if the response is gzip or
deflate compressed the body will be returned uncompressed.
If the optional 'count' parameter is provided, http.getResponseBody()
will read and return the first 'count' bytes of the response.  If
count is 0, http.getResponseBody() will return the entire response.
SAMPLE: # Read the entire response body
   $body = http.getResponseBody();
PARAMETERS: [count]

TITLE: http.listResponseHeaderNames
SEEALSO: http.getResponseHeader, http.removeResponseHeader, http.getResponse, http.listHeaderNames
DESCRIPTION: Returns a list of all the headers that
are present in the response.
The headers are returned as an array.
SAMPLE: # Log all of the header names and values
   $headers = http.listResponseHeaderNames();
   foreach( $header in $headers ) {
      log.info($header . "=" . http.getHeader($header));
   }

TITLE: http.setEscapedPath
SEEALSO: http.getPath, http.setPath, http.setRawPath
DESCRIPTION: Replaces the path portion of the request URL
with the supplied value. If the replacement value contains a
'?', this function will also replace the query string;
otherwise, any query string is preserved. Characters 
whose ASCII value is less than or equal to 32 and '%' will be
%-encoded in the replacement value.
SAMPLE: # Make customer buy widget:
   http.setEscapedPath( "/purchase?product=widget" );
PARAMETERS: url

TITLE: http.setMethod
SEEALSO: http.getMethod
DESCRIPTION: Sets the HTTP method, changing the original request.
SAMPLE: # Force HTTP POSTs to GETs
   if( http.getMethod() == "POST" ) {
      http.setBody( "" );
      http.setMethod( "GET" );
   }
PARAMETERS: method

TITLE: http.getHeader
SEEALSO: http.getHeaders, http.setHeader, http.addHeader, http.removeHeader, http.headerExists, http.getResponseHeader, http.getHostHeader, http.getHeaders
DESCRIPTION: Returns the value of a named HTTP header in the HTTP request,
or the empty string if the header does not exist or has an
empty value. The lookup is case-insensitive.
SAMPLE: # Get the browser name and version
   $browser = http.getHeader( "User-Agent" );
# this returns the same value
   $browser = http.getHeader( "user-agent" );
PARAMETERS: name

TITLE: http.getVersion
SEEALSO: http.getResponseVersion
DESCRIPTION: Returns the version of the HTTP protocol being
used. It returns the version string in the first line of the HTTP
request, such as "HTTP/1.1". It will return the empty string in the
case of HTTP/0.9, which does not have a version specifier in the
request.
SAMPLE: # Get the HTTP version
   $version = http.getVersion();

TITLE: http.getRawURL
SEEALSO: http.getPath, http.getQueryString, http.getRawQueryString, string.unescape, http.normalizePath
DESCRIPTION: Returns the raw (non-decoded) URL data provided by the client in
the first line of the HTTP request, after the method and before the
HTTP version specifier.
The raw URL data includes both the path and query string if
supplied and is not decoded. It may also contain the protocol and
hostname if the client sent them.  It could contain %-escaped
characters that can be used to disguise the contents of the
URL. Use http.getPath() or http.getQueryString() to return the
%-decoded version of the path or query string.
This function could return raw urls of various forms including:
http://www.example.com/file.html
/file.html
/path/../file.html
/file.html?querystring
/file.html?qs%encoded
You can use http.normalizePath() on the path component to
remove any '/../' or '/./' references.
In general it is better to use http.getPath() and
http.getQueryString() to avoid the need to process the raw url.
SAMPLE: $rawurl = http.getRawURL();
   if( string.contains( $rawurl, "%00" ) ) {
      # Something suspicious here ...
      connection.discard();
   }

TITLE: http.request.delete
SEEALSO: http.request.get, http.request.post, http.request.put, http.request.head
DESCRIPTION: Issues an HTTP DELETE request for a remote web
page. $1 is set to the HTTP response code (e.g. 204 for OK), or is
0 if there was an error. $2 is set to the Content-Type of the
response (or an error message if there was an error).  $3 is set to
the content-headers of the response, in the format:
[&lt;header-line&gt;\r\n]*.  $4 is set to the first line of the HTTP
response.  The entire original response may be reconstructed as
$4."\r\n".$3."\r\n".$body, where $body is the result of
http.request.get.
HTTPS pages can be requested by using the https:// prefix
for the url.
A timeout parameter can be given (in seconds). If the request
does not complete in this time, then an error will be given instead.
Requests made with http.request.delete() will use keepalive
connections to the destination server.  Provided the request was
completed successfully, these keepalive connections will be re-used
by any invocation of http.request.delete(), http.request.head() or
http.request.get() to the same destination host:port, from any rule,
in any virtual server.  If the request is to a node in a pool, the
connection will be shared with other requests your traffic manager
makes to the same node. If the request made with http.request.delete()
was unsuccessful, your traffic manager closes the connection.
SAMPLE: # Delete a resource from the server
   $book_id = http.getHeader( "X-Book-ID" );
   http.request.delete( "http://www.example.com/books/"
                       . $book_id );
   if( $1 != 204 ) {
      http.sendResponse( $1, "text/plain", "",
         "Could not delete book " . $book_id );
   }
PARAMETERS: url, [ headers ], [ timeout ]

TITLE: http.getResponseBodyLines
SEEALSO: http.setResponseBody, http.getBodyLines
DESCRIPTION: Splits the body data of the HTTP request into individual lines and
returns an array of the data.
If the response has chunked transfer encoding this function will
return the de-chunked body. Similarly if the response is gzip or
deflate compressed the body will be returned uncompressed.
If the optional 'count' parameter is provided, http.getResponseBodyLines()
will read and return the first 'count' bytes of the response.  If
count is 0, http.getResponseBodyLines() will return the entire response.
SAMPLE: # Read the entire response body
   $body = http.getResponseBodyLines();
PARAMETERS: [count]

TITLE: http.getQueryString
SEEALSO: http.setQueryString, http.getRawQueryString, http.setRawQueryString, http.getRawURL
DESCRIPTION: Returns the %-decoded query string in the URL, or the empty string if no
query string was provided.
SAMPLE: # Was there a query string?
   $qs = http.getQueryString();
   if( $qs ) {
      # Handle query string ...
   }

TITLE: http.getPath
SEEALSO: http.setPath, http.getRawURL, http.getQueryString, http.getRawQueryString, http.normalizePath
DESCRIPTION: Returns the %-decoded path in the HTTP
request URL, stripping the query string if one was provided.
If there is a leading scheme and authority prefix, this is
removed as well, so the URL
"http://www.example.com/content?page=44" will be returned as
"/content".
If a %-encoded value is found, which isn't valid hexadecimal (for
example, %G), this isn't converted or removed, but instead the '%'
character is replaced by a '_' character, since malformed %-encoded
values could be used as part of a malicious attack to fool security
checks against particular URLs.
SAMPLE: # Retrieve the path
   $path = http.getPath();

TITLE: http.stream.writeResponse
SEEALSO: http.stream.startResponse, http.stream.readBulkResponse, http.stream.readResponse, http.stream.finishResponse, http.sendResponse
DESCRIPTION: Sends the data in the 'data' argument to the
client.  http.stream.writeResponse() can be called multiple times but
http.stream.startResponse() must have been called beforehand.
SAMPLE: http.stream.startResponse(
    "200", "text/html", "", "Server: Stingray");
while( 1 ) {
    # read full lines but at most 4k of data:
    $data = http.stream.readBulkResponse( 4096, "\n" );
    if( $data == "" )
      break; # server has finished the response
    # invert server's logic:
    $data = string.replaceAllI( $data, "yes", "no" );
    http.stream.writeResponse( $data );
  }
http.stream.finishResponse();
PARAMETERS: data

TITLE: http.request.head
SEEALSO: http.request.get, http.request.post, http.request.put, http.request.delete
DESCRIPTION: Issues an HTTP HEAD request for a remote web
page. $1 is set to the HTTP response code (e.g. 200 for OK), or is
0 if there was an error. $2 is set to the Content-Type of the
response (or an error message if there was an error).  $3 is set to
the content-headers of the response, in the format:
[&lt;header-line&gt;\r\n]*.  $4 is set to the first line of the HTTP
response.  The entire original response may be reconstructed as
$4."\r\n".$3."\r\n".$body, where $body is the result of
http.request.get.
HTTPS pages can be requested by using the https:// prefix
for the url.
A timeout parameter can be given (in seconds). If the request
does not complete in this time, then an error will be given instead.
Requests made with http.request.head() will use keepalive
connections to the destination server.  Provided the request was
completed successfully, these keepalive connections will be re-used
by any invocation of http.request.head() or http.request.get() to
the same destination host:port, from any rule, in any virtual
server.  If the request is to a node in a pool, the connection will
be shared with other requests your traffic manager makes to the same node.
If the request made with http.request.head() was unsuccessful, your traffic
manager closes the connection.
SAMPLE: # Check that this site is working
   http.request.head( "http://www.example.com/" );
   if( $1 != 200 ) {
      pool.use( "Backup site" );
   }
PARAMETERS: url, [ headers ], [ timeout ]

TITLE: http.setRawQueryString
SEEALSO: http.getRawQueryString, http.setQueryString, http.getQueryString
DESCRIPTION: Replaces the query-string portion of the
request URL with the supplied replacement. Unlike
http.setQueryString, control characters are not encoded.
SAMPLE: # Rewrite the query string
   http.setRawQueryString( "foo=%20bar" );
PARAMETERS: querystring

TITLE: http.getHostHeader
SEEALSO: http.getHeader
DESCRIPTION: Returns the HTTP Host header. This value is lowercased
and has the port removed. Any trailing full stop is also removed.
For example if the Host header is 'www.Riverbed.com:80' then
http.getHostHeader() returns 'www.riverbed.com'.
SAMPLE: # Get the unambiguous Host header
   $hostheader = http.getHostHeader();

TITLE: http.setResponseHeader
SEEALSO: http.addResponseHeader, http.getResponseHeader, http.removeResponseHeader, http.setHeader
DESCRIPTION: Sets a HTTP header in the HTTP
response that will be sent back to the client. If the header
already exists in the response, then it will be replaced
with this new value.  The header lookup is case-insensitive.
Note that this function should not be used with the
Connection header, i.e. setResponseHeader("Connection", value)
since it may not give the expected results.
SAMPLE: # Change the server string
   http.setResponseHeader( "Server",
      "Stingray" );
PARAMETERS: name, value

TITLE: http.getCookie
SEEALSO: http.getCookies, http.setCookie, http.removeCookie, http.getResponseCookie
DESCRIPTION: Returns the named cookie in the incoming HTTP request.
http.getCookie is a helper method that makes it easier to parse
the HTTP Cookie header and extract the values of that
particular cookie, rather than using http.getHeader()
directly.
An HTTP 'Cookie' header can have multiple values, such as
&nbsp;&nbsp;Cookie: user-id=Joe; user-type=gold
http.getCookie( ... ) will retrieve the 'Cookie' header line
and parse it, returning the value of the cookie. If the
cookie does not exist, http.getCookie() will return the
empty string.
SAMPLE: # Get the PHP session cookie
   $cookie = http.getCookie( "PHPSESSIONID" );
PARAMETERS: name

TITLE: http.listFormParamNames
SEEALSO: http.getFormParam, http.doesFormParamExist
DESCRIPTION: Returns an array containing the names of all the form parameters present in
the URL query string and, if the request is a POST, in the POST body
data.
If the same parameter appears multiple times in the request, it
will only appear once in the list returned by this function.
SAMPLE: # Log all of the form parameters and values
   $params = http.listFormParamNames();
   foreach( $param in $params ) {
      log.info($param . "=" .
               http.getFormParam($param, ","));
   }

TITLE: http.cookie
REPLACEDBY: http.getCookie
SEEALSO: http.getCookie
DESCRIPTION: Returns the value of the named cookie.
SAMPLE: # Get the PHP session cookie
   $cookie = http.getCookie( "PHPSESSIONID" );
PARAMETERS: name

TITLE: http.compress.disable
SEEALSO: http.compress.enable
DESCRIPTION: Stops this HTTP response from being
compressed.  This function overrides the Virtual Server Content
Compression settings, so this is useful for stopping particular
MIME types for certain browsers from being compressed.
SAMPLE: # Don't compress text/css pages
     if( $contenttype == "text/css" ) {
         http.compress.disable();
     }

TITLE: http.cache.enable
SEEALSO: http.cache.disable, http.cache.setkey
DESCRIPTION: Performs the opposite function to
http.cache.disable(), and re-enables the default caching behaviour
when the dynamic caching option in the virtual server is enabled.
SAMPLE: # only cache what we explicitly enable
http.cache.disable();  # turn off everything
if( $agent == "googlebot" || $is_app1 ) {
   http.cache.enable();
}

TITLE: http.normalizePath
SEEALSO: http.getPath
DESCRIPTION: Flattens a decoded URL path, converting
'//' to '/', '/./' to '/', and flattening '/a/../' to '/'.
It returns the flattened path string.
If the file system path is invalid, this function returns the empty
string. Invalid paths include those that contain disallowed
characters like '\0', invalid hex-escapes, or that use '../'
sequences to reference a location outside the local root.
This function should be used on the retrieved URL before
attempting path matching for access control. Remember to pass in
a %-decoded URL path, to prevent disguised paths and control codes
from being 'hidden' in the path.
SAMPLE: # Check for access to /secure
   $path = http.normalizePath( http.getPath() );
   if( !$path ) {
      # bad path ...
   } else if( string.startsWith( $path, "/secure" ) ) {
      # request to restricted area: check credentials
   }
PARAMETERS: url

TITLE: http.cache.exists
SEEALSO: http.cache.enable, http.cache.disable, http.cache.respondIfCached, pool.select
DESCRIPTION: Returns 1 if the current request can (currently) be responded to
from the cache, otherwise 0.  Note that even if the request is
in the cache at the time of this call, it may be removed from the
cache by the time that TrafficScript processing has finished and the
traffic manager can send it. If a cached response must be
guaranteed, http.cache.respondIfCached() should be used.   A
pool name can be provided as optional argument in order to make the
lookup use the specified pool.  Without this argument, the lookup
will use the pool previously selected with pool.select or the
virtual server's default pool.   This function always returns 0
if called in a response rule.
SAMPLE: # Use a rate class only if the page is going to be
   # served from the backend.
   if( !http.cache.exists() ) {
      # The page cannot be served from the cache.
      # The traffic manager will have to get the page
      # from a back-end server, so rate-limit the
      # connection:
      rate.use( "rate" );
   }
PARAMETERS: [poolname]

TITLE: http.getResponseHeaders
SEEALSO: http.getResponseHeader, http.setResponseHeader, http.addResponseHeader, http.removeResponseHeader, http.responseHeaderExists, http.getHeaders
DESCRIPTION: Returns a hash containing all the header names in the response
mapped to their values.
SAMPLE: # Show all the headers in the response
   $headers = http.getResponseHeaders();
foreach( $header in hash.keys( $headers ) ) {
      log.info( $header . "=" . $headers[$header] );
   }

TITLE: http.stream.readResponse
SEEALSO: http.stream.readBulkResponse, http.getResponseBody, http.stream.writeResponse, http.stream.finishResponse, http.stream.startResponse
DESCRIPTION: Similar to http.stream.readBulkResponse(), but only returns response body
data up to and including the first occurrence of delimiter.  The
two functions behave identically if no delimiter is provided.
SAMPLE: http.stream.startResponse(
    "200", "text/html", "", "Server: Stingray" );
while( 1 ) {
    # read full line but at most 4k of data:
    $data = http.stream.readResponse( 4096, "\n" );
    if( $data == "" )
      break; # server has finished the response
    # invert server's logic:
    $data = string.replaceAllI( $data, "yes", "no" );
    http.stream.writeResponse( $data );
  }
http.stream.finishResponse();
PARAMETERS: count, [delimiter]

TITLE: http.listHeaderNames
SEEALSO: http.getHeader, http.removeHeader, http.getRequest, http.listResponseHeaderNames
DESCRIPTION: Returns a list of all the headers that
are present in the request.
The headers are returned as an array.
SAMPLE: # Log all of the header names and values
   $headers = http.listHeaderNames();
   foreach( $header in $headers ) {
      log.info($header . "=" . http.getHeader($header));
   }

TITLE: http.request.ssl.get
SEEALSO: http.request.get
DESCRIPTION: Issues an HTTPS request for a remote web page and returns the body
of the page requested. Its behavior is identical to that of
http.request.get when used with an HTTPS URL except for the
following differences:
The URL must start with 'https://', e.g https://www.iana.org,
i.e. this function can only be used for secure communication.
http.request.ssl.get will verify the server's certificate
during the SSL Handshake.  It will do so using the CA certificates
provided in the second argument.  This argument has to be an array
of certificates.  Certificates must be provided in PEM format.  If
one of the provided strings is not a valid certificate in PEM
format, or if the array is empty, the function will fail.
Therefore, verification of the peer's certificate is
mandatory.
Kept-alive connections are not re-used.
SAMPLE: $issuer = '-----BEGIN CERTIFICATE-----
MIIE3jCCA8agAwIBAgICAwEwDQYJKoZIhvcNAQEFBQAwYzELMA
kGA1UEBhMCVVMxITAfBgNVBAoTGFRoZSBHbyBEYWRkeSBHcm91
cCwgSW5jLjExMC8GA1UECxMoR28gRGFkZHkgQ2xhc3MgMiBDZX
J0aWZpY2F0aW9uIEF1dGhvcml0eTAeFw0wNjExMTYwMTU0Mzda
Fw0yNjExMTYwMTU0MzdaMIHKMQswCQYDVQQGEwJVUzEQMA4GA1
UECBMHQXJpem9uYTETMBEGA1UEBxMKU2NvdHRzZGFsZTEaMBgG
A1UEChMRR29EYWRkeS5jb20sIEluYy4xMzAxBgNVBAsTKmh0dH
A6Ly9jZXJ0aWZpY2F0ZXMuZ29kYWRkeS5jb20vcmVwb3NpdG9y
eTEwMC4GA1UEAxMnR28gRGFkZHkgU2VjdXJlIENlcnRpZmljYX
Rpb24gQXV0aG9yaXR5MREwDwYDVQQFEwgwNzk2OTI4NzCCASIw
DQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMQt1RWMnCZM7D
I161+4WQFapmGBWTtwY6vj3D3HKrjJM9N55DrtPDAjhI6zMBS2
sofDPZVUBJ7fmd0LJR4h3mUpfjWoqVTr9vcyOdQmVZWt7/v+WI
bXnvQAjYwqDL1CBM6nPwT27oDyqu9SoWlm2r4arV3aLGbqGmu7
5RpRSgAvSMeYddi5Kcju+GZtCpyz8/x4fKL4o/K1w/O5epHBp+
YlLpyo7RJlbmr2EkRTcDCVw5wrWCs9CHRK8r5RsL+H0EwnWGu1
NcWdrxcx+AuP7q2BNgWJCJjPOq8lh8BJ6qf9Z/dFjpfMFDniNo
W1fho3/Rb2cRGadDAW/hOUoz+EDU8CAwEAAaOCATIwggEuMB0G
A1UdDgQWBBT9rGEyk2xF1uLuhV+auud2mWjM5zAfBgNVHSMEGD
AWgBTSxLDSkdRMEXGzYcs9of7dqGrU4zASBgNVHRMBAf8ECDAG
AQH/AgEAMDMGCCsGAQUFBwEBBCcwJTAjBggrBgEFBQcwAYYXaH
R0cDovL29jc3AuZ29kYWRkeS5jb20wRgYDVR0fBD8wPTA7oDmg
N4Y1aHR0cDovL2NlcnRpZmljYXRlcy5nb2RhZGR5LmNvbS9yZX
Bvc2l0b3J5L2dkcm9vdC5jcmwwSwYDVR0gBEQwQjBABgRVHSAA
MDgwNgYIKwYBBQUHAgEWKmh0dHA6Ly9jZXJ0aWZpY2F0ZXMuZ2
9kYWRkeS5jb20vcmVwb3NpdG9yeTAOBgNVHQ8BAf8EBAMCAQYw
DQYJKoZIhvcNAQEFBQADggEBANKGwOy9+aG2Z+5mC6IGOgRQjh
VyrEp0lVPLN8tESe8HkGsz2ZbwlFalEzAFPIUyIXvJxwqoJKSQ
3kbTJSMUA2fCENZvD117esyfxVgqwcSeIaha86ykRvOe5GPLL5
CkKSkB2XIsKd83ASe8T+5o0yGPwLPk9Qnt0hCqU7S+8MxZC9Y7
lhyVJEnfzuz9p0iRFEUOOjZv2kWzRaJBydTXRE4+uXR21aITVS
zGh6O1mawGhId/dQb8vxRMDsxuxN89txJx9OjxUUAiKEngHUuH
qDTMBqLdElrRhjZkAzVvb3du6/KFUJheqwNTrZEjYx8WnM25sg
VjOuH0aBsXBTWVU+4=
-----END CERTIFICATE-----';
$body = http.request.ssl.get(
                            "https://www.iana.org",
                            [ $issuer ]
                            );
if( $1 ) {
   http.sendResponse( $1, $2, $body, "" );
} else {
   log.info( "An error occurred: " . $2 );
}
PARAMETERS: url, ca_certificates, [ headers ], [ timeout ]

TITLE: http.stream.readBulkResponse
SEEALSO: http.stream.readResponse, http.getResponseBody, http.stream.writeResponse, http.stream.finishResponse, http.stream.startResponse
DESCRIPTION: Reads (and consumes) data from the server, so that TrafficScript can
manipulate the data and send a modified version to the client.
Reads the number of bytes specified by 'count' from the body of the HTTP
response supplied by the server.  Data from the response is only returned
up to and including the last occurrence of 'delimiter' if a
non-empty delimiter has been specified.  Unlike http.getResponseBody(),
it also removes the data returned from the server's response.  When the
end of the response from the server has been reached, an empty string is
returned.
If the delimiter partially matches at the end of the specified
number of bytes, the data returned will include the full delimiter
(thus returning slightly more data than specified). If the
delimiter is not found in the specified number of bytes, then the
specified number of bytes of data will be returned.
SAMPLE: # Stream a HTTP response back, changing the content
  # as it is read in.
  http.stream.startResponse(
    "200", "text/html", "", "Server: Stingray" );
while( 1 ) {
    # read several full lines but at most 4k of data:
    $data = http.stream.readBulkResponse( 4096, "\n" );
    if( $data == "" )
      break; # server has finished the response
    # invert server's logic:
    $data = string.replaceAllI( $data, "yes", "no" );
    http.stream.writeResponse( $data );
  }
http.stream.finishResponse();
PARAMETERS: count, [delimiter]

TITLE: http.cache.respondIfCached
SEEALSO: http.cache.enable, http.cache.disable, http.cache.exists, pool.select
DESCRIPTION: Sends a cached response to the client without any further rule
processing and without connecting to a back-end server.  If no match
is found in the cache or if the request does not allow cached
responses, rule processing continues normally.  If the response can
be served from the cache, no statements after this function call
will be processed and the client will get the cached page.   A
pool name can be provided as optional argument in order to make the
lookup use the specified pool.  Without this argument, the lookup
will use the pool previously selected with pool.select or the
virtual server's default pool.   This function does nothing if
called in a response rule.
SAMPLE: # Use a rate class only if the page is going to be
   # served from the backend.
   http.cache.respondIfCached();
   #
   # If we get here, the page could not be served
   # from the cache.  The traffic manager will have
   # to get the page from a back-end server, so
   # rate-limit the connection:
   rate.use( "rate" );
PARAMETERS: [poolname]

TITLE: http.scrubRequestHeaders
SEEALSO: http.removeHeader, http.scrubResponseHeaders
DESCRIPTION: Limits the allowed HTTP request
headers to a known set. The allowed headers can either be passed in
as a list or space separated in a single argument.
Care should be taken when using this function to ensure that
the headers that are required for connection handling are let
through. At the very least, the following should be allowed:
Connection, Content-Length, Transfer-Encoding, Content-Type, Host
For a complete list of HTTP headers, refer to RFC2616. Protocols
that extend HTTP, such as WebDAV, use other headers.
SAMPLE: # Remove all headers, except the Connection,
   # Content-Type, Transfer-Encoding, Content-Length
   # and Host headers.
# These 2 examples are identical
http.scrubRequestHeaders( "Host",
      "Connection", "Content-Type",
      "Transfer-Encoding", "Content-Length" );
http.scrubRequestHeaders(
      "host connection content-type transfer-encoding".
      " content-length" );
PARAMETERS: header1, header2, ...

TITLE: http.compress.enable
SEEALSO: http.compress.disable
DESCRIPTION: Allows this individual HTTP response to be
compressed.  If this function is called for an HTTP response, then
the Virtual Server settings for Content Compression are ignored,
and the response will be compressed, assuming that the client
supports compression.
This function return 0 if it successfully enables compression
SAMPLE: # Compress all text pages for Gecko
     if( string.startswith( $contenttype, "text/" ) &&
         string.contains( $useragent, "Gecko" ) ) {
    http.compress.enable();
     }

TITLE: http.removeResponseHeader
SEEALSO: http.setResponseHeader, http.getResponseHeader, http.addResponseHeader, http.scrubResponseHeaders, http.removeHeader
DESCRIPTION: Removes the named HTTP header
from the HTTP response. The header lookup 
is case-insensitive.
SAMPLE: # Remove the 'Location' response header
   http.removeResponseHeader( "Location" );
PARAMETERS: name

TITLE: http.getRawQueryString
SEEALSO: http.setRawQueryString, http.getQueryString, http.setQueryString, http.getRawURL
DESCRIPTION: Returns the raw (non %-decoded) query string in the URL, or the empty
string if no query string was provided.
SAMPLE: # Was there a query string?
   $qs = http.getRawQueryString();
   if( $qs ) {
      # Handle query string ...
   }

TITLE: http.removeResponseCookie
SEEALSO: http.getResponseCookie, http.setResponseCookie, http.removeCookie
DESCRIPTION: Removes a cookie from the HTTP response.
This function should be called in a response rule; it has no effect in a request rule.
SAMPLE: # Remove the 'Priority' cookie
   http.removeResponseCookie( "Priority" );
PARAMETERS: name

TITLE: http.getResponseCode
SEEALSO: http.setResponseCode
DESCRIPTION: Returns the status code from the first line of the HTTP response.
SAMPLE: # Log 404 responses
   if( http.getResponseCode() == 404 ) {
      log.info( "404 page for " . http.getPath() );
   }

TITLE: http.sendResponse
SEEALSO: connection.close, connection.discard
DESCRIPTION: Hands back an HTTP response to the client instead of balancing the request
via a pool onto a node. It generates a correct HTTP response from the
response code, content type, body data and headers supplied.  Multiple
headers should be separated with \r\n (note, however, that your traffic
manager may override some of these headers, e.g. the 'Connection' header).
For more sophisticated behaviour (for example, compressing responses using
http.compress.enable) the http.stream.* methods should be used to respond
to a client.
SAMPLE: # Deny access and close connection
   http.sendResponse( "403 Permission Denied",
            "text/html", "Go away",
            "Set-Cookie: denied=Yes\r\nX-Foo: Bar");
PARAMETERS: code, type, body, headers

TITLE: http.responseHeaderExists
SEEALSO: http.getResponseHeader
DESCRIPTION: Reports if a named header
exists in the HTTP response. It is similar to
http.getResponseHeader(), but makes it possible to
distinguish between a header not being present and a header
having no value.
Header lookups are case-insensitive.
It returns 1 if the header exists, and 0 if it does not.
SAMPLE: if( http.responseHeaderExists( "Location" ) ) {
      # Web server is redirecting user to
      # another location
   }
PARAMETERS: name

TITLE: http.getBody
SEEALSO: http.getBodyLines, http.setBody, http.getResponseBody, http.getFormParams, http.listFormParamNames
DESCRIPTION: Returns the body data of the request. HTTP clients use the body data for
sending file uploads or for HTML form parameters.
If the optional 'count' parameter is supplied, http.getBody()
will only read and return this number of bytes.  If count is 0,
http.getBody() returns the entire request.
If the request has no body, then this returns an empty string.
http.getBody() will work in a response rule only if the entire request
was read before the request rules completed (for example, if another
call to http.getBody() was made in a request rule). Otherwise, request data
will have been streamed to the server and not cached. If the request data
is not available, this function will return the empty string.
This function is not usable in response rules, as the body data of
the request will no longer be accessible.
To read HTML form parameters, it is easier to use http.getFormParam()
as that will work for GET and POST requests.
SAMPLE: # Read the entire request body
   $body = http.getBody();
PARAMETERS: [count]

TITLE: http.setBody
SEEALSO: http.getBody, http.setResponseBody
DESCRIPTION: Sets the request body for this HTTP request
to the supplied string, replacing any request body already
present.
This also updates the 'Content-Length' header in the request
to the length of the new body data.
SAMPLE: # Change the order!
   $body = http.getBody();
   $body = string.regexsub( $body, "Buy", "Sell", "g" );
   http.setBody( $body );
PARAMETERS: body

TITLE: http.getFormParams
SEEALSO: http.getFormParam, http.doesFormParamExist, http.listFormParamNames
DESCRIPTION: Returns a hash mapping the names of all the form parameters present in
the URL query string and, if the request is a POST, in the POST body
data to their values.
If the same parameter appears multiple times in the request then it will
be mapped to an array of values in the hash that is returned by this function.
SAMPLE: # Log all of the form parameters and values
   $params = http.getFormParams();
   foreach( $param in hash.keys( $params ) ) {
      $values = $params[$param];
      if( lang.isArray( $values ) ) {
         log.info($param . "=" .
                  array.join( $values, ", " )
                 );
      } else {
         log.info($param . "=" . $values);
      }
   }

TITLE: http.getMethod
SEEALSO: http.setMethod
DESCRIPTION: Returns the HTTP method that was used to make the request, such as GET or
POST.
SAMPLE: # Was this an HTTP POST?
   if( http.getMethod() == "POST" ) {
      # handle POST request ...
   }

TITLE: http.redirect
SEEALSO: http.sendResponse, http.changeSite
DESCRIPTION: Sends back a HTTP 302 redirect response, which will
send a web browser to a different URL. This is equivalent to
http.sendResponse( "302 Moved Temporarily", "text/html", "",
"Location: " . $url );
SAMPLE: # Redirect all 404 error pages to our front page
   if( http.getResponseCode() == 404 ) {
      http.redirect( "http://www.riverbed.com/" );
   }
PARAMETERS: address

TITLE: http.stream.finishResponse
SEEALSO: http.stream.startResponse, http.stream.readBulkResponse, http.stream.readResponse, http.stream.writeResponse, http.sendResponse
DESCRIPTION: Indicates that 'data' is
the last block to be streamed for the current transaction.  Rule
processing will stop after http.stream.finishResponse() has been
called, i.e. the remaining statements of the present rule will not
be evaluated and no subsequent rules will be run.
SAMPLE: http.stream.startResponse(
    "200", "text/html", "", "Server: Stingray");
  while( 1 ) {
    # read full lines but at most 4k of data:
    $data = http.stream.readBulkResponse( 4096, "\n" );
    if( $data == "" )
      break; # server has finished the response
    # invert server's logic:
    $data = string.replaceAllI( $data, "yes", "no" );
    http.stream.writeResponse( $data );
  }
  http.stream.finishResponse();
PARAMETERS: [data]

TITLE: http.setRawPath
SEEALSO: http.getPath, http.setPath, http.setEscapedPath
DESCRIPTION: Replaces the path portion of the request URL
with the supplied value. If the replacement value contains a
'?', this function will also replace the query string;
otherwise, any query string is preserved.
URL will not be %-encoded.
SAMPLE: # Make customer buy widget:
   http.setRawPath( "/purchase?product=widget" );
PARAMETERS: url

TITLE: http.scrubResponseHeaders
SEEALSO: http.removeResponseHeader, http.scrubRequestHeaders
DESCRIPTION: Limits the allowed HTTP response
headers to a known set. The allowed headers can either be passed in
as a list or space separated in a single argument.
Care should be taken when using this function to ensure that
the headers that are required for connection handling are let
through. At the very least, the following should be allowed:
Connection, Content-Length, Transfer-Encoding, Location
For a complete list of HTTP headers, refer to RFC2616. Protocols
that extend HTTP, such as WebDAV, use other headers.
SAMPLE: # Remove all headers, except the Date, Connection,
   # Content-Type, Transfer-Encoding, Content-Length
   # and Location headers.
# These 2 examples are identical
http.scrubResponseHeaders( "Date",
      "Connection", "Content-Type",
      "Transfer-Encoding", "Content-Length",
      "Location" );
http.scrubResponseHeaders(
      "date connection content-type transfer-encoding".
      " content-length location" );
PARAMETERS: header1, header2, ...

TITLE: http.setResponseCode
SEEALSO: http.getResponseCode
DESCRIPTION: Sets the status code and message in the first line of the HTTP response.
SAMPLE: # Not enough credit!
   http.setResponseCode( "402", "Payment required" );
PARAMETERS: code, [message]

TITLE: http.getResponseCookies
SEEALSO: http.getResponseCookie, http.setResponseCookie, http.removeResponseCookie, http.getCookies
DESCRIPTION: Returns a hash containing the names of all the cookies being set in this
response, mapped to their values.
This function should be called in a response rule; it has no effect in a request rule.
SAMPLE: # List all of the cookies that are being set in
   # the response and their values
   $cookies = http.getResponseCookies();
   foreach( $cookie in hash.keys( $cookies ) ) {
      log.info( $cookie . ": " . $cookies[$cookie] );
   }

TITLE: http.getHeaderNames
REPLACEDBY: http.listHeaderNames
SEEALSO: http.listHeaderNames
DESCRIPTION: Returns a list of all the headers that
are present in the request.
The headers are returned as a single string, separated by spaces.
SAMPLE: # Log all of the header names and values
   $headers = http.getHeaderNames();
   while( $headers != "" ) {
      $p = string.find( $headers, " " );
      if( $p >= 0 ) {
         $header = string.left( $headers, $p );
         $headers = string.skip( $headers, $p + 1 );
      } else {
         $header = $headers;
         $headers = "";
      }
      log.info($header . "=" . http.getHeader($header));
   }

TITLE: http.addResponseHeader
SEEALSO: http.setResponseHeader, http.getResponseHeader, http.removeResponseHeader, http.addHeader
DESCRIPTION: Adds an HTTP header to the HTTP
response that will be sent back to the client. If the header
already exists in the response, then this value will be
appended to the existing value. The header lookup is
case-insensitive.
SAMPLE: # Set a cookie to remember this user
   http.addResponseHeader( "Set-Cookie",
      "id=12345678; path=/" );
PARAMETERS: name, value

TITLE: http.getMultipartAttachment
DESCRIPTION: Returns the specified data out of a multipart encoded HTTP request.
The data contained in the part is returned on success, or
"" if it doesn't exist for that part. $1 contains the
Content Type of the part, and $2 contains the complete
headers for that part.
SAMPLE: $count = 0;
   while( $data =
          http.getMultipartAttachment( $count ) ) {
     log.info( "Data was " . $data );
     log.info( "Content-Type was " . $1 );
     log.info( "Headers were " . $2 );
     $count = $count + 1;
   }
PARAMETERS: part

TITLE: http.addHeader
SEEALSO: http.setHeader, http.getHeader, http.removeHeader, http.headerExists, http.addResponseHeader
DESCRIPTION: Modifies the current HTTP request, adding an HTTP header with the supplied
value. A case-insensitive lookup is first performed in order to find any existing
headers.  If a match is found, a duplicate header will be added to the message 
along with the new value.
SAMPLE: # Add a host header if it is missing
   if( !http.headerExists( "Host" ) ) {
      http.addHeader( "Host", "unknown" );
   }
PARAMETERS: name, value

TITLE: http.getResponseVersion
SEEALSO: http.getVersion
DESCRIPTION: Returns the version of the HTTP protocol
being used. It returns the version string in the first line of the
HTTP response, such as 'HTTP/1.1'. It will return the empty string
in the case of HTTP/0.9 response.
SAMPLE: # Get the HTTP response version
   $version = http.getResponseVersion();

TITLE: http.getResponseCookie
SEEALSO: http.getResponseCookies, http.setResponseCookie, http.removeResponseCookie, http.getCookie
DESCRIPTION: Returns the value of the named cookie in the HTTP response.
http.getResponseCookie() is a helper method to make it easier
to parse the HTTP Set-Cookie header and extract the values
of that particular cookie, rather than using
http.getResponseHeader() directly.
If the cookie does not exist, http.getResponseCookie() will
return the empty string.
This function should be called in a response rule; it has no effect in a request rule.
SAMPLE: # Get the PHP session cookie
   $cookie = http.getResponseCookie( "PHPSESSIONID" );
PARAMETERS: name

TITLE: http.setHeader
SEEALSO: http.addHeader, http.getHeader, http.headerExists, http.removeHeader, http.setResponseHeader
DESCRIPTION: Sets the value of the named HTTP header.
A case-insensitive lookup is first performed in order 
to identify any existing headers, replacing the value 
where a match is found. 
Note that the "Connection" header is manipulated by your traffic manager and that
changing its value in TrafficScript may not give the expected results.
SAMPLE: # Add (or replace) an X-Forwarded-By header
   http.setHeader( "X-Forwarded-By",
      "Stingray " . sys.hostname() );
PARAMETERS: name, value

TITLE: http.getBodyLines
SEEALSO: http.getBody, http.getResponseBodyLines
DESCRIPTION: Splits the body data of the HTTP request into individual lines and
returns an array of the data.
If the optional 'count' parameter is supplied, http.getBodyLines()
will only read and return this number of bytes.  If count is 0,
http.getBodyLines() returns the entire request.
If the request has no body, then this returns an empty array.
This function is not usable in response rules, as the body data of
the request will no longer be accessible.
To read HTML form parameters, it is easier to use http.getFormParams()
as that will work for GET and POST requests.
SAMPLE: # Read the entire request body
   $body = http.getBodyLines();
# If the body data is some special format we can
   #  understand then we can process it line-by-line
   if( array.length( $body ) > 0 ) {
      if( array.shift( $body ) == "Special data" ) {
         foreach( $line in $body ) {
            # handle special body data lines
         }
      }
   }
PARAMETERS: [count]

TITLE: http.stream.continueFromBackend
SEEALSO: http.stream.startResponse, http.stream.readBulkResponse, http.stream.readResponse, http.stream.writeResponse, http.stream.finishResponse
DESCRIPTION: Stops streaming any data from the current rule and lets your traffic manager
send remaining data from backend.  The 'data' parameter can be used to send the last
block to be streamed.  Rule processing will finish and no further
statements in this or subsequent rules will be executed. Unlike
http.stream.finishResponse(), any data coming from the backend server will
continue to be sent from the backend to the client normally.
Note that this function will behave exactly like http.stream.finishResponse()
if run from a request rule.
SAMPLE: http.stream.startResponse(
    "200", "text/html", "", "Server: Stingray");
while( 1 ) {
    # read full lines but at most 4k of data:
    $data = http.stream.readBulkResponse( 4096, "\n" );
  # No more data to read; break out of this loop
    if( 0 == string.length( $data ) ) {
      break;
    }
  if( string.find( $data, "foo" ) >= 0 ) {
       $data = string.replace( $data,"foo","bar" );
       # Job done, exit now. Any remaining body data
       # will continue to be sent from backend.
       http.stream.continueFromBackend( $data );
    }
  # stream data to client if not found.
    http.stream.writeResponse( $data );
  }
http.stream.finishResponse();
PARAMETERS: [data]

TITLE: http.getFormParamNames
REPLACEDBY: http.listFormParamNames
SEEALSO: http.listFormParamNames, http.getFormParam, http.doesFormParamExist, http.getFormParams
DESCRIPTION: Returns a list containing the names of all the form parameters present in
the URL query string and, if the request is a POST, in the POST body
data.
The names are returned as a single string, separated by the string
supplied to this function.
If the same parameter appears multiple times in the request, it
will only appear once in the list returned by this function.
SAMPLE: # Log all of the form parameters and values
   $sep = "!";
   $params = http.getFormParamNames( $sep );
   while( $params != "" ) {
      $p = string.find( $params, $sep );
      if( $p >= 0 ) {
         $param = string.left( $params, $p );
         $params = string.skip( $params, $p + 1 );
      } else {
         $param = $params;
         $params = "";
      }
      log.info($param . "=" .
               http.getFormParam($param, ","));
   }
PARAMETERS: Separator

TITLE: http.cache.setkey
SEEALSO: http.cache.enable, http.cache.disable
DESCRIPTION: Allows multiple variants of the same URL to be
considered distinct objects, even if the standard 'Vary' RFC
semantics would consider the pages identical.  Cached objects will
be stored with this key, and subsequent requests for the same URL
will only match if the same key is provided.  An example use is to
provided different cached content based on a portion of the
User-Agent field of the request.
Note that successive uses of this function will overwrite the 
previous use rather than append the new key to it.
SAMPLE: # internal/external users see different pages
http.cache.setkey( $am_internal_user );
PARAMETERS: key

TITLE: http.cache.disable
SEEALSO: http.cache.enable, http.cache.setkey
DESCRIPTION: Prevents this response from being cached. In a request rule, this
additionally prevents a cache lookup for this request.
SAMPLE: # don't cache static content...
if( $staticcontent ) { http.cache.disable(); }

TITLE: http.removeCookie
SEEALSO: http.getCookie, http.setCookie, http.removeResponseCookie
DESCRIPTION: Removes the named cookie from the incoming HTTP request.
http.removeCookie is a helper method that makes it easier to
parse the HTTP Cookie header and remove a particular cookie,
rather than using http.getHeader() and http.setHeader()
directly.
SAMPLE: # Remove the 'Priority' cookie
   http.removeCookie( "Priority" );
PARAMETERS: name

TITLE: http.request.post
SEEALSO: http.request.get, http.request.head, http.request.put, http.request.delete
DESCRIPTION: Issues an HTTP POST request for a remote web
page, and returns the body of the page requested. $1 is set to the
HTTP response code (e.g. 200 for OK), or is 0 if there was an
error. $2 is set to the Content-Type of the response (or an error
message if there was an error).  $3 is set to the content-headers
of the response, in the format: [&lt;header-line&gt;\r\n]*.  $4 is set to
the first line of the HTTP response.  The entire original response
may be reconstructed as $4."\r\n".$3."\r\n".$body, where $body is
the result of http.request.post.
HTTPS pages can be requested by using the https:// prefix
for the url.
A timeout parameter can be given (in seconds). If the request
does not complete in this time, then an error will be given instead.
Requests made with http.request.post() will always create a new
connection to the destination server and will not use an
existing connection.  After a request made with http.request.post()
has finished successfully, its connection can be re-used by any
invocation of http.request.get() or http.request.head() to the same
destination host:port, from any rule, in any virtual server.  If
the request was to a node in a pool, the connection will also be
shared with other requests your traffic manager makes to the same node.
If the request made with http.request.post() was unsuccessful, your traffic
manager closes the connection.
SAMPLE: $body = http.request.post("http://www.example.com/",
      "data",
      "Cookie: foo=bar\nContent-Type: text/plain" );
   if( $1 ) {
      http.sendResponse( $1, $2, $body, "" );
   }
PARAMETERS: url, POST data, [ headers ], [ timeout ]

TITLE: http.getResponseHeaderNames
REPLACEDBY: http.listResponseHeaderNames
DESCRIPTION: Returns a list of all the headers
that are present in the response.
The headers are returned as a single string, separated by spaces.
SAMPLE: # Log all of the header names and values
   $headers = http.getResponseHeaderNames();
   while( $headers != "" ) {
      $p = string.find( $headers, " " );
      if( $p >= 0 ) {
         $header = string.left( $headers, $p );
         $headers = string.skip( $headers, $p + 1 );
      } else {
         $header = $headers;
         $headers = "";
      }
      log.info( $header . "=" .
                http.getResponseHeader( $header ));
   }

TITLE: http.getFormParam
SEEALSO: http.setQueryString, http.getRawURL, http.getBody, http.listFormParamNames, http.getFormParams
DESCRIPTION: Returns the %-decoded form parameter
from the URL query string, or if not found and the request is a POST,
from the POST body data. 
If the parameter is provided twice, only the first will be
returned, unless the optional separator is provided, in which case
all matches will be returned, separated with this string.
SAMPLE: # See what drink the user wanted
   $drink = http.getFormParam( "drink" );
PARAMETERS: Parameter, [Separator]

TITLE: http.setResponseCookie
SEEALSO: http.getResponseCookie, http.removeResponseCookie, http.setCookie
DESCRIPTION: Sets a cookie in the HTTP response. If the named cookie already exists,
this function replaces its value.
The options are a semi-colon separated list of cookie options,
such as "domain", "path", "expires" and "secure".
If the named cookie exists and no 'options' are provided, the
current options for the named cookie are preserved.
This function may be called from a request rule or a response rule.
SAMPLE: # Set the priority cookie
   http.setResponseCookie( "Priority", "Gold" );
# Set a username cookie, with various options
   http.setResponseCookie( "Username", "mork",
      "domain=example.com; path=/cgi-bin" );
PARAMETERS: name, value, [options]

TITLE: http.setResponseBody
SEEALSO: http.getResponseBody, http.setBody
DESCRIPTION: Sets the response body for this HTTP
response to the supplied string, replacing any response body
already present.
This also updates the 'Content-Length' header in the
response to the length of the new body data. In addition the
'Content-Encoding' header is removed as we only ever set body
data which is not encoded or compressed. If the server is still sending
the original response body when this function is called, the
connection to the server will be harmlessly dropped.
The optional 'transfer-encoding' parameter indicates the
encoding of the body data (for example, 'chunked').
SAMPLE: $body = http.getResponseBody( 0 );
   $body = string.regexsub( $body, "Buy", "Sell", "g" );
   http.setResponseBody( $body );
PARAMETERS: body, [transfer-encoding]

TITLE: http.request.get
SEEALSO: http.request.ssl.get, http.request.head, http.request.post, http.request.put, http.request.delete
DESCRIPTION: Issues an HTTP request for a remote web page and
returns the body of the page requested. $1 is set to the HTTP
response code (e.g. 200 for OK), or is 0 if there was an error. $2
is set to the Content-Type of the response (or an error message if
there was an error).  $3 is set to the content-headers of the
response, in the format: [&lt;header-line&gt;\r\n]*.  $4 is set to the
first line of the HTTP response.  The entire original response may
be reconstructed as $4."\r\n".$3."\r\n".$body, where $body is the
result of http.request.get.
HTTPS pages can be requested by using the https:// prefix
for the url.
A timeout parameter can be given (in seconds). If the request
does not complete in this time, then an error will be given instead.
Requests made with http.request.get() will use keepalive
connections to the destination server.  Provided the request was
completed successfully, these keepalive connections will be re-used
by any invocation of http.request.get() or http.request.head() to
the same destination host:port, from any rule, in any virtual
server.  If the request is to a node in a pool, the connection will
be shared with other requests your traffic manager makes to the same node.
If the request made with http.request.get() was unsuccessful, your traffic
manager closes
the connection.
SAMPLE: $body = http.request.get( "https://www.example.com/",
      "Cookie: foo=bar" );
   if( $1 ) {
      http.sendResponse( $1, $2, $body, "" );
   } else {
      log.info( "An error occurred: " . $2 );
   }
PARAMETERS: url, [ headers ], [ timeout ]

TITLE: http.getResponse
SEEALSO: http.listResponseHeaderNames, http.getResponseHeader, http.getResponseBody
DESCRIPTION: Returns the beginning of the HTTP response (the
status line and the headers), up to but not including the empty line
that separates the headers from the body. The returned string does
not include any body data.
SAMPLE: # See if the response included any
  # headers that start with 'Foo'
  $response = http.getResponse();
  if( string.regexMatch( $response, "^Foo" )) {
     log.info( "A 'Foo' header was found" );
  }

TITLE: http.stream.startResponse
SEEALSO: http.stream.writeResponse, http.stream.finishResponse, http.stream.readBulkResponse, http.stream.readResponse, http.sendResponse
DESCRIPTION: Sets up an HTTP response from which data
can be streamed later by calling http.stream.writeResponse().
http.stream.startResponse() can only be called once per
HTTP transaction. Only 'resp_code' and 'content_type' are mandatory
arguments.  However, it is recommended to specify the 'content_length'
if possible.  If it is provided and a valid integer, your traffic manager
will not stream more than that number of bytes.  A set of headers (separated
by "\r\n") can be provided in the optional fourth argument.  In a
response rule, if no fourth argument is given, the response headers
from the back-end will be sent on to the client (note, however, that
your traffic manager may override some of these headers, e.g. the 'Connection'
header)
SAMPLE: http.stream.startResponse(
    "200", "text/html", "",
    "Server: Stingray\r\nX-Hello: World");
while( 1 ) {
    # read full lines but at most 4k of data:
    $data = http.stream.readBulkResponse( 4096, "\n" );
    if( $data == "" )
      break; # server has finished the response
    # invert server's logic:
    $data = string.replaceAllI( $data, "yes", "no" );
    http.stream.writeResponse( $data );
  }
http.stream.finishResponse();
PARAMETERS: resp_code, content_type, [content_length, headers]

TITLE: http.setCookie
SEEALSO: http.getCookie, http.removeCookie, http.setResponseCookie
DESCRIPTION: Sets the value of the named cookie in the incoming HTTP request.
http.setCookie is a helper method that makes it easier to parse
the HTTP Cookie header and set the value of a particular
cookie, rather than using http.getHeader() and
http.setHeader() directly.
An HTTP 'Cookie' header can have multiple values, such as
&nbsp;&nbsp;Cookie: user-id=Joe; user-type=gold
SAMPLE: # Set the priority cookie
   http.setCookie( "Priority", "Gold" );
PARAMETERS: name, value

TITLE: http.request.put
SEEALSO: http.request.get, http.request.head, http.request.post, http.request.delete
DESCRIPTION: Issues an HTTP PUT request for a remote web
page, and returns the body of the page requested. $1 is set to the
HTTP response code (e.g. 200 for OK), or is 0 if there was an
error. $2 is set to the Content-Type of the response (or an error
message if there was an error). $3 is set to the content-headers
of the response, in the format: [&lt;header-line&gt;\r\n]*. $4 is set to
the first line of the HTTP response. The entire original response
may be reconstructed as $4."\r\n".$3."\r\n".$body, where $body is
the result of http.request.put.
HTTPS pages can be requested by using the https:// prefix
for the url.
A timeout parameter can be given (in seconds). If the request
does not complete in this time, then an error will be given instead.
Requests made with http.request.put() will always create a new
connection to the destination server and will not use an
existing connection. After a request made with http.request.put()
has finished successfully, its connection can be re-used by any
invocation of http.request.get() or http.request.head() to the same
destination host:port, from any rule, in any virtual server.  If
the request was to a node in a pool, the connection will also be
shared with other requests your traffic manager makes to the same node.
If the request made with http.request.put() was unsuccessful, your traffic
manager closes the connection.
SAMPLE: $body = http.request.put("http://www.example.com/",
      "data",
      "Cookie: foo=bar\nContent-Type: text/plain" );
   if( $1 ) {
      http.sendResponse( $1, $2, $body, "" );
   }
PARAMETERS: url, PUT data, [ headers ], [ timeout ]

TITLE: http.setPath
SEEALSO: http.getPath, http.setRawPath, http.setEscapedPath, string.urlencode
DESCRIPTION: Replaces the path portion of the request URL
with the supplied value. If the replacement value contains a
'?', this function will also replace the query string;
otherwise, any query string is preserved. This function will %-encode
any character excluding following set as defined in RFC3986
- Unreserved: A-Z, a-z, 0-9, ., _, -
- Reserved: !, *, (, ), ;, :, @, &, =, +,' 
$, ',', ?, /, #, [, ]
- '%'
SAMPLE: # Make customer buy widget:
   http.setPath( "/purchase?product=widget" );
PARAMETERS: url

TITLE: http.removeHeader
SEEALSO: http.getHeader, http.addHeader, http.setHeader, http.removeResponseHeader
DESCRIPTION: Removes a named header if it exists in the request.
SAMPLE: # Remove the 'Accept-Language' header if it exists
   http.removeHeader( "Accept-Language" );
PARAMETERS: name

TITLE: http.changeSite
SEEALSO: http.sendResponse, http.redirect
DESCRIPTION: Redirect users to a new website. It is a more sophisticated version 
of http.redirect() that will preserve the original path that the 
request asked for. Note that it sends back a HTTP 301 redirect rather than
the 302 response returned by http.redirect().  For instance, if the
original request was for "http://www.example.com/image/image.jpg", then
http.changeSite( "example.co.uk" ) would redirect the user to
"http://example.co.uk/image/image.jpg"
The redirection will preserve the original path (and any query string)
of the request, together with the port number and protocol. If you wish
to force any of these details, then you can specify them as part of the
supplied host name. e.g. http.changeSite( "https://www.example.com" )
will always send people to a SSL-encrypted site.
You can also add on a prefix to the path of the URL, e.g.
http.changeSite( "www.example.com/oldsite" ) would redirect a request
for "http://www.example.com/missing/page.html" to
"http://www.example.com/oldsite/missing/page.html".
If the original request matches the supplied redirection, then
http.changeSite() will take no action and let the request continue.
This ensures that no 'redirection loops' occur.
SAMPLE: # Send users to our new site
   if( http.getHostHeader() == "www.zeus.com" ) {
      http.changeSite( "www.riverbed.com" );
   }
PARAMETERS: name

TITLE: http.getResponseHeader
SEEALSO: http.setResponseHeader, http.addResponseHeader, http.removeResponseHeader, http.responseHeaderExists, http.getHeader
DESCRIPTION: Returns the value of a named HTTP header in the HTTP response, or the
empty string if the header does not exist or has an empty value. The
header lookup is case-insensitive.
SAMPLE: # Get the mime type of the response
   $mime = http.getResponseHeader( "Content-Type" );
# note that the MIME type may look like
   # 'text/html; charset=ISO-8859-1'
PARAMETERS: name

TITLE: http.headerExists
SEEALSO: http.getHeader
DESCRIPTION: Reports if a named header exists or not. It is similar to
http.getHeader(), but makes it possible to distinguish between a header
not being present and a header having no value.   
The lookup is case-insensitive.  
It returns 1 if the header exists, and 0 if it does not.
SAMPLE: # Add a host header if it is missing
   if( !http.headerExists( "Host" ) ) {
      http.addheader( "Host", "unknown" );
   }
PARAMETERS: name

TITLE: http.getCookies
SEEALSO: http.getCookie, http.setCookie, http.removeCookie, http.getResponseCookies
DESCRIPTION: Returns a hash containing the names of all the cookies in this
request mapped to their values.
An HTTP 'Cookie' header can have multiple values, such as
&nbsp;&nbsp;Cookie: user-id=Joe; user-type=gold
http.getCookies() will retrieve the 'Cookie' header line
and parse it, returning a hash mapping all the cookie names
to their values.
SAMPLE: # List all of the cookie names and their values
   $cookies = http.getCookies();
   foreach( $cookie in hash.keys( $cookies ) ) {
      log.info( $cookie . ": " . $cookies[$cookie] );
   }

TITLE: rtsp.getRequestBodyLines
SEEALSO: rtsp.getRequestBody, rtsp.getResponseBodyLines, rtsp.setRequestBody
DESCRIPTION: Splits the body data of the RTSP request into individual lines and
returns an array of the data.
If the request has no body, then this returns an empty array.
SAMPLE: # Read the entire request body
   $body = rtsp.getRequestBodyLines();
# Process it line-by-line
   foreach( $line in $body ) {
      # ...
   }
PARAMETERS: count

TITLE: rtsp.getRequestHeaders
SEEALSO: rtsp.getRequestHeader, rtsp.setRequestHeader, rtsp.addRequestHeader, rtsp.removeRequestHeader, rtsp.requestHeaderExists, rtsp.getResponseHeaders
DESCRIPTION: Returns a hash containing all the header names in the request
mapped to their values.
SAMPLE: # Show all the headers in the request
   $headers = rtsp.getRequestHeaders();
foreach( $header in hash.keys( $headers ) ) {
      log.info( $header . "=" . $headers[$header] );
   }

TITLE: rtsp.setResponseHeader
SEEALSO: rtsp.addResponseHeader, rtsp.getResponseHeader, rtsp.removeResponseHeader, rtsp.setRequestHeader
DESCRIPTION: Sets a RTSP header in the RTSP
response that will be sent back to the client. If the header
already exists in the response, via a case-insensitive
lookup, it will be replaced with this new value.
Note that this function should not be used with the
Connection header, i.e. setResponseHeader("Connection", value)
since it may not give the expected results.
SAMPLE: # Replace the transport header
   $my_header = "RTP/AVP/TCP; interleaved=0-1";
   rtsp.setResponseHeader( "Transport", $my_header );
PARAMETERS: name, value

TITLE: rtsp.getMethod
SEEALSO: rtsp.setMethod
DESCRIPTION: Returns the RTSP method that was used to make the request, such as SETUP
or PLAY.
SAMPLE: # Direct DESCRIBE requests to separate pool
   if( rtsp.getMethod() == "DESCRIBE" ) {
      # set pool to Describe pool
   }

TITLE: rtsp.getPath
SEEALSO: rtsp.setPath, rtsp.getRawURL
DESCRIPTION: Returns the %-decoded path in the RTSP request URL
SAMPLE: # Retrieve the requested file
   $file = rtsp.getPath();

TITLE: rtsp.getResponse
SEEALSO: rtsp.listResponseHeaderNames, rtsp.getResponseHeader, rtsp.getResponseBody
DESCRIPTION: Returns the full RTSP response and headers, but does not
include any body data.
SAMPLE: # Get the complete rtsp response
  $request = rtsp.getResponse();

TITLE: rtsp.getRequestHeader
SEEALSO: rtsp.setRequestHeader, rtsp.addRequestHeader, rtsp.removeRequestHeader, rtsp.getRequestHeaders
DESCRIPTION: Returns the value of a named RTSP header in the RTSP request, or the
empty string if the header does not exist. The header name lookup
is case-insensitive.
SAMPLE: # Get the transport detail
   $transport = rtsp.getRequestHeader( "Transport" );
PARAMETERS: name

TITLE: rtsp.getRequestBody
SEEALSO: rtsp.getResponseBody, rtsp.setRequestBody, rtsp.getRequestBodyLines
DESCRIPTION: Returns the body data of the request.
If the optional 'count' parameter is supplied, rtsp.getRequestBody()
will only read and return this number of bytes.  If count is 0,
rtsp.getRequestBody() returns the entire request.
If the request has no body, then this returns an empty string.
This function is not useable in response rules, as the body data of
the request will no longer be accessible.
SAMPLE: # Read the entire request body
   $body = rtsp.getRequestBody();
PARAMETERS: [count]

TITLE: rtsp.listResponseHeaderNames
SEEALSO: rtsp.getResponseHeader, rtsp.removeResponseHeader, rtsp.getResponseHeaders, rtsp.listRequestHeaderNames
DESCRIPTION: Returns a list of all the headers that
are present in the response.
The headers are returned as an array.
SAMPLE: # Log all of the header names and values
   $headers = rtsp.listResponseHeaderNames();
   foreach( $header in $headers ) {
      log.info($header . "=" .
               rtsp.getRequestHeader($header));
   }

TITLE: rtsp.getResponseHeaderNames
REPLACEDBY: rtsp.listResponseHeaderNames
SEEALSO: rtsp.getResponseHeader, rtsp.removeResponseHeader, rtsp.getRequestHeaderNames
DESCRIPTION: Returns a list of all the headers that are present in the response.
The headers are returned as a single string, separated by spaces.
SAMPLE: # Log all of the header names and values
   $headers = rtsp.getResponseHeaderNames();
   while( $headers != "" ) {
      $p = string.find( $headers, " " );
      if( $p >= 0 ) {
         $header = string.left( $headers, $p );
         $headers = string.skip( $headers, $p + 1 );
      } else {
         $header = $headers;
         $headers = "";
      }
      log.info( $header . "=" .
                rtsp.getResponseHeader( $header ));
   }

TITLE: rtsp.getResponseHeaders
SEEALSO: rtsp.getResponseHeader, rtsp.setResponseHeader, rtsp.addResponseHeader, rtsp.removeResponseHeader, rtsp.responseHeaderExists, rtsp.getRequestHeaders
DESCRIPTION: Returns a hash containing all the header names in the response
mapped to their values.
SAMPLE: # Show all the headers in the response
   $headers = rtsp.getResponseHeaders();
foreach( $header in hash.keys( $headers ) ) {
      log.info( $header . "=" . $headers[$header] );
   }

TITLE: rtsp.getRawURL
SEEALSO: rtsp.getPath
DESCRIPTION: Returns the raw URL data provided by the client in
the first line of the RTSP request, after the method and before the
RTSP version specifier. No %-decoding is performed on the URL.
SAMPLE: $rawurl = rtsp.getRawURL();
   if( string.contains( $rawurl, "../" ) ) {
      # Something suspicious here ...
      connection.discard();
   }

TITLE: rtsp.requestHeaderExists
DESCRIPTION: Reports if a header exists or not. It is similar to
rtsp.getRequestHeader(), but makes it possible to distinguish between a
header not being present and a header having no value.
The header name lookup is case-insensitive.
It returns 1 if the header exists, and 0 if it does not.
SAMPLE: # Check for the Transport header
   if( rtsp.requestHeaderExists( "Transport" ) ) {
      # Modify the transport options
   }
PARAMETERS: names

TITLE: rtsp.setRequestHeader
SEEALSO: rtsp.getRequestHeader, rtsp.addRequestHeader, rtsp.removeRequestHeader
DESCRIPTION: Sets the value of a RTSP header,
replacing any existing value if the header already exists.
Note that this function should not be used with the
Connection header, i.e. setRequestHeader("Connection", value)
since it may not give the expected results.
The header name lookup is case-insensitive.
SAMPLE: # Replace the transport header
   $my_header = "RTP/AVP/TCP; interleaved=0-1";
   rtsp.setRequestHeader( "Transport", $my_header );
PARAMETERS: name, value

TITLE: rtsp.sendResponse
DESCRIPTION: Sends back an RTSP response to the client
instead of balancing the request via a pool onto a node. It
generates a correct RTSP response from the response code,
body data and headers supplied.  Multiple headers should be
separated with \r\n.
SAMPLE: # Discard SET_PARAMETER requests if the server
   # does not support it
   if( rtsp.getMethod() == "SET_PARAMETER" ) {
      rtsp.sendResponse( "401 Unauthorised", "", "" );
   }
PARAMETERS: code, body, headers

TITLE: rtsp.setRequestBody
SEEALSO: rtsp.getRequestBody, rtsp.setResponseBody
DESCRIPTION: Sets the request body for this RTSP request, replacing any request body
already present.
This also updates the 'Content-Length' header in the request to the
length of the new body data.
SAMPLE: $body = rtsp.getRequestBody( 0 );
   $body = string.regexsub( $body, "Buy", "Sell", "g" );
   rtsp.setRequestBody( $body );
PARAMETERS: body

TITLE: rtsp.removeResponseHeader
SEEALSO: rtsp.setResponseHeader, rtsp.getResponseHeader, rtsp.addResponseHeader, rtsp.removeRequestHeader
DESCRIPTION: Removes a RTSP header from the RTSP response. The header name is
automatically translated to the correct case.
SAMPLE: # Remove the GET_PARAMETER header
   rtsp.removeResponseHeader( "GET_PARAMETER" );
PARAMETERS: name

TITLE: rtsp.getRequestHeaderNames
REPLACEDBY: rtsp.listRequestHeaderNames
DESCRIPTION: Returns a list of all the headers that are present in the request.
The headers are returned as a single string, separated by spaces.
SAMPLE: # Log all of the header names and values
   $headers = rtsp.getRequestHeaderNames();
   while( $headers != "" ) {
      $p = string.find( $headers, " " );
      if( $p >= 0 ) {
         $header = string.left( $headers, $p );
         $headers = string.skip( $headers, $p + 1 );
      } else {
         $header = $headers;
         $headers = "";
      }
      log.info($header . "=" .
         rtsp.getRequestHeader($header));
   }

TITLE: rtsp.setPath
SEEALSO: rtsp.getPath
DESCRIPTION: Replaces the Path portion of the request URL with the supplied value.
SAMPLE: # Make customer view specific file:
   rtsp.setPath( "myvideo.rm" );
PARAMETERS: url

TITLE: rtsp.setResponseCode
SEEALSO: rtsp.getResponseCode
DESCRIPTION: Sets the status code and message in the first line of the RTSP response.
SAMPLE: # Stop clients receiving a particular file
   $path = rtsp.getPath();
   if( $path == "specialfile" ) {
      rtsp.setResponseCode( "401", "Unauthorised" );
   }
PARAMETERS: code, [message]

TITLE: rtsp.getResponseHeader
SEEALSO: rtsp.setResponseHeader, rtsp.addResponseHeader, rtsp.removeResponseHeader, rtsp.responseHeaderExists, rtsp.getRequestHeader, rtsp.getResponseHeaders
DESCRIPTION: Returns the value of a RTSP header in the RTSP response, or the empty
string if the header does not exist. The header name lookup is 
case-insensitive.
SAMPLE: # Get the transport header
   $transport = rtsp.getResponseHeader( "Transport" );
PARAMETERS: name

TITLE: rtsp.getRequest
SEEALSO: rtsp.listRequestHeaderNames, rtsp.getRequestHeader, rtsp.getRequestBody
DESCRIPTION: Returns the full RTSP request and headers, but does not include any body
data.
SAMPLE: # Get the complete rtsp request
  $request = rtsp.getRequest();

TITLE: rtsp.removeRequestHeader
SEEALSO: rtsp.setRequestHeader, rtsp.getRequestHeader, rtsp.addRequestHeader
DESCRIPTION: Removes an RTSP header if it exists in the request. The header name 
lookup is case-insensitive.
SAMPLE: # Remove the transport header
   rtsp.removeRequestHeader( "Transport" );
PARAMETERS: name

TITLE: rtsp.addResponseHeader
SEEALSO: rtsp.setResponseHeader, rtsp.getResponseHeader, rtsp.removeResponseHeader, rtsp.addRequestHeader
DESCRIPTION: Adds an RTSP header to the RTSP response that will be sent back to the
client. If the header already exists in the response, via a case-insensitive
lookup, this value will be appended to the existing value.
SAMPLE: # Add a new transport header
   $my_header = "RTP/AVP/TCP; interleaved=0-1";
   rtsp.addResponseHeader( "Transport", $my_header );
PARAMETERS: name, value

TITLE: rtsp.getVersion
DESCRIPTION: Returns the version of the RTSP protocol being used. It returns the
version string in the RTSP/version specifier in the first line of the
RTSP request, such as 'RTSP/1.0'.
SAMPLE: # Get the RTSP version
   $version = rtsp.getVersion();

TITLE: rtsp.setMethod
SEEALSO: rtsp.getMethod
DESCRIPTION: Sets the RTSP method to use when forwarding the request via a pool to a
node.
SAMPLE: # Force the client to send an OPTIONS packet
   rtsp.setMethod( "OPTIONS" );
PARAMETERS: method

TITLE: rtsp.getResponseBodyLines
SEEALSO: rtsp.getResponseBody, rtsp.getRequestBodyLines, rtsp.setResponseBody
DESCRIPTION: Splits the body data of the RTSP request into individual lines and
returns an array of the data.
If the request has no body, then this returns an empty array.
SAMPLE: # Read the entire request body
   $body = rtsp.getResponseBodyLines();
# Process it line-by-line
   foreach( $line in $body ) {
      # ...
   }
PARAMETERS: count

TITLE: rtsp.addRequestHeader
SEEALSO: rtsp.setRequestHeader, rtsp.getRequestHeader, rtsp.removeRequestHeader
DESCRIPTION: Adds an RTSP header. If the header already exists, via a 
case-insensitive lookup, this value will be appended to the 
existing value.
SAMPLE: # Add a transport header
   $my_header = "RTP/AVP/TCP; interleaved=0-1";
   rtsp.addRequestHeader( "Transport", $my_header );
PARAMETERS: name, value

TITLE: rtsp.responseHeaderExists
SEEALSO: rtsp.getResponseHeader
DESCRIPTION: Reports if a named header
exists in the RTSP response. It is similar to
rtsp.getResponseHeader(), but makes it possible to
distinguish between a header not being present and a header
having no value.
The header name lookup is case-insensitive.
It returns 1 if the header exists, and 0 if it does not.
SAMPLE: # Test for the 'Transport' response header
   if( rtsp.responseHeaderExists( "Transport" ) ) {
      # modify the parameters
   }
PARAMETERS: name

TITLE: rtsp.getResponseCode
SEEALSO: rtsp.setResponseCode
DESCRIPTION: Returns the status code from the first line of the RTSP response.
SAMPLE: # Is the status '200'
   if( rtsp.getResponseCode() == 200 ) {
      # ...
   }

TITLE: rtsp.redirect
SEEALSO: rtsp.sendResponse
DESCRIPTION: Sends back an RTSP 302 redirect response, which will send the client to a
different URL. This is equivalent to rtsp.sendResponse( "302 Moved
Temporarily", "", "Location: " .  $url );
SAMPLE: # Redirect requests for a particular file elsewhere
   $path = rtsp.getPath();
   if( $path == "specialfile" ) {
      rtsp.redirect( "rtsp://otherserver/" . $path );
   }
PARAMETERS: path

TITLE: rtsp.setResponseBody
SEEALSO: rtsp.getResponseBody, rtsp.setRequestBody
DESCRIPTION: Sets the response body for this RTSP response, replacing any response
body already present.
This also updates the 'Content-Length' header in the
response to the length of the new body data.
If the server is still sending
the original response body when this function is called, the
connection to the server will be harmlessly dropped.
SAMPLE: $body = rtsp.getResponseBody( 0 );
   $body = string.regexsub( $body, "Buy", "Sell", "g" );
   rtsp.setResponseBody( $body );
PARAMETERS: body

TITLE: rtsp.listRequestHeaderNames
SEEALSO: rtsp.listResponseHeaderNames, rtsp.getRequestHeader, rtsp.getRequestHeaders
DESCRIPTION: Returns a list of all the headers that are present in the request.
The headers are returned as a an array.
SAMPLE: # Log all of the header names and values
   $headers = rtsp.listRequestHeaderNames();
   foreach( $header in $headers ) {
      log.info($header . "=" .
               rtsp.getRequestHeader($header));
   }

TITLE: rtsp.getResponseBody
SEEALSO: rtsp.getRequestBody, rtsp.setResponseBody, rtsp.getResponseBodyLines
DESCRIPTION: Returns the body of the RTSP response. This could be an SDP response.
If the optional 'count' parameter is provided, rtsp.getResponseBody()
will read and return the first 'count' bytes of the response.  If
count is 0, rtsp.getResponseBody() will return the entire response.
SAMPLE: # Read the entire response body
   $body = rtsp.getResponseBody();
PARAMETERS: [count]

TITLE: glb.service.getLocationWeight
DESCRIPTION: Get the weight of the specified location, as configured for the Weighted
Random load balancing algorithm for the specified service, or for the current
service if no service is specified and the function is used in a GLB service
rule.
If the service is not using the Weighted Random load balancing algorithm
then the weight for all locations will be reported as 0.
If the location does not exist, or is not configured for the specified
service, the function will return -1 and will print a warning to the event
log.
A service must be specified if this function is used outside a GLB service
rule.
SAMPLE: # If debugging, never use the lowest weighted node
   #  - instead, keep it free for testing purposes
   if( $debugging ) {
      # Build a list of weight -> location mappings
      $locs = glb.service.listLocations();
      $weights = [];
      foreach( $loc in $locs ) {
         $w = glb.service.getLocationWeight( $loc );
         $weights[$w] = $loc;
      }
      # Ignore the lowest weighted location
      $lowest = array.sortNumerical(
          hash.keys( $weights )
      )[0];
      glb.service.ignoreLocation( $weights[$lowest] );
   }
PARAMETERS: location, [ service ]

TITLE: glb.service.avoidLocation
DESCRIPTION: Avoid the specified location when re-writing the DNS response for the
current domain.
The effect of this is to narrow down the list of available locations to just
those that are not avoided.
If a location is both preferred and avoided being preferred will take
precedence.  If all locations are avoided (and none preferred) the outcome of
the balancing algorithm will be as if no preferences have been specified.
If the location is unknown, unconfigured, or dead this preference will have
no effect on the balancing decision.  (In these cases a warning event will be
raised and logged.)
This function can only be used in GLB service rules.
SAMPLE: # Do not use the UK between 01:00 and 03:00 GMT if
   # possible to use another location
   if( sys.gmtime.format( '%H' ) >= 1
         && sys.gmtime.format( '%H' ) < 3 ) {
      glb.service.avoidLocation( 'United Kingdom' );
   }
PARAMETERS: location

TITLE: glb.service.ignoreLocation
DESCRIPTION: Do not consider the specified location when re-writing the DNS response for
the current domain.
This removes the specified location from the list of available locations.
Multiple locations can be ignored, if all available locations are ignored it
will be as if all locations are dead.  Ignoring locations takes precedence
over preferring locations.
If the location is unknown, unconfigured, or dead this preference will have
no effect on the balancing decision.  (In these cases a warning event will be
raised and logged.)
This function can only be used in GLB service rules.
SAMPLE: # Never use the UK between 01:00 and 03:00 GMT
   if( sys.gmtime.format( '%H' ) >= 1
         && sys.gmtime.format( '%H' ) < 3 ) {
      glb.service.ignoreLocation( 'United Kingdom' );
   }
PARAMETERS: location

TITLE: glb.service.getNearestLocation
DESCRIPTION: Get the name of the traffic manager location calculated to be the closest to
geographic location the client IP.  Note that only live traffic manager
locations are considered in this calculation.
If no nearest traffic manager location could be calculated the empty string is
returned.
This function can only be used in GLB service rules.
SAMPLE: # Log the traffic manager location that is closest
   # to the client
   $nearest = glb.service.getNearestLocation();
   log.info( "Location nearest to " .
      request.getRemoteIP() . " is " . $nearest );

TITLE: glb.getIPs
DESCRIPTION: Get an array of the IPs associated with the domain currently being processed.
This function can only be used in GLB service rules.
SAMPLE: # Log the IPs that were returned by the DNS server
   # for the domain test.example.com
   if( glb.getDomain() == "test.example.com" ) {
      $msg = "IPs returned to " . request.getRemoteIP()
           . " for domain test.example.com were: "
           . array.join( glb.getIPs(), ", " );
      log.info( $msg );
   }

TITLE: glb.service.getName
DESCRIPTION: Get the name of the current GLB service configuration.
This is the service that has been picked to handle the current domain.  It is
this service that will have specified that the rule be executed.
This function can only be used in GLB service rules.
SAMPLE: # Disable the service named MyService on Sundays
   $name = glb.service.getName();
   if( $name == "MyService"
         && sys.time.weekday() == 1 ) {
      glb.service.skip();
   }

TITLE: glb.service.useLocation
DESCRIPTION: Force use of the specified location when re-writing the DNS response for the
current domain.
If the location has IPs configured for the current service that match IPs
returned in the DNS response for the current domain the response will be
re-written to use only the IPs configured for the location.
If the location is unknown, unconfigured, or dead this preference will have
no effect on the balancing decision.  (In these cases a warning event will be
raised and logged.)
This function can only be used in GLB service rules.
SAMPLE: # Force use of Australia between 01:00 and 03:00 GMT
   if( sys.gmtime.format( '%H' ) >= 1
         && sys.gmtime.format( '%H' ) < 3 ) {
      glb.service.useLocation( 'Australia' );
   }
PARAMETERS: location

TITLE: glb.service.skip
DESCRIPTION: Skip the current service configuration.  This means that no futher service
rules will be executed and no balancing will occur for the domain currently
being processed.  The DNS records for the domain will be sent to the client
unchanged.  (Further A-record domains in the current DNS response may still
be processed.)
The glb.service.skip() call does not return.
This function can only be used in GLB service rules.
SAMPLE: # Do not balance requests from the local network
   $ip = request.getRemoteIP();
   if( string.IPMaskMatch( $ip, "10.0.0.0/16" ) ) {
      glb.service.skip();
   }

TITLE: glb.service.preferLocation
DESCRIPTION: Prefer the specified location when re-writing the DNS response for the
current domain.  More than one location may be preferred by calling this
function multiple times.
The effect of this is to narrow down the list of available locations to just
those that have been selected as preferred.  However, if no preferred
locations are available balancing will fall back to other available
locations.
If a location is both preferred and avoided being preferred will take
precedence.  If all locations are preferred the outcome of the balancing
algorithm will be as if no preferences have been specified.
If the location is unknown, unconfigured, or dead this preference will have
no effect on the balancing decision.  (In these cases a warning event will be
raised and logged.)
This function can only be used in GLB service rules.
SAMPLE: # Prefer to use Australia between 01:00 and 03:00 GMT
   # But if it isn't available fall back to balancing
   if( sys.gmtime.format( '%H' ) >= 1
         && sys.gmtime.format( '%H' ) < 3 ) {
      glb.service.preferLocation('Australia');
   }
PARAMETERS: location

TITLE: glb.service.isLocationLive
DESCRIPTION: Check if a location is live.  A non-live location includes those for which
monitors have failed, or those that are in the "draining" list for the
specified service, or for the current service if no service is specified and
the function is used in a GLB service rule.
The function returns 1 if the location is live, 0 if it isn't, and -1 if the
location does not exist or is not configured for the current service.
A service must be specified if this function is used outside a GLB service
rule.
SAMPLE: # Log warning if first location is dead
   $locs = glb.service.listLocations();
   $status = glb.service.isLocationLive($locs[0]);
   if( $status == 0 ) {
      log.warn( "Location " . $locs[0] . " is dead." );
   }
PARAMETERS: location, [ service ]

TITLE: glb.service.listLocations
DESCRIPTION: Get a priority-ordered array of the locations configured for the specified
GLB service, or the current GLB service if none is specified. This is the
value of the location_order config key.
This function can only be used in GLB service rules unless the service
parameter is specified.
SAMPLE: # Apply a custom global load-balancing algorithm
   # without accessing a back-end DNS server, but
   # using stored configuration on the traffic manager.
   # Rule is used on a standard DNS virtual server.
   $locations = glb.service.listLocations( "Gallery" );
   foreach( $loc in $locations ) {
      if( glb.service.isLocationLive(
                                 "Gallery", $loc ) ) {
         # Return DNS response with IP of location
      }
   }
   # Return DNS response to fallback IP - all locations
   # are down
PARAMETERS: [ service ]

TITLE: glb.service.listDomains
DESCRIPTION: Get an array of the domains the specified GLB service is configured to handle,
or the domains that the current GLB service is configured to handle if no
service is specified.
This function can only be used in GLB service rules unless the service
parameter is specified.
SAMPLE: # Log the domains the current GLB service is
   # configured to handle.
   $domains = glb.service.listDomains();
   log.info( "Configured domains: " .
      array.join( $domains, ", " ) );
PARAMETERS: [ service ]

TITLE: glb.getDomain
DESCRIPTION: Get the domain currently being processed.
This function can only be used in GLB service rules.
SAMPLE: # Disable balancing of the example.com domain
   # if the client is in Boston, USA
   $domain = glb.getDomain();
   $ip = request.getRemoteIP();
   if( $domain == "example.com"
         && geo.getCity( $ip ) == "Boston"
         && geo.getCountryCode( $ip ) == "US" ) {
      glb.service.skip();
   }

TITLE: ssl.clientCertVersion
SEEALSO: ssl.isSSL
DESCRIPTION: Returns "1", "2" or "3" denoting the
version of the client certificate, or the empty string if
the connection was not SSL-encrypted or if a certificate was
not supplied.
SAMPLE: # Display the client certificate version
   $version = ssl.clientCertVersion();
   log.info( "Certificate version: ".$version );

TITLE: ssl.clientCertEndDate
SEEALSO: ssl.isSSL, ssl.clientCertStartDate, sys.timeToString
DESCRIPTION: If the connection is SSL-encrypted and the client has
supplied a valid certificate, then this
returns the date when the certificate is no longer valid.
The date is an integer, representing seconds since the
epoch.
Otherwise, this function returns 0.
SAMPLE: # Display the client certificate end date
   $end = ssl.clientCertEndDate();
   log.info( "Certificate is valid until ".
      sys.timeToString( $end ) );

TITLE: ssl.getTLSServerName
SEEALSO: ssl.isSSL, ssl.setTLSServerName
DESCRIPTION: Returns the hostname provided by the client using the TLS 1.0
'server_name' extension. If this connection is not using SSL decryption
or the client did use the extension then this function returns the empty
string.
SAMPLE: $name = ssl.getTLSServerName();
   log.info( "The client provided " .
             "the server name: " . $name );

TITLE: ssl.serverCertEndDate
SEEALSO: ssl.isSSL, ssl.serverCertStartDate, sys.time, sys.timeToString
DESCRIPTION: Returns the date that the certificate being used by your traffic manager for this
connection became valid. The date is an integer, representing the number
of seconds since the epoch. If this virtual server is not using SSL
decryption then this function will return the empty string.
SAMPLE: $end = ssl.serverCertEndDate();
   if( $time < sys.time() ) {
      log.warn( "Using out of date certificate!" );
   }

TITLE: ssl.clientCertPublicKey
SEEALSO: ssl.isSSL
DESCRIPTION: Returns a string representation of
the public key of the client certificate, or the empty
string if the connection was not SSL-encrypted or if a
certificate was not supplied.
SAMPLE: # Display the client certificate key
   $key = ssl.clientCertPublicKey();
   log.info( "Certificate key: ".$key );

TITLE: ssl.serverCertHash
SEEALSO: ssl.isSSL, ssl.serverCertSHA1, sys.isFIPS
DESCRIPTION: Returns the hex-encoded MD5 hash of the certificate being used by
your traffic manager for this connection. If this virtual server
is not using SSL decryption or if the MD5 algorithm is unavailable 
(e.g. when operating in FIPS Mode) then this function will return
the empty string.
SAMPLE: $md5 = ssl.serverCertHash();
   log.info( "Server Cert Hash: " . $md5 );

TITLE: ssl.requireCert
SEEALSO: ssl.clientSupportsSecureRenegotiation, ssl.requestCert
DESCRIPTION: Initiates an SSL renegotiation with the client, requiring a
certificate.  If the client fails to provide a valid cert, the
connection is closed with an SSL alert of type handshake_failure.
Otherwise, rule processing continues after the re-handshake is
complete.  If the client had already provided a certificate, this
function does nothing and rule processing continues.
If the underlying connection is not SSL, the transaction is aborted
(i.e., this is interpreted as a failed re-handshake).
Note that using this function overrides the setting
ssl!ssl3_allow_rehandshake.  It is strongly recommended to check
for client-side support of RFC 5746 before using it, see
ssl.clientSupportsSecureRenegotiation.
SAMPLE: $path = http.getPath();
   if( string.startsWith( $path, "/wikileaks" ) ) {
      # Only let certain people see this data ...
      if( ssl.clientSupportsSecureRenegotiation() ) {
         ssl.requireCert();
      } else {
         http.sendResponse( 403, "text/plain",
            "Please upgrade your browser", "" );
      }
   }

TITLE: ssl.clientCertIssuer
SEEALSO: ssl.isSSL
DESCRIPTION: Returns a string representing the
issuer of the client certificate, or the empty string if the
connection was not SSL-encrypted or if a certificate was not
supplied.
SAMPLE: # Display the client certificate issuer
   $issuer = ssl.clientCertIssuer();
   log.info( "Certificate issuer: ".$issuer );

TITLE: ssl.clientCertStartDate
SEEALSO: ssl.isSSL, ssl.clientCertEndDate, sys.timeToString
DESCRIPTION: If the connection is SSL-encrypted and the client has
supplied a valid certificate, then this
returns the date when the certificate became valid. The date
is an integer, representing seconds since the epoch.
Otherwise, this function returns 0.
SAMPLE: # Display the client certificate start date
   $start = ssl.clientCertStartDate();
   log.info( "Certificate is valid from ".
      sys.timeToString( $start ) );

TITLE: ssl.clientCertChain
SEEALSO: ssl.isSSL, ssl.clientCert
DESCRIPTION: Returns the PEM encoded client certificate chain, or the
empty string if the connection was not SSL-encrypted or if a
certificate was not supplied.
SAMPLE: # Display the client certificate data
   $cert = ssl.clientCertChain();
   log.info( "Certificate Chain: " . $cert );

TITLE: ssl.clientCertAlgorithm
SEEALSO: ssl.isSSL
DESCRIPTION: If the connection is SSL-encrypted and the client has supplied a valid
certificate, then this returns either 'rsaEncryption',
'md2withRSAEncryption', 'md5withRSAEncryption', 'sha1withRSAEncryption',
'RSA', 'sha256withRSAEncryption', 'sha384withRSAEncryption', 
'sha512withRSAEncryption', 'DSA with SHA-1', 'DSA with SHA-224' or
'DSA with SHA-256' depending on the certificate's encryption and hash
algorithms. Otherwise, it returns the empty string.
SAMPLE: # Display the client certificate algorithm
   $alg = ssl.clientCertAlgorithm();
   log.info( "Certificate alg: ".$alg );

TITLE: ssl.serverCertSerial
SEEALSO: ssl.isSSL
DESCRIPTION: Returns a string with the serial number (in hex) of the certificate
being used by your traffic manager for this connection. If
this virtual server is not using SSL decryption then this function will
return the empty string.
SAMPLE: $serial = ssl.serverCertSerial();
   log.info( "Server certificate serial: " . $serial );

TITLE: ssl.clientCertSerialDec
SEEALSO: ssl.clientCertSerial
DESCRIPTION: Returns the serial (in decimal) of the client certificate,
or the empty string if the connection was not SSL-encrypted
or if a certificate was not supplied.
SAMPLE: # Display the client certificate serial in decimal
   $serial = ssl.clientCertSerialDec();
   log.info( "Certificate serial: ".$serial );

TITLE: ssl.getServerCloseAlert
SEEALSO: ssl.isSSL, ssl.setServerCloseAlert, ssl.setClientCloseAlert, ssl.getClientCloseAlert
DESCRIPTION: Check whether your traffic manager will send the SSL server an SSL close alert prior
to terminating the TCP connection.  The function will return a value of 1
if close alerts are enabled, and 0 if they are disabled.  The function
will return -1 if the connection is not an SSL connection, or if the
server-side connection is not yet established (i.e. it should typically
only be used in response rules.)
SAMPLE: if( ssl.isSSL() ) {
      $alert = ssl.getServerCloseAlert();
      log.info( "server close alert: " . $alert );
   }

TITLE: ssl.getClientCloseAlert
SEEALSO: ssl.isSSL, ssl.setClientCloseAlert, ssl.setServerCloseAlert, ssl.getServerCloseAlert
DESCRIPTION: Check whether your traffic manager will send the SSL client an SSL close alert prior
to terminating the TCP connection.  The function will return a value of 1
if close alerts are enabled, and 0 if they are disabled.  The function
will return -1 if the client-side connection is not established, or is
not an SSL connection.
SAMPLE: if( ssl.isSSL() ) {
      $alert = ssl.getClientCloseAlert();
      log.info( "client close alert: " . $alert );
   }

TITLE: ssl.clientSupportsSecureRenegotiation
SEEALSO: ssl.requireCert, ssl.requestCert, ssl.isSSL
DESCRIPTION: Returns true if the client is RFC 5746 compliant, else false.
SAMPLE: if( ssl.isSSL() ) {
      # gather statistics about client-side support
      # for RFC 5746
      if( ssl.clientSupportsSecureRenegotiation() ) {
         counter.increment( 1 );
      } else {
         counter.increment( 2 );
      }
   }

TITLE: ssl.serverCertSubject
SEEALSO: ssl.isSSL, ssl.serverCertIssuer
DESCRIPTION: Returns the subject data of the certificate being used by
your traffic manager for this connection (each field is separated by commas). If this
virtual server is not using SSL decryption then this function will return
the empty string.
SAMPLE: # Returns the subject information of the cert,
   # e.g. C=GB, L=Cambridge, O=Riverbed, CN=foo.com
   $subject = ssl.serverCertSubject();
   log.info( "Server cert subject: " . $subject );

TITLE: ssl.serverCertSHA1
SEEALSO: ssl.isSSL, ssl.serverCertHash
DESCRIPTION: Returns the hex-encoded SHA1 fingerprint of the certificate being used by
your traffic manager for this connection. If this virtual server
is not using SSL decryption then this function will return the empty
string.
SAMPLE: $sha1 = ssl.serverCertSHA1();
   log.info( "Server Cert SHA1 Fingerprint: " . $sha1 );

TITLE: ssl.serverCertAlgorithm
SEEALSO: ssl.isSSL
DESCRIPTION: Returns a description of the
algorithms being used by the virtual server's current certificate. This
will either be "rsaEncryption", "md2withRSAEncryption",
"md5withRSAEncryption", "sha1withRSAEncryption", "RSA",
"sha256withRSAEncryption", "sha384withRSAEncryption", 
"sha512withRSAEncryption", "DSA with SHA-1", "DSA with SHA-224" or
"DSA with SHA-256". If this virtual server is not using SSL decryption (or
the algorithm type is not recognised) then this function will return the
empty string.
SAMPLE: $alg = ssl.serverCertAlgorithm();
   log.info( "Server cert algorithm: " . $alg );

TITLE: ssl.serverCertName
SEEALSO: ssl.isSSL
DESCRIPTION: Returns the name of the certificate being used by the
virtual server for this connection. This is the name used to identify the
certificate in the UI. If this virtual server is not using SSL decryption
then this function will return the empty string.
SAMPLE: $name = ssl.serverCertName();
   log.info( "Using server cert: " . $name );

TITLE: ssl.clientCertCommonName
SEEALSO: ssl.isSSL
DESCRIPTION: Returns the common name of the client certificate, or the empty string if
the connection was not SSL-encrypted or if a certificate was
not supplied.
SAMPLE: $common_name = ssl.clientCertCommonName();
   log.info( "Certificate common name: ".$common_name );

TITLE: ssl.serverCert
SEEALSO: ssl.isSSL
DESCRIPTION: Returns a PEM encoded version of the entire certificate being used by
your traffic manager for this connection. If this virtual server is not using SSL
decryption then this function will return the empty string.
SAMPLE: $cert = ssl.serverCert();
   log.info( "Server certificate: " . $cert );

TITLE: ssl.clientCertSHA1
SEEALSO: ssl.isSSL, ssl.clientCertHash
DESCRIPTION: Returns a hex-encoded SHA1 fingerprint of the
client certificate, or the empty string if the connection
was not SSL-encrypted or if a certificate was not supplied.
SAMPLE: # Display the client certificate SHA1 fingerprint
   $sha1 = ssl.clientCertSHA1();
   log.info( "Certificate SHA1 fingerprint: " . $sha1 );

TITLE: ssl.clientCert
SEEALSO: ssl.isSSL
DESCRIPTION: Returns the PEM encoded client certificate, or the
empty string if the connection was not SSL-encrypted or if a
certificate was not supplied.
SAMPLE: # Display the client certificate data
   $cert = ssl.clientCert();
   log.info( "Certificate: " . $cert );

TITLE: ssl.serverCertCommonName
SEEALSO: ssl.isSSL
DESCRIPTION: Returns the common name of the certificate being used by
your traffic manager for this connection. If this virtual server
is not using SSL decryption then this function will return the empty
string.
SAMPLE: $common_name = ssl.serverCertCommonName();
   if( http.getHostHeader() != $common_name ) {
      log.warn( "Client browser may report certificate".
         " as invalid." );
   }

TITLE: ssl.serverCertVersion
SEEALSO: ssl.isSSL
DESCRIPTION: Returns the version of the certificate being used by your traffic manager for this
connection (either "1", "2" or "3"). If this virtual server is not using
SSL decryption then this function will return the empty string.
SAMPLE: $version = ssl.serverCertVersion();
   log.info( "Server Cert Version: " . $version );

TITLE: ssl.serverCertIssuer
SEEALSO: ssl.isSSL, ssl.serverCertSubject
DESCRIPTION: Returns a string with the issuer data of the certificate being used by
your traffic manager for this connection (each field is separated by commas).
If this virtual server is not using SSL decryption then this function will
return the empty string.
SAMPLE: $issuer = ssl.serverCertIssuer();
   if( ssl.serverCertSubject() == $issuer ) {
      log.info( "Certificate is self-signed" );
   }

TITLE: ssl.serverSiteName
SEEALSO: ssl.isSSL
DESCRIPTION: Returns the hostname or IP address that was used
to select the current server certificate. If the default certificate was
used, or the current connection is not encrypted, the empty string is 
returned.
SAMPLE: $site_name = ssl.serverSiteName();
   if( ssl.isSSL() && $site_name == "" ) {
      # The default certificate was used
   }

TITLE: ssl.setClientCloseAlert
SEEALSO: ssl.isSSL, ssl.getClientCloseAlert, ssl.setServerCloseAlert, ssl.getServerCloseAlert
DESCRIPTION: Sets whether your traffic manager will send the SSL client an SSL close alert prior
to terminating the TCP connection. An value of 0 will disable close
alerts, a non-zero value will enable close alerts.  This setting also
applies to related connections, such as data transfer channels related to
FTP command channels.  If the connection with the client is not an SSL
connection then calling this function will do nothing.
SAMPLE: if( ssl.isSSL() ) {
      # Ensure close alerts are enabled.
      ssl.setClientCloseAlert( 1 );
   }
PARAMETERS: alertflag

TITLE: ssl.clientCertStatus
SEEALSO: ssl.isSSL
DESCRIPTION: Returns 'OK' if the client
certificate is valid, or 'NoClientCert' if it was missing or
not valid. It returns the empty string if the connection was
not SSL-encrypted.
SAMPLE: if( ssl.clientCertStatus() != "OK" ) {
      # Handle missing client certificate ...
   }

TITLE: ssl.isSSL
DESCRIPTION: Returns 1 if this connection from the remote
client was SSL encrypted and your traffic manager has decrypted
the traffic. Otherwise, it returns 0.
SAMPLE: if( ssl.isSSL() ) {
      # This is an SSL-encrypted connection ...
   }

TITLE: ssl.serverCertStartDate
SEEALSO: ssl.isSSL, ssl.serverCertEndDate, sys.time, sys.timeToString
DESCRIPTION: Returns the date the certificate being used by
your traffic manager for this connection became valid. The date is an
integer, representing the number of seconds since the epoch. If this
virtual server is not using SSL decryption then this function will
return the empty string.
SAMPLE: $start = ssl.serverCertStartDate();
   log.info( "Server Certificate is valid from ".
       sys.timeToString( $start ) );

TITLE: ssl.setServerCloseAlert
SEEALSO: ssl.isSSL, ssl.getServerCloseAlert, ssl.setClientCloseAlert, ssl.getClientCloseAlert
DESCRIPTION: Sets whether your traffic manager will send the SSL server an SSL close alert prior
to terminating the TCP connection. A value of 0 will disable close
alerts, a non-zero value will enable close alerts.  This setting also
applies to related connections, such as data transfer channels related to
FTP command channels.  Note that this function will only work on SSL
connections and the server side connection must be established (i.e. it
should typically only be used in response rules.)
SAMPLE: if( ssl.isSSL() ) {
      # Ensure close alerts are enabled.
      ssl.setServerCloseAlert( 1 );
   }
PARAMETERS: alertflag

TITLE: ssl.sslSessionID
SEEALSO: ssl.isSSL
DESCRIPTION: Returns the session ID of the current SSL connection as
a hex-encoded string. If the connection was not
SSL-encrypted then an empty string is returned.
This function can also be used with SSL pass-through
traffic.  When used in a request rule the traffic
manager will look for a session ID provided in the
ClientHello.  Clients provide session IDs only if they
are trying to resume a previously used SSL session.  If
the client did not provide a session ID, this function
will return an empty string. 
When used in a response rule with SSL pass-through
traffic, this function will return the session ID
provided in the ServerHello.  This might be the same as
the session ID sent by the client If the client
attempted to resume the session, but this is not
guaranteed.
SAMPLE: # Get the SSL session ID
   $sessionid = ssl.sslSessionID();
   log.info( "SessionID: " . $sessionid );

TITLE: ssl.setTLSServerName
SEEALSO: ssl.isSSL, ssl.getTLSServerName
DESCRIPTION: Instructs your traffic manager to use the specified hostname when using the TLS 1.0
server_name extension. This method only works if the back end pool has
SSL encryption and the server_name option enabled. Using the empty string
as this function's parameter will make your traffic manager use the hostname of the node
that it is connecting to.
SAMPLE: # Use the hostname foo in the TLS 1.0 server_name
   # extension
   ssl.setTLSServerName( "foo" );
PARAMETERS: servername

TITLE: ssl.clientCertHash
SEEALSO: ssl.isSSL, ssl.clientCertSHA1, sys.isFIPS
DESCRIPTION: Returns a hex-encoded MD5 hash of the
client certificate, or the empty string if the connection
was not SSL-encrypted, if a certificate was not supplied or
if the MD5 algorithm is unavailable (e.g. when operating in 
FIPS Mode).
SAMPLE: # Display the client certificate hash
   $hash = ssl.clientCertHash();
   log.info( "Certificate hash: ".$hash );

TITLE: ssl.clientCipher
SEEALSO: ssl.isSSL
DESCRIPTION: Returns the cipher used by the client to
SSL-encrypt the connection. It returns an empty string if
the connection was not SSL-encrypted.
The string returned contains the cipher algorithm, SSL
version and effective cipher strength, such as:
&nbsp;&nbsp;SSL_RSA_WITH_AES_128_CBC_SHA256, version=TLSv1.2, 
bits=128
SAMPLE: # Get the encryption cipher
   $cipher = ssl.clientCipher();
   log.info( "Encrypted with ".$cipher );

TITLE: ssl.serverCertPublicKey
SEEALSO: ssl.isSSL
DESCRIPTION: Returns information about the public key of the certificate
being used by your traffic manager for this connection. If this
virtual server is not using SSL decryption then this function will
return the empty string.
SAMPLE: # Returns public key information,
   # e.g.  "RSA (1024 bit)"
   $public_key = ssl.serverCertPublicKey();
   log.info( "Certificate public key: " . $public_key );

TITLE: ssl.clientCertSubject
SEEALSO: ssl.isSSL
DESCRIPTION: Returns a string representing the
subject of the client certificate, or the empty string if
the connection was not SSL-encrypted or if a certificate was
not supplied.
SAMPLE: # Display the client certificate subject
   $subject = ssl.clientCertSubject();
   log.info( "Certificate subject: ".$subject );

TITLE: ssl.requestCert
SEEALSO: ssl.clientSupportsSecureRenegotiation, ssl.requireCert
DESCRIPTION: Initiates an SSL renegotiation with the client, requesting a
certificate.  Even if the client fails to provide a certificate,
rule processing continues after the re-handshake is complete.
If the client had already provided a certificate, this
function does nothing and rule processing continues.
If the underlying connection is not SSL, the transaction is aborted
(i.e., this is interpreted as a failed re-handshake).
Note that using this function overrides the setting
ssl!ssl3_allow_rehandshake.  It is strongly recommended to check
for client-side support of RFC 5746 before using it, see
ssl.clientSupportsSecureRenegotiation.
SAMPLE: $path = http.getPath();
   if( string.startsWith( $path, "/wikileaks" ) ) {
      # Only let certain people see this data ...
      if( ssl.clientSupportsSecureRenegotiation() ) {
         ssl.requestCert();
         if( ssl.clientCertStatus() != "OK" ) {
            http.sendResponse( 403, "text/plain",
               "Valid SSL credentials are required",
               "" );
         } else {
            # allow the original request to
            # continue, client provided an
            # acceptable certificate.
            break;
         }
      } else {
         http.sendResponse( 403, "text/plain",
            "Please upgrade your browser", "" );
      }
   }

TITLE: ssl.clientCertSerial
SEEALSO: ssl.clientCertSerialDec
DESCRIPTION: Returns the serial (in hex) of the client certificate,
or the empty string if the connection was not SSL-encrypted
or if a certificate was not supplied.
SAMPLE: # Display the client certificate serial
   $serial = ssl.clientCertSerial();
   log.info( "Certificate serial: ".$serial );

TITLE: stats.getServerResponseTime
DESCRIPTION: Returns the amount of time, in milliseconds, between sending the first
byte of the request to the server, and receiving a response.
In the case of HTTP, SIP and RTSP this is the time until the traffic manager
has received a full set of headers from the server. For all other protocols,
it is the time until the traffic manager has received the first byte of the
response from the server.
If the server has not sent a response, this function will return 0.
SAMPLE: # Emit an event when the server takes a
   # particularly long time to respond to a
   # request.
   if( stats.getServerResponseTime() > 30000 ) {
      event.emit( "slowresponse", http.getRawURL() );
   }

TITLE: stats.getQueueTime
DESCRIPTION: Returns the amount of time, in milliseconds, that the client spent
queueing to connect to the server due to backend connection limits.
SAMPLE: # Keep a record of how many connections
   # queue for longer than 1 second.
   if( stats.getQueueTime() > 1000 ) {
      # Increment user counter 1
      counter.increment( 1 );
   }

TITLE: stats.getTransactionDuration
DESCRIPTION: Returns the amount of time, in milliseconds, for which the current
transaction has been active, from the time the first byte was received
from the client to the current time.
If used in a transaction completion rule, this will be the total duration of
the transaction.
SAMPLE: # Record this connection on the recent connections
   # page if it took more than 5 seconds to complete
   if( stats.getTransactionDuration() > 5000 ) {
      recentconns.include();
   }

TITLE: sip.getResponseHeaderNames
REPLACEDBY: sip.listResponseHeaderNames
SEEALSO: sip.getResponseHeader, sip.removeResponseHeader, sip.getRequestHeaderNames, sip.getResponseHeaders
DESCRIPTION: Returns a list of all the headers that are present in the response.
The headers are returned as a single string, separated by spaces.
SAMPLE: # Log all of the header names and values
   $headers = sip.getResponseHeaderNames();
   while( $headers != "" ) {
      $p = string.find( $headers, " " );
      if( $p >= 0 ) {
         $header = string.left( $headers, $p );
         $headers = string.skip( $headers, $p + 1 );
      } else {
         $header = $headers;
         $headers = "";
      }
      log.info( $header . "=" .
                sip.getResponseHeader( $header ));
   }

TITLE: sip.getResponseBodyLines
SEEALSO: sip.getResponseBody, sip.setResponseBody, sip.getRequestBodyLines
DESCRIPTION: Splits the body data of the SIP response into individual lines and
returns an array of the data.
If the response has no body, then this returns an empty array.
SAMPLE: # Get the response body
   $sdp = sip.getResponseBodyLines();
# Process it line-by-line
   foreach( $line in $sdp ) {
      # ...
   }

TITLE: sip.addRequestHeader
SEEALSO: sip.setRequestHeader, sip.getRequestHeader, sip.removeRequestHeader, sip.requestHeaderExists
DESCRIPTION: Modifies the current SIP request, adding a SIP header with the supplied
value. If the header already exists, then this value will be appended to
the existing value. If at_top is set then the value will be prepended to
the header. The header name lookup is case-insensitive.
You can specify the long or short form of the header name,
so 'Via' and 'v' will both match the Via header field.
SAMPLE: # Add a priority header if it is missing
   if( !sip.requestHeaderExists( "Priority" ) ) {
      sip.addRequestHeader( "Priority", "normal", 0 );
   }
PARAMETERS: name, value, at_top

TITLE: sip.getRequest
SEEALSO: sip.listRequestHeaderNames, sip.getRequestHeader
DESCRIPTION: Returns the full SIP request and headers, but does not include any body
data.
SAMPLE: # Get the full SIP headers
  $request = sip.getRequest();

TITLE: sip.setResponseBody
SEEALSO: sip.getResponseBody, sip.setRequestBody
DESCRIPTION: Sets the response body for this SIP response, replacing any response body
already present.
This also updates the 'Content-Length' header in the
response to the length of the new body data. If the server
is still sending the original response body when this
function is called, the connection to the server will be
harmlessly dropped.
SAMPLE: $body = sip.getResponseBody();
   # Forward all data from the client through an
   #  intermediate machine
   $body = string.regexsub( $body,
                            "c=.*",
                            "c=IN IP4 "
                           ."192.168.9.100",
                            "g");
   sip.setResponseBody( $body );
PARAMETERS: body

TITLE: sip.getResponseCode
SEEALSO: sip.setResponseCode
DESCRIPTION: Returns the status code from the first line of the SIP response.
SAMPLE: # Is the status '200'
   if( sip.getResponseCode() == 200 ) {
      # ...
   }

TITLE: sip.responseHeaderExists
SEEALSO: sip.getResponseHeader
DESCRIPTION: Reports if a named header
exists in the SIP response. It is similar to
sip.getResponseHeader(), but makes it possible to
distinguish between a header not being present and a header
having no value.
The header name lookup is case-insensitive.
You can specify the long or short form of the header name,
so 'Via' and 'v' will both match the Via header field.
It returns 1 if the header exists, and 0 if it does not.
SAMPLE: # Test for the 'Warning' response header
   if( sip.responseHeaderExists( "Warning" ) ) {
      # ...
   }
PARAMETERS: name

TITLE: sip.getMethod
SEEALSO: sip.setMethod
DESCRIPTION: Returns the SIP method that was used to make the request, such as INVITE
or REGISTER.
SAMPLE: # Direct REGISTER requests to Registrar
   if( sip.getMethod() == "REGISTER" ) {
      # set pool to Registrar pool
   }

TITLE: sip.removeResponseHeader
SEEALSO: sip.setResponseHeader, sip.getResponseHeader, sip.addResponseHeader, sip.removeRequestHeader
DESCRIPTION: Removes a header from the SIP response. 
The header name lookup is case-insensitive.
You can specify the long or short form of the header name,
so 'Via' and 'v' will both match the Via header field.
SAMPLE: # Remove the server header, if it exists, to avoid
   #  application-specific exploits being used
   sip.removeResponseHeader( "Server" );
PARAMETERS: name

TITLE: sip.listRequestHeaderNames
SEEALSO: sip.getRequestHeader, sip.removeRequestHeader, sip.getRequest, sip.listResponseHeaderNames, sip.getRequestHeaders
DESCRIPTION: Returns a list of all the headers that
are present in the request.
The headers are returned as an array.
SAMPLE: # Log all of the header names and values
   $headers = sip.listRequestHeaderNames();
   foreach( $header in $headers ) {
      log.info($header . "=" .
               sip.getRequestHeader($header));
   }

TITLE: sip.requestHeaderExists
SEEALSO: sip.getRequestHeader
DESCRIPTION: Reports if a named header exists
or not. It is similar to sip.getRequestHeader(), but makes it
possible to distinguish between a header not being present
and a header having no value.
The header name lookup is case-insensitive.
You can specify the long or short form of the header name,
so 'Via' and 'v' will both match the Via header field.
It returns 1 if the header exists, and 0 if it does not.
SAMPLE: # Add a Priority header if it is missing
   if( !sip.requestHeaderExists( "Priority" ) ) {
      sip.addRequestHeader( "Priority", "normal", 0 );
   }
PARAMETERS: name

TITLE: sip.setRequestHeader
SEEALSO: sip.addRequestHeader, sip.getRequestHeader, sip.requestHeaderExists, sip.removeRequestHeader
DESCRIPTION: Sets a SIP header, replacing any existing value if the header already
exists.
You can specify the long or short form of the header name,
so 'Via' and 'v' will both match the Via header field.
SAMPLE: # Add a reference to an information page about
   #  a known company when a call is received from
   #  them, and an icon to help identify them.
   if( sip.getRequestHeader( "Organization" )
                                    == "Riverbed" ) {
      sip.setRequestHeader( "Call-Info",
         "&lt;http://www.riverbed.com/" .
         "assets/img/logo.gif&gt; ;purpose=icon,".
         "&lt;http://www.riverbed.com/" .
         "about/&gt; ;purpose=info"
      );
   }
PARAMETERS: name, value

TITLE: sip.getRequestHeaderNames
REPLACEDBY: sip.listRequestHeaderNames
SEEALSO: sip.listRequestHeaderNames
DESCRIPTION: Returns a list of all the headers that are present in the request.
The headers are returned as a single string, separated by spaces.
SAMPLE: # Log all of the header names and values
   $headers = sip.getRequestHeaderNames();
   while( $headers != "" ) {
      $p = string.find( $headers, " " );
      if( $p >= 0 ) {
         $header = string.left( $headers, $p );
         $headers = string.skip( $headers, $p + 1 );
      } else {
         $header = $headers;
         $headers = "";
      }
      log.info($header . "=" .
               sip.getRequestHeader( $header ));
   }

TITLE: sip.getRequestBody
SEEALSO: sip.setRequestBody, sip.getResponseBody, sip.getRequestBodyLines
DESCRIPTION: Returns the data contained in the body of the request.
SAMPLE: # Get the inbound Session Description to check for
   #  unsupported content
   if( sip.getMethod() == "INVITE" ) {
      $body = sip.getRequestBody();
      # inspect packet body
   }

TITLE: sip.setResponseCode
SEEALSO: sip.getResponseCode
DESCRIPTION: Sets the status code and message in the
first line of the SIP response.
SAMPLE: # Redirect client to a backup server if the proxy
   #  has an internal error.
   if( sip.getResponseCode() == "500" ) {
      sip.setResponseHeader( "Contact",
                  "sip:backup.example.com" );
      sip.setResponseCode( "305", "Use Proxy" );
   }
PARAMETERS: code, [message]

TITLE: sip.getResponseHeader
SEEALSO: sip.setResponseHeader, sip.addResponseHeader, sip.removeResponseHeader, sip.responseHeaderExists, sip.getRequestHeader, sip.getResponseHeaders
DESCRIPTION: Returns the value of a header in the SIP response, or the empty string if
the header does not exist. The header name lookup is case-insensitive.
You can specify the long or short form of the header name,
so 'Via' and 'v' will both match the Via header field.
SAMPLE: # Get the route all future requests will take
   $rr = sip.getResponseHeader( "Record-Route" );
PARAMETERS: name

TITLE: sip.setRequestURI
SEEALSO: sip.getRequestURI
DESCRIPTION: Sets the target of the SIP request.
SAMPLE: # If the user has recently changed username, rewrite
   #  requests that address their old username.
   if( sip.getRequestURI() == "sip:jond@example.com" ) {
      sip.setRequestURI( "sip:jdoe@example.com" );
   }
PARAMETERS: uri

TITLE: sip.addResponseHeader
SEEALSO: sip.setResponseHeader, sip.getResponseHeader, sip.removeResponseHeader, sip.addRequestHeader
DESCRIPTION: Adds a header to the SIP response
that will be sent back to the client. If the header
already exists in the response, via a case-insensitive
lookup, then this value will be appended to the existing 
value. If at_top is set then the value will be prepended 
to the existing value.
You can specify the long or short form of the header name,
so 'Via' and 'v' will both match the Via header field.
SAMPLE: # Use an internal webpage to see if the callee is
   #  logged into their system
   $loggedin = http.request.get(
                     "http://internal.example.com/".
                     "lookupuser=bob" );
   if( $loggedin = "No" ) {
      # Set a warning if they are not
      sip.addResponseHeader( "Warning",
         "399 riverbed.com User is not logged in. ".
         " Your call might not be answered.", 0 );
   }
PARAMETERS: name, value, at_top

TITLE: sip.listResponseHeaderNames
SEEALSO: sip.getResponseHeader, sip.removeResponseHeader, sip.listRequestHeaderNames, sip.getResponseHeaders
DESCRIPTION: Returns a list of all the headers that are present in the response.
The headers are returned as an array.
SAMPLE: # Log all of the header names and values
   $headers = sip.listResponseHeaderNames();
   foreach( $header in $headers ) {
      log.info($header . "=" .
               sip.getResponseHeader($header));
   }

TITLE: sip.redirect
SEEALSO: sip.sendResponse
DESCRIPTION: Sends back a 302 Moved Temporarily response.
This response instructs the client to retry the request at the new
address(es) given in the 'contact' parameter. This is equivalent to
sip.sendResponse( "302", "Moved Temporarily", "Contact: " .
$uri, "" );
SAMPLE: # Example's offices are closed, redirect all their
   # calls to voicemail.
   $user = sip.getRequestURI();
   if( string.EndsWith( $user, "@example.com" ) ) {
      $username = string.left( $user,
                         string.find( $user, "@" ) );
      $contact = $username . "@voicemail.example.com";
      sip.redirect( $contact );
   }
PARAMETERS: contact

TITLE: sip.getRequestURI
SEEALSO: sip.setRequestURI
DESCRIPTION: Returns the target of the SIP request.
SAMPLE: # Check a status file to see if this user
   #  wants to accept calls.
   if( sip.getRequestURI() == "sip:bob@example.com" ) {
      # see if this user is available
      $status = http.request.get(
         "http://www.example.com/status.cgi?user=bob" );
      if( $status != "available" ) {
         sip.sendResponse( "486",
                       "User is currently " . $status );
      }
   }

TITLE: sip.sendResponse
SEEALSO: sip.redirect
DESCRIPTION: Sends back a SIP response to the client
instead of balancing the request via a pool onto a node.
The Statue-Line of the response has the form:
SIP/2.0 code reason
Via, Record-Route, From, To, CSeq, Call-ID and Content-Length
headers are automatically added to the response.
Any headers supplied in the headers parameter will also be added
to the response. Multiple headers must be separated by \r\n.
Any body data specified is appended to the response.
SAMPLE: # Send Forbidden response if the user is blacklisted
   $contact = sip.getRequestHeader( "Contact" );
   if( string.contains( $contact, "10.234.12.42" ) ) {
      sip.sendResponse( "403", "Forbidden" );
   }
PARAMETERS: code, reason, [headers], [body]

TITLE: sip.setRequestBody
SEEALSO: sip.getRequestBody
DESCRIPTION: Sets the request body for this SIP request
to the supplied string, replacing any request body already
present.
This also updates the 'Content-Length' header in the request
to the length of the new body data.
SAMPLE: $body = sip.getRequestBody();
   # Forward all data from the server through an
   #  intermediate machine
   $body = string.regexsub($body, request.getRemoteIP(),
                           "192.168.9.100", "g");
   sip.setRequestBody( $body );
PARAMETERS: body

TITLE: sip.getRequestHeader
SEEALSO: sip.setRequestHeader, sip.addRequestHeader, sip.removeRequestHeader, sip.requestHeaderExists, sip.getRequestHeaders
DESCRIPTION: Returns the named SIP header in the SIP request, or the empty string if
the header does not exist. The header name lookup is case-insensitive.
You can specify the long or short form of the header name,
so 'Via' and 'v' will both match the Via header field.
SAMPLE: # Get information about the UAC
   #  originating this request
   $uac = sip.getRequestHeader( "User-Agent" );
# this returns the same value
   $uac = sip.getRequestHeader( "user-agent" );
PARAMETERS: name

TITLE: sip.removeRequestHeader
SEEALSO: sip.getRequestHeader, sip.addRequestHeader, sip.setRequestHeader
DESCRIPTION: Removes a header if it exists in the request. The header name
lookup is case-insensitive.
You can specify the long or short form of the header name,
so 'Via' and 'v' will both match the Via header field.
SAMPLE: # Filter out any custom alert tones that have
   #  been specified by the client
   sip.removeRequestHeader( "Alert-Info" );
PARAMETERS: name

TITLE: sip.setMethod
SEEALSO: sip.getMethod
DESCRIPTION: Sets the SIP method to use when forwarding the request via a pool to a
node.
SAMPLE: # Force non-standard PING requests to become OPTIONS
   if( sip.getMethod() == "PING" ) {
      sip.setMethod( "OPTIONS" );
      sip.setRequestHeader( "Max-Forwards", "1" );
   }
PARAMETERS: method

TITLE: sip.getResponseBody
SEEALSO: sip.setResponseBody, sip.getRequestBody, sip.getResponseBodyLines
DESCRIPTION: Returns the session description of the SIP response.
SAMPLE: # Read the entire response body
   $sdp = sip.getResponseBody();

TITLE: sip.setResponseHeader
SEEALSO: sip.addResponseHeader, sip.getResponseHeader, sip.removeResponseHeader, sip.setRequestHeader
DESCRIPTION: Sets a header in the SIP response
that will be sent back to the client. If the header
already exists in the response, via a case-insensitive 
lookup, then it will be replaced with this new value.
You can specify the long or short form of the header name,
so 'Via' and 'v' will both match the Via header field.
SAMPLE: # Change the server string
   sip.setResponseHeader( "Server",
           "Stingray 5.0 (Linux/i386)" );
PARAMETERS: name, value

TITLE: sip.getResponse
SEEALSO: sip.listResponseHeaderNames, sip.getResponseHeader
DESCRIPTION: Returns the full SIP response and headers, but does not include any body
data.
SAMPLE: # Get the full SIP headers
  $request = sip.getResponse();

TITLE: sip.getRequestHeaders
SEEALSO: sip.getRequestHeader, sip.setRequestHeader, sip.addRequestHeader, sip.removeRequestHeader, sip.requestHeaderExists, sip.getResponseHeaders
DESCRIPTION: Returns a hash containing all the header names in the request
mapped to their values.
SAMPLE: # Show all the headers in the request
   $headers = sip.getRequestHeaders();
foreach( $header in hash.keys( $headers ) ) {
      log.info( $header . "=" . $headers[$header] );
   }

TITLE: sip.getResponseHeaders
SEEALSO: sip.getResponseHeader, sip.setResponseHeader, sip.addResponseHeader, sip.removeResponseHeader, sip.responseHeaderExists, sip.getRequestHeaders
DESCRIPTION: Returns a hash containing all the header names in the response
mapped to their values.
SAMPLE: # Show all the headers in the response
   $headers = sip.getResponseHeaders();
foreach( $header in hash.keys( $headers ) ) {
      log.info( $header . "=" . $headers[$header] );
   }

TITLE: sip.getRequestBodyLines
SEEALSO: sip.getRequestBody, sip.getResponseBodyLines, sip.setRequestBody
DESCRIPTION: Splits the body data of the SIP request into individual lines and
returns an array of the data.
If the request has no body, then this returns an empty array.
SAMPLE: # Read the request body
   $body = sip.getRequestBodyLines();
# See if it's an SDP
   if( string.startswith( $body[0], "v=0" ) ) {
      # Process SDP data
   }

TITLE: sip.getVersion
DESCRIPTION: Returns the version of the SIP protocol being used. It returns the
version string in the SIP/version specifier in the first line of the SIP
request, such as 'SIP/2.0'.
SAMPLE: # Get the SIP version
   $version = sip.getVersion();

TITLE: http.aptimizer.use
SEEALSO: http.aptimizer.bypass
DESCRIPTION: Use the specified Aptimizer scope and profile to optimize
web content served to the client that sent this request.
If the named Aptimizer scope or profile does not exist then a
warning message will be logged and the traffic manager will
choose a scope matching the request based on the Aptimizer
settings configured for the virtual server, and use the associated
profile. If no scope matches the request then no optimization
will occur.
If the virtual server does not have Aptimizer enabled, then
a warning message will be logged and no optimization will occur.
SAMPLE: # Optimize web content for clients based in Australia
   $ip = request.getRemoteIP();
   if( geo.getCountry( $ip ) == "Australia" ) {
      http.aptimizer.use(
         "Any hostname or path",
         "Remote Users"
      );
   }
PARAMETERS: scope, profile

TITLE: http.aptimizer.bypass
SEEALSO: http.aptimizer.use
DESCRIPTION: Do not use Aptimizer to optimize the result of this request.
Note that http.aptimizer.bypass() should not be used to turn off content
optimization for requests that have been previously optimized as
this might result in some requests not being served. Instead, create
a new Aptimizer profile with the mode set to 'Idle' and assign this
profile to the request using http.aptimizer.use().
SAMPLE: # Bypass content optimization if the query string
   # contains a 'bypass_aptimizer' parameter. This could
   # be used to quickly compare the difference between
   # optimized and unoptimized versions of a web page.
if( http.doesFormParamExist( "bypass_aptimizer" ) ) {
      http.aptimizer.bypass();
   }

